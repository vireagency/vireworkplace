{
  "version": 3,
  "sources": ["../../zod/v4/classic/external.js", "../../zod/v4/core/index.js", "../../zod/v4/core/core.js", "../../zod/v4/core/util.js", "../../zod/v4/core/errors.js", "../../zod/v4/core/parse.js", "../../zod/v4/core/regexes.js", "../../zod/v4/core/checks.js", "../../zod/v4/core/doc.js", "../../zod/v4/core/versions.js", "../../zod/v4/core/schemas.js", "../../zod/v4/locales/index.js", "../../zod/v4/locales/ar.js", "../../zod/v4/locales/az.js", "../../zod/v4/locales/be.js", "../../zod/v4/locales/ca.js", "../../zod/v4/locales/cs.js", "../../zod/v4/locales/de.js", "../../zod/v4/locales/en.js", "../../zod/v4/locales/eo.js", "../../zod/v4/locales/es.js", "../../zod/v4/locales/fa.js", "../../zod/v4/locales/fi.js", "../../zod/v4/locales/fr.js", "../../zod/v4/locales/fr-CA.js", "../../zod/v4/locales/he.js", "../../zod/v4/locales/hu.js", "../../zod/v4/locales/id.js", "../../zod/v4/locales/it.js", "../../zod/v4/locales/ja.js", "../../zod/v4/locales/kh.js", "../../zod/v4/locales/ko.js", "../../zod/v4/locales/mk.js", "../../zod/v4/locales/ms.js", "../../zod/v4/locales/nl.js", "../../zod/v4/locales/no.js", "../../zod/v4/locales/ota.js", "../../zod/v4/locales/ps.js", "../../zod/v4/locales/pl.js", "../../zod/v4/locales/pt.js", "../../zod/v4/locales/ru.js", "../../zod/v4/locales/sl.js", "../../zod/v4/locales/sv.js", "../../zod/v4/locales/ta.js", "../../zod/v4/locales/th.js", "../../zod/v4/locales/tr.js", "../../zod/v4/locales/ua.js", "../../zod/v4/locales/ur.js", "../../zod/v4/locales/vi.js", "../../zod/v4/locales/zh-CN.js", "../../zod/v4/locales/zh-TW.js", "../../zod/v4/core/registries.js", "../../zod/v4/core/api.js", "../../zod/v4/core/function.js", "../../zod/v4/core/to-json-schema.js", "../../zod/v4/core/json-schema.js", "../../zod/v4/classic/iso.js", "../../zod/v4/classic/errors.js", "../../zod/v4/classic/parse.js", "../../zod/v4/classic/schemas.js", "../../zod/v4/classic/compat.js", "../../zod/v4/classic/coerce.js", "../../zod/index.js"],
  "sourcesContent": ["export * as core from \"../core/index.js\";\r\nexport * from \"./schemas.js\";\r\nexport * from \"./checks.js\";\r\nexport * from \"./errors.js\";\r\nexport * from \"./parse.js\";\r\nexport * from \"./compat.js\";\r\n// zod-specified\r\nimport { config } from \"../core/index.js\";\r\nimport en from \"../locales/en.js\";\r\nconfig(en());\r\nexport { globalRegistry, registry, config, function, $output, $input, $brand, clone, regexes, treeifyError, prettifyError, formatError, flattenError, toJSONSchema, TimePrecision, NEVER, } from \"../core/index.js\";\r\nexport * as locales from \"../locales/index.js\";\r\n// iso\r\n// must be exported from top-level\r\n// https://github.com/colinhacks/zod/issues/4491\r\nexport { ZodISODateTime, ZodISODate, ZodISOTime, ZodISODuration } from \"./iso.js\";\r\nexport * as iso from \"./iso.js\";\r\nexport * as coerce from \"./coerce.js\";\r\n", "export * from \"./core.js\";\r\nexport * from \"./parse.js\";\r\nexport * from \"./errors.js\";\r\nexport * from \"./schemas.js\";\r\nexport * from \"./checks.js\";\r\nexport * from \"./versions.js\";\r\nexport * as util from \"./util.js\";\r\nexport * as regexes from \"./regexes.js\";\r\nexport * as locales from \"../locales/index.js\";\r\nexport * from \"./registries.js\";\r\nexport * from \"./doc.js\";\r\nexport * from \"./function.js\";\r\nexport * from \"./api.js\";\r\nexport * from \"./to-json-schema.js\";\r\nexport * as JSONSchema from \"./json-schema.js\";\r\n", "/** A special constant with type `never` */\r\nexport const NEVER = Object.freeze({\r\n    status: \"aborted\",\r\n});\r\nexport /*@__NO_SIDE_EFFECTS__*/ function $constructor(name, initializer, params) {\r\n    function init(inst, def) {\r\n        var _a;\r\n        Object.defineProperty(inst, \"_zod\", {\r\n            value: inst._zod ?? {},\r\n            enumerable: false,\r\n        });\r\n        (_a = inst._zod).traits ?? (_a.traits = new Set());\r\n        inst._zod.traits.add(name);\r\n        initializer(inst, def);\r\n        // support prototype modifications\r\n        for (const k in _.prototype) {\r\n            if (!(k in inst))\r\n                Object.defineProperty(inst, k, { value: _.prototype[k].bind(inst) });\r\n        }\r\n        inst._zod.constr = _;\r\n        inst._zod.def = def;\r\n    }\r\n    // doesn't work if Parent has a constructor with arguments\r\n    const Parent = params?.Parent ?? Object;\r\n    class Definition extends Parent {\r\n    }\r\n    Object.defineProperty(Definition, \"name\", { value: name });\r\n    function _(def) {\r\n        var _a;\r\n        const inst = params?.Parent ? new Definition() : this;\r\n        init(inst, def);\r\n        (_a = inst._zod).deferred ?? (_a.deferred = []);\r\n        for (const fn of inst._zod.deferred) {\r\n            fn();\r\n        }\r\n        return inst;\r\n    }\r\n    Object.defineProperty(_, \"init\", { value: init });\r\n    Object.defineProperty(_, Symbol.hasInstance, {\r\n        value: (inst) => {\r\n            if (params?.Parent && inst instanceof params.Parent)\r\n                return true;\r\n            return inst?._zod?.traits?.has(name);\r\n        },\r\n    });\r\n    Object.defineProperty(_, \"name\", { value: name });\r\n    return _;\r\n}\r\n//////////////////////////////   UTILITIES   ///////////////////////////////////////\r\nexport const $brand = Symbol(\"zod_brand\");\r\nexport class $ZodAsyncError extends Error {\r\n    constructor() {\r\n        super(`Encountered Promise during synchronous parse. Use .parseAsync() instead.`);\r\n    }\r\n}\r\nexport const globalConfig = {};\r\nexport function config(newConfig) {\r\n    if (newConfig)\r\n        Object.assign(globalConfig, newConfig);\r\n    return globalConfig;\r\n}\r\n", "// functions\r\nexport function assertEqual(val) {\r\n    return val;\r\n}\r\nexport function assertNotEqual(val) {\r\n    return val;\r\n}\r\nexport function assertIs(_arg) { }\r\nexport function assertNever(_x) {\r\n    throw new Error();\r\n}\r\nexport function assert(_) { }\r\nexport function getEnumValues(entries) {\r\n    const numericValues = Object.values(entries).filter((v) => typeof v === \"number\");\r\n    const values = Object.entries(entries)\r\n        .filter(([k, _]) => numericValues.indexOf(+k) === -1)\r\n        .map(([_, v]) => v);\r\n    return values;\r\n}\r\nexport function joinValues(array, separator = \"|\") {\r\n    return array.map((val) => stringifyPrimitive(val)).join(separator);\r\n}\r\nexport function jsonStringifyReplacer(_, value) {\r\n    if (typeof value === \"bigint\")\r\n        return value.toString();\r\n    return value;\r\n}\r\nexport function cached(getter) {\r\n    const set = false;\r\n    return {\r\n        get value() {\r\n            if (!set) {\r\n                const value = getter();\r\n                Object.defineProperty(this, \"value\", { value });\r\n                return value;\r\n            }\r\n            throw new Error(\"cached value already set\");\r\n        },\r\n    };\r\n}\r\nexport function nullish(input) {\r\n    return input === null || input === undefined;\r\n}\r\nexport function cleanRegex(source) {\r\n    const start = source.startsWith(\"^\") ? 1 : 0;\r\n    const end = source.endsWith(\"$\") ? source.length - 1 : source.length;\r\n    return source.slice(start, end);\r\n}\r\nexport function floatSafeRemainder(val, step) {\r\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\r\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\r\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\r\n    const valInt = Number.parseInt(val.toFixed(decCount).replace(\".\", \"\"));\r\n    const stepInt = Number.parseInt(step.toFixed(decCount).replace(\".\", \"\"));\r\n    return (valInt % stepInt) / 10 ** decCount;\r\n}\r\nexport function defineLazy(object, key, getter) {\r\n    const set = false;\r\n    Object.defineProperty(object, key, {\r\n        get() {\r\n            if (!set) {\r\n                const value = getter();\r\n                object[key] = value;\r\n                return value;\r\n            }\r\n            throw new Error(\"cached value already set\");\r\n        },\r\n        set(v) {\r\n            Object.defineProperty(object, key, {\r\n                value: v,\r\n                // configurable: true,\r\n            });\r\n            // object[key] = v;\r\n        },\r\n        configurable: true,\r\n    });\r\n}\r\nexport function assignProp(target, prop, value) {\r\n    Object.defineProperty(target, prop, {\r\n        value,\r\n        writable: true,\r\n        enumerable: true,\r\n        configurable: true,\r\n    });\r\n}\r\nexport function getElementAtPath(obj, path) {\r\n    if (!path)\r\n        return obj;\r\n    return path.reduce((acc, key) => acc?.[key], obj);\r\n}\r\nexport function promiseAllObject(promisesObj) {\r\n    const keys = Object.keys(promisesObj);\r\n    const promises = keys.map((key) => promisesObj[key]);\r\n    return Promise.all(promises).then((results) => {\r\n        const resolvedObj = {};\r\n        for (let i = 0; i < keys.length; i++) {\r\n            resolvedObj[keys[i]] = results[i];\r\n        }\r\n        return resolvedObj;\r\n    });\r\n}\r\nexport function randomString(length = 10) {\r\n    const chars = \"abcdefghijklmnopqrstuvwxyz\";\r\n    let str = \"\";\r\n    for (let i = 0; i < length; i++) {\r\n        str += chars[Math.floor(Math.random() * chars.length)];\r\n    }\r\n    return str;\r\n}\r\nexport function esc(str) {\r\n    return JSON.stringify(str);\r\n}\r\nexport const captureStackTrace = Error.captureStackTrace\r\n    ? Error.captureStackTrace\r\n    : (..._args) => { };\r\nexport function isObject(data) {\r\n    return typeof data === \"object\" && data !== null && !Array.isArray(data);\r\n}\r\nexport const allowsEval = cached(() => {\r\n    if (typeof navigator !== \"undefined\" && navigator?.userAgent?.includes(\"Cloudflare\")) {\r\n        return false;\r\n    }\r\n    try {\r\n        const F = Function;\r\n        new F(\"\");\r\n        return true;\r\n    }\r\n    catch (_) {\r\n        return false;\r\n    }\r\n});\r\nexport function isPlainObject(o) {\r\n    if (isObject(o) === false)\r\n        return false;\r\n    // modified constructor\r\n    const ctor = o.constructor;\r\n    if (ctor === undefined)\r\n        return true;\r\n    // modified prototype\r\n    const prot = ctor.prototype;\r\n    if (isObject(prot) === false)\r\n        return false;\r\n    // ctor doesn't have static `isPrototypeOf`\r\n    if (Object.prototype.hasOwnProperty.call(prot, \"isPrototypeOf\") === false) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nexport function numKeys(data) {\r\n    let keyCount = 0;\r\n    for (const key in data) {\r\n        if (Object.prototype.hasOwnProperty.call(data, key)) {\r\n            keyCount++;\r\n        }\r\n    }\r\n    return keyCount;\r\n}\r\nexport const getParsedType = (data) => {\r\n    const t = typeof data;\r\n    switch (t) {\r\n        case \"undefined\":\r\n            return \"undefined\";\r\n        case \"string\":\r\n            return \"string\";\r\n        case \"number\":\r\n            return Number.isNaN(data) ? \"nan\" : \"number\";\r\n        case \"boolean\":\r\n            return \"boolean\";\r\n        case \"function\":\r\n            return \"function\";\r\n        case \"bigint\":\r\n            return \"bigint\";\r\n        case \"symbol\":\r\n            return \"symbol\";\r\n        case \"object\":\r\n            if (Array.isArray(data)) {\r\n                return \"array\";\r\n            }\r\n            if (data === null) {\r\n                return \"null\";\r\n            }\r\n            if (data.then && typeof data.then === \"function\" && data.catch && typeof data.catch === \"function\") {\r\n                return \"promise\";\r\n            }\r\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\r\n                return \"map\";\r\n            }\r\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\r\n                return \"set\";\r\n            }\r\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\r\n                return \"date\";\r\n            }\r\n            if (typeof File !== \"undefined\" && data instanceof File) {\r\n                return \"file\";\r\n            }\r\n            return \"object\";\r\n        default:\r\n            throw new Error(`Unknown data type: ${t}`);\r\n    }\r\n};\r\nexport const propertyKeyTypes = new Set([\"string\", \"number\", \"symbol\"]);\r\nexport const primitiveTypes = new Set([\"string\", \"number\", \"bigint\", \"boolean\", \"symbol\", \"undefined\"]);\r\nexport function escapeRegex(str) {\r\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\r\n}\r\n// zod-specific utils\r\nexport function clone(inst, def, params) {\r\n    const cl = new inst._zod.constr(def ?? inst._zod.def);\r\n    if (!def || params?.parent)\r\n        cl._zod.parent = inst;\r\n    return cl;\r\n}\r\nexport function normalizeParams(_params) {\r\n    const params = _params;\r\n    if (!params)\r\n        return {};\r\n    if (typeof params === \"string\")\r\n        return { error: () => params };\r\n    if (params?.message !== undefined) {\r\n        if (params?.error !== undefined)\r\n            throw new Error(\"Cannot specify both `message` and `error` params\");\r\n        params.error = params.message;\r\n    }\r\n    delete params.message;\r\n    if (typeof params.error === \"string\")\r\n        return { ...params, error: () => params.error };\r\n    return params;\r\n}\r\nexport function createTransparentProxy(getter) {\r\n    let target;\r\n    return new Proxy({}, {\r\n        get(_, prop, receiver) {\r\n            target ?? (target = getter());\r\n            return Reflect.get(target, prop, receiver);\r\n        },\r\n        set(_, prop, value, receiver) {\r\n            target ?? (target = getter());\r\n            return Reflect.set(target, prop, value, receiver);\r\n        },\r\n        has(_, prop) {\r\n            target ?? (target = getter());\r\n            return Reflect.has(target, prop);\r\n        },\r\n        deleteProperty(_, prop) {\r\n            target ?? (target = getter());\r\n            return Reflect.deleteProperty(target, prop);\r\n        },\r\n        ownKeys(_) {\r\n            target ?? (target = getter());\r\n            return Reflect.ownKeys(target);\r\n        },\r\n        getOwnPropertyDescriptor(_, prop) {\r\n            target ?? (target = getter());\r\n            return Reflect.getOwnPropertyDescriptor(target, prop);\r\n        },\r\n        defineProperty(_, prop, descriptor) {\r\n            target ?? (target = getter());\r\n            return Reflect.defineProperty(target, prop, descriptor);\r\n        },\r\n    });\r\n}\r\nexport function stringifyPrimitive(value) {\r\n    if (typeof value === \"bigint\")\r\n        return value.toString() + \"n\";\r\n    if (typeof value === \"string\")\r\n        return `\"${value}\"`;\r\n    return `${value}`;\r\n}\r\nexport function optionalKeys(shape) {\r\n    return Object.keys(shape).filter((k) => {\r\n        return shape[k]._zod.optin === \"optional\" && shape[k]._zod.optout === \"optional\";\r\n    });\r\n}\r\nexport const NUMBER_FORMAT_RANGES = {\r\n    safeint: [Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER],\r\n    int32: [-2147483648, 2147483647],\r\n    uint32: [0, 4294967295],\r\n    float32: [-3.4028234663852886e38, 3.4028234663852886e38],\r\n    float64: [-Number.MAX_VALUE, Number.MAX_VALUE],\r\n};\r\nexport const BIGINT_FORMAT_RANGES = {\r\n    int64: [/* @__PURE__*/ BigInt(\"-9223372036854775808\"), /* @__PURE__*/ BigInt(\"9223372036854775807\")],\r\n    uint64: [/* @__PURE__*/ BigInt(0), /* @__PURE__*/ BigInt(\"18446744073709551615\")],\r\n};\r\nexport function pick(schema, mask) {\r\n    const newShape = {};\r\n    const currDef = schema._zod.def; //.shape;\r\n    for (const key in mask) {\r\n        if (!(key in currDef.shape)) {\r\n            throw new Error(`Unrecognized key: \"${key}\"`);\r\n        }\r\n        if (!mask[key])\r\n            continue;\r\n        // pick key\r\n        newShape[key] = currDef.shape[key];\r\n    }\r\n    return clone(schema, {\r\n        ...schema._zod.def,\r\n        shape: newShape,\r\n        checks: [],\r\n    });\r\n}\r\nexport function omit(schema, mask) {\r\n    const newShape = { ...schema._zod.def.shape };\r\n    const currDef = schema._zod.def; //.shape;\r\n    for (const key in mask) {\r\n        if (!(key in currDef.shape)) {\r\n            throw new Error(`Unrecognized key: \"${key}\"`);\r\n        }\r\n        if (!mask[key])\r\n            continue;\r\n        delete newShape[key];\r\n    }\r\n    return clone(schema, {\r\n        ...schema._zod.def,\r\n        shape: newShape,\r\n        checks: [],\r\n    });\r\n}\r\nexport function extend(schema, shape) {\r\n    if (!isPlainObject(shape)) {\r\n        throw new Error(\"Invalid input to extend: expected a plain object\");\r\n    }\r\n    const def = {\r\n        ...schema._zod.def,\r\n        get shape() {\r\n            const _shape = { ...schema._zod.def.shape, ...shape };\r\n            assignProp(this, \"shape\", _shape); // self-caching\r\n            return _shape;\r\n        },\r\n        checks: [], // delete existing checks\r\n    };\r\n    return clone(schema, def);\r\n}\r\nexport function merge(a, b) {\r\n    return clone(a, {\r\n        ...a._zod.def,\r\n        get shape() {\r\n            const _shape = { ...a._zod.def.shape, ...b._zod.def.shape };\r\n            assignProp(this, \"shape\", _shape); // self-caching\r\n            return _shape;\r\n        },\r\n        catchall: b._zod.def.catchall,\r\n        checks: [], // delete existing checks\r\n    });\r\n}\r\nexport function partial(Class, schema, mask) {\r\n    const oldShape = schema._zod.def.shape;\r\n    const shape = { ...oldShape };\r\n    if (mask) {\r\n        for (const key in mask) {\r\n            if (!(key in oldShape)) {\r\n                throw new Error(`Unrecognized key: \"${key}\"`);\r\n            }\r\n            if (!mask[key])\r\n                continue;\r\n            // if (oldShape[key]!._zod.optin === \"optional\") continue;\r\n            shape[key] = Class\r\n                ? new Class({\r\n                    type: \"optional\",\r\n                    innerType: oldShape[key],\r\n                })\r\n                : oldShape[key];\r\n        }\r\n    }\r\n    else {\r\n        for (const key in oldShape) {\r\n            // if (oldShape[key]!._zod.optin === \"optional\") continue;\r\n            shape[key] = Class\r\n                ? new Class({\r\n                    type: \"optional\",\r\n                    innerType: oldShape[key],\r\n                })\r\n                : oldShape[key];\r\n        }\r\n    }\r\n    return clone(schema, {\r\n        ...schema._zod.def,\r\n        shape,\r\n        checks: [],\r\n    });\r\n}\r\nexport function required(Class, schema, mask) {\r\n    const oldShape = schema._zod.def.shape;\r\n    const shape = { ...oldShape };\r\n    if (mask) {\r\n        for (const key in mask) {\r\n            if (!(key in shape)) {\r\n                throw new Error(`Unrecognized key: \"${key}\"`);\r\n            }\r\n            if (!mask[key])\r\n                continue;\r\n            // overwrite with non-optional\r\n            shape[key] = new Class({\r\n                type: \"nonoptional\",\r\n                innerType: oldShape[key],\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        for (const key in oldShape) {\r\n            // overwrite with non-optional\r\n            shape[key] = new Class({\r\n                type: \"nonoptional\",\r\n                innerType: oldShape[key],\r\n            });\r\n        }\r\n    }\r\n    return clone(schema, {\r\n        ...schema._zod.def,\r\n        shape,\r\n        // optional: [],\r\n        checks: [],\r\n    });\r\n}\r\nexport function aborted(x, startIndex = 0) {\r\n    for (let i = startIndex; i < x.issues.length; i++) {\r\n        if (x.issues[i]?.continue !== true)\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\nexport function prefixIssues(path, issues) {\r\n    return issues.map((iss) => {\r\n        var _a;\r\n        (_a = iss).path ?? (_a.path = []);\r\n        iss.path.unshift(path);\r\n        return iss;\r\n    });\r\n}\r\nexport function unwrapMessage(message) {\r\n    return typeof message === \"string\" ? message : message?.message;\r\n}\r\nexport function finalizeIssue(iss, ctx, config) {\r\n    const full = { ...iss, path: iss.path ?? [] };\r\n    // for backwards compatibility\r\n    if (!iss.message) {\r\n        const message = unwrapMessage(iss.inst?._zod.def?.error?.(iss)) ??\r\n            unwrapMessage(ctx?.error?.(iss)) ??\r\n            unwrapMessage(config.customError?.(iss)) ??\r\n            unwrapMessage(config.localeError?.(iss)) ??\r\n            \"Invalid input\";\r\n        full.message = message;\r\n    }\r\n    // delete (full as any).def;\r\n    delete full.inst;\r\n    delete full.continue;\r\n    if (!ctx?.reportInput) {\r\n        delete full.input;\r\n    }\r\n    return full;\r\n}\r\nexport function getSizableOrigin(input) {\r\n    if (input instanceof Set)\r\n        return \"set\";\r\n    if (input instanceof Map)\r\n        return \"map\";\r\n    if (input instanceof File)\r\n        return \"file\";\r\n    return \"unknown\";\r\n}\r\nexport function getLengthableOrigin(input) {\r\n    if (Array.isArray(input))\r\n        return \"array\";\r\n    if (typeof input === \"string\")\r\n        return \"string\";\r\n    return \"unknown\";\r\n}\r\nexport function issue(...args) {\r\n    const [iss, input, inst] = args;\r\n    if (typeof iss === \"string\") {\r\n        return {\r\n            message: iss,\r\n            code: \"custom\",\r\n            input,\r\n            inst,\r\n        };\r\n    }\r\n    return { ...iss };\r\n}\r\nexport function cleanEnum(obj) {\r\n    return Object.entries(obj)\r\n        .filter(([k, _]) => {\r\n        // return true if NaN, meaning it's not a number, thus a string key\r\n        return Number.isNaN(Number.parseInt(k, 10));\r\n    })\r\n        .map((el) => el[1]);\r\n}\r\n// instanceof\r\nexport class Class {\r\n    constructor(..._args) { }\r\n}\r\n", "import { $constructor } from \"./core.js\";\r\nimport * as util from \"./util.js\";\r\nconst initializer = (inst, def) => {\r\n    inst.name = \"$ZodError\";\r\n    Object.defineProperty(inst, \"_zod\", {\r\n        value: inst._zod,\r\n        enumerable: false,\r\n    });\r\n    Object.defineProperty(inst, \"issues\", {\r\n        value: def,\r\n        enumerable: false,\r\n    });\r\n    Object.defineProperty(inst, \"message\", {\r\n        get() {\r\n            return JSON.stringify(def, util.jsonStringifyReplacer, 2);\r\n        },\r\n        enumerable: true,\r\n        // configurable: false,\r\n    });\r\n    Object.defineProperty(inst, \"toString\", {\r\n        value: () => inst.message,\r\n        enumerable: false,\r\n    });\r\n};\r\nexport const $ZodError = $constructor(\"$ZodError\", initializer);\r\nexport const $ZodRealError = $constructor(\"$ZodError\", initializer, { Parent: Error });\r\nexport function flattenError(error, mapper = (issue) => issue.message) {\r\n    const fieldErrors = {};\r\n    const formErrors = [];\r\n    for (const sub of error.issues) {\r\n        if (sub.path.length > 0) {\r\n            fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\r\n            fieldErrors[sub.path[0]].push(mapper(sub));\r\n        }\r\n        else {\r\n            formErrors.push(mapper(sub));\r\n        }\r\n    }\r\n    return { formErrors, fieldErrors };\r\n}\r\nexport function formatError(error, _mapper) {\r\n    const mapper = _mapper ||\r\n        function (issue) {\r\n            return issue.message;\r\n        };\r\n    const fieldErrors = { _errors: [] };\r\n    const processError = (error) => {\r\n        for (const issue of error.issues) {\r\n            if (issue.code === \"invalid_union\" && issue.errors.length) {\r\n                issue.errors.map((issues) => processError({ issues }));\r\n            }\r\n            else if (issue.code === \"invalid_key\") {\r\n                processError({ issues: issue.issues });\r\n            }\r\n            else if (issue.code === \"invalid_element\") {\r\n                processError({ issues: issue.issues });\r\n            }\r\n            else if (issue.path.length === 0) {\r\n                fieldErrors._errors.push(mapper(issue));\r\n            }\r\n            else {\r\n                let curr = fieldErrors;\r\n                let i = 0;\r\n                while (i < issue.path.length) {\r\n                    const el = issue.path[i];\r\n                    const terminal = i === issue.path.length - 1;\r\n                    if (!terminal) {\r\n                        curr[el] = curr[el] || { _errors: [] };\r\n                    }\r\n                    else {\r\n                        curr[el] = curr[el] || { _errors: [] };\r\n                        curr[el]._errors.push(mapper(issue));\r\n                    }\r\n                    curr = curr[el];\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    processError(error);\r\n    return fieldErrors;\r\n}\r\nexport function treeifyError(error, _mapper) {\r\n    const mapper = _mapper ||\r\n        function (issue) {\r\n            return issue.message;\r\n        };\r\n    const result = { errors: [] };\r\n    const processError = (error, path = []) => {\r\n        var _a, _b;\r\n        for (const issue of error.issues) {\r\n            if (issue.code === \"invalid_union\" && issue.errors.length) {\r\n                // regular union error\r\n                issue.errors.map((issues) => processError({ issues }, issue.path));\r\n            }\r\n            else if (issue.code === \"invalid_key\") {\r\n                processError({ issues: issue.issues }, issue.path);\r\n            }\r\n            else if (issue.code === \"invalid_element\") {\r\n                processError({ issues: issue.issues }, issue.path);\r\n            }\r\n            else {\r\n                const fullpath = [...path, ...issue.path];\r\n                if (fullpath.length === 0) {\r\n                    result.errors.push(mapper(issue));\r\n                    continue;\r\n                }\r\n                let curr = result;\r\n                let i = 0;\r\n                while (i < fullpath.length) {\r\n                    const el = fullpath[i];\r\n                    const terminal = i === fullpath.length - 1;\r\n                    if (typeof el === \"string\") {\r\n                        curr.properties ?? (curr.properties = {});\r\n                        (_a = curr.properties)[el] ?? (_a[el] = { errors: [] });\r\n                        curr = curr.properties[el];\r\n                    }\r\n                    else {\r\n                        curr.items ?? (curr.items = []);\r\n                        (_b = curr.items)[el] ?? (_b[el] = { errors: [] });\r\n                        curr = curr.items[el];\r\n                    }\r\n                    if (terminal) {\r\n                        curr.errors.push(mapper(issue));\r\n                    }\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    processError(error);\r\n    return result;\r\n}\r\n/** Format a ZodError as a human-readable string in the following form.\r\n *\r\n * From\r\n *\r\n * ```ts\r\n * ZodError {\r\n *   issues: [\r\n *     {\r\n *       expected: 'string',\r\n *       code: 'invalid_type',\r\n *       path: [ 'username' ],\r\n *       message: 'Invalid input: expected string'\r\n *     },\r\n *     {\r\n *       expected: 'number',\r\n *       code: 'invalid_type',\r\n *       path: [ 'favoriteNumbers', 1 ],\r\n *       message: 'Invalid input: expected number'\r\n *     }\r\n *   ];\r\n * }\r\n * ```\r\n *\r\n * to\r\n *\r\n * ```\r\n * username\r\n *   ✖ Expected number, received string at \"username\r\n * favoriteNumbers[0]\r\n *   ✖ Invalid input: expected number\r\n * ```\r\n */\r\nexport function toDotPath(path) {\r\n    const segs = [];\r\n    for (const seg of path) {\r\n        if (typeof seg === \"number\")\r\n            segs.push(`[${seg}]`);\r\n        else if (typeof seg === \"symbol\")\r\n            segs.push(`[${JSON.stringify(String(seg))}]`);\r\n        else if (/[^\\w$]/.test(seg))\r\n            segs.push(`[${JSON.stringify(seg)}]`);\r\n        else {\r\n            if (segs.length)\r\n                segs.push(\".\");\r\n            segs.push(seg);\r\n        }\r\n    }\r\n    return segs.join(\"\");\r\n}\r\nexport function prettifyError(error) {\r\n    const lines = [];\r\n    // sort by path length\r\n    const issues = [...error.issues].sort((a, b) => a.path.length - b.path.length);\r\n    // Process each issue\r\n    for (const issue of issues) {\r\n        lines.push(`✖ ${issue.message}`);\r\n        if (issue.path?.length)\r\n            lines.push(`  → at ${toDotPath(issue.path)}`);\r\n    }\r\n    // Convert Map to formatted string\r\n    return lines.join(\"\\n\");\r\n}\r\n", "import * as core from \"./core.js\";\r\nimport * as errors from \"./errors.js\";\r\nimport * as util from \"./util.js\";\r\nexport const _parse = (_Err) => (schema, value, _ctx, _params) => {\r\n    const ctx = _ctx ? Object.assign(_ctx, { async: false }) : { async: false };\r\n    const result = schema._zod.run({ value, issues: [] }, ctx);\r\n    if (result instanceof Promise) {\r\n        throw new core.$ZodAsyncError();\r\n    }\r\n    if (result.issues.length) {\r\n        const e = new (_params?.Err ?? _Err)(result.issues.map((iss) => util.finalizeIssue(iss, ctx, core.config())));\r\n        util.captureStackTrace(e, _params?.callee);\r\n        throw e;\r\n    }\r\n    return result.value;\r\n};\r\nexport const parse = /* @__PURE__*/ _parse(errors.$ZodRealError);\r\nexport const _parseAsync = (_Err) => async (schema, value, _ctx, params) => {\r\n    const ctx = _ctx ? Object.assign(_ctx, { async: true }) : { async: true };\r\n    let result = schema._zod.run({ value, issues: [] }, ctx);\r\n    if (result instanceof Promise)\r\n        result = await result;\r\n    if (result.issues.length) {\r\n        const e = new (params?.Err ?? _Err)(result.issues.map((iss) => util.finalizeIssue(iss, ctx, core.config())));\r\n        util.captureStackTrace(e, params?.callee);\r\n        throw e;\r\n    }\r\n    return result.value;\r\n};\r\nexport const parseAsync = /* @__PURE__*/ _parseAsync(errors.$ZodRealError);\r\nexport const _safeParse = (_Err) => (schema, value, _ctx) => {\r\n    const ctx = _ctx ? { ..._ctx, async: false } : { async: false };\r\n    const result = schema._zod.run({ value, issues: [] }, ctx);\r\n    if (result instanceof Promise) {\r\n        throw new core.$ZodAsyncError();\r\n    }\r\n    return result.issues.length\r\n        ? {\r\n            success: false,\r\n            error: new (_Err ?? errors.$ZodError)(result.issues.map((iss) => util.finalizeIssue(iss, ctx, core.config()))),\r\n        }\r\n        : { success: true, data: result.value };\r\n};\r\nexport const safeParse = /* @__PURE__*/ _safeParse(errors.$ZodRealError);\r\nexport const _safeParseAsync = (_Err) => async (schema, value, _ctx) => {\r\n    const ctx = _ctx ? Object.assign(_ctx, { async: true }) : { async: true };\r\n    let result = schema._zod.run({ value, issues: [] }, ctx);\r\n    if (result instanceof Promise)\r\n        result = await result;\r\n    return result.issues.length\r\n        ? {\r\n            success: false,\r\n            error: new _Err(result.issues.map((iss) => util.finalizeIssue(iss, ctx, core.config()))),\r\n        }\r\n        : { success: true, data: result.value };\r\n};\r\nexport const safeParseAsync = /* @__PURE__*/ _safeParseAsync(errors.$ZodRealError);\r\n", "export const cuid = /^[cC][^\\s-]{8,}$/;\r\nexport const cuid2 = /^[0-9a-z]+$/;\r\nexport const ulid = /^[0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{26}$/;\r\nexport const xid = /^[0-9a-vA-V]{20}$/;\r\nexport const ksuid = /^[A-Za-z0-9]{27}$/;\r\nexport const nanoid = /^[a-zA-Z0-9_-]{21}$/;\r\n/** ISO 8601-1 duration regex. Does not support the 8601-2 extensions like negative durations or fractional/negative components. */\r\nexport const duration = /^P(?:(\\d+W)|(?!.*W)(?=\\d|T\\d)(\\d+Y)?(\\d+M)?(\\d+D)?(T(?=\\d)(\\d+H)?(\\d+M)?(\\d+([.,]\\d+)?S)?)?)$/;\r\n/** Implements ISO 8601-2 extensions like explicit +- prefixes, mixing weeks with other units, and fractional/negative components. */\r\nexport const extendedDuration = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\r\n/** A regex for any UUID-like identifier: 8-4-4-4-12 hex pattern */\r\nexport const guid = /^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})$/;\r\n/** Returns a regex for validating an RFC 4122 UUID.\r\n *\r\n * @param version Optionally specify a version 1-8. If no version is specified, all versions are supported. */\r\nexport const uuid = (version) => {\r\n    if (!version)\r\n        return /^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$/;\r\n    return new RegExp(`^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-${version}[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12})$`);\r\n};\r\nexport const uuid4 = /*@__PURE__*/ uuid(4);\r\nexport const uuid6 = /*@__PURE__*/ uuid(6);\r\nexport const uuid7 = /*@__PURE__*/ uuid(7);\r\n/** Practical email validation */\r\nexport const email = /^(?!\\.)(?!.*\\.\\.)([A-Za-z0-9_'+\\-\\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\\-]*\\.)+[A-Za-z]{2,}$/;\r\n/** Equivalent to the HTML5 input[type=email] validation implemented by browsers. Source: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email */\r\nexport const html5Email = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\r\n/** The classic emailregex.com regex for RFC 5322-compliant emails */\r\nexport const rfc5322Email = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n/** A loose regex that allows Unicode characters, enforces length limits, and that's about it. */\r\nexport const unicodeEmail = /^[^\\s@\"]{1,64}@[^\\s@]{1,255}$/u;\r\nexport const browserEmail = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\r\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\r\nconst _emoji = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\r\nexport function emoji() {\r\n    return new RegExp(_emoji, \"u\");\r\n}\r\nexport const ipv4 = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\r\nexport const ipv6 = /^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|::|([0-9a-fA-F]{1,4})?::([0-9a-fA-F]{1,4}:?){0,6})$/;\r\nexport const cidrv4 = /^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/([0-9]|[1-2][0-9]|3[0-2])$/;\r\nexport const cidrv6 = /^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|::|([0-9a-fA-F]{1,4})?::([0-9a-fA-F]{1,4}:?){0,6})\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;\r\n// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript\r\nexport const base64 = /^$|^(?:[0-9a-zA-Z+/]{4})*(?:(?:[0-9a-zA-Z+/]{2}==)|(?:[0-9a-zA-Z+/]{3}=))?$/;\r\nexport const base64url = /^[A-Za-z0-9_-]*$/;\r\n// based on https://stackoverflow.com/questions/106179/regular-expression-to-match-dns-hostname-or-ip-address\r\n// export const hostname: RegExp =\r\n//   /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)+([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$/;\r\nexport const hostname = /^([a-zA-Z0-9-]+\\.)*[a-zA-Z0-9-]+$/;\r\nexport const domain = /^([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,}$/;\r\n// https://blog.stevenlevithan.com/archives/validate-phone-number#r4-3 (regex sans spaces)\r\nexport const e164 = /^\\+(?:[0-9]){6,14}[0-9]$/;\r\n// const dateSource = `((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))`;\r\nconst dateSource = `(?:(?:\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\\\d|30)|(?:02)-(?:0[1-9]|1\\\\d|2[0-8])))`;\r\nexport const date = /*@__PURE__*/ new RegExp(`^${dateSource}$`);\r\nfunction timeSource(args) {\r\n    const hhmm = `(?:[01]\\\\d|2[0-3]):[0-5]\\\\d`;\r\n    const regex = typeof args.precision === \"number\"\r\n        ? args.precision === -1\r\n            ? `${hhmm}`\r\n            : args.precision === 0\r\n                ? `${hhmm}:[0-5]\\\\d`\r\n                : `${hhmm}:[0-5]\\\\d\\\\.\\\\d{${args.precision}}`\r\n        : `${hhmm}(?::[0-5]\\\\d(?:\\\\.\\\\d+)?)?`;\r\n    return regex;\r\n}\r\nexport function time(args) {\r\n    return new RegExp(`^${timeSource(args)}$`);\r\n}\r\n// Adapted from https://stackoverflow.com/a/3143231\r\nexport function datetime(args) {\r\n    const time = timeSource({ precision: args.precision });\r\n    const opts = [\"Z\"];\r\n    if (args.local)\r\n        opts.push(\"\");\r\n    if (args.offset)\r\n        opts.push(`([+-]\\\\d{2}:\\\\d{2})`);\r\n    const timeRegex = `${time}(?:${opts.join(\"|\")})`;\r\n    return new RegExp(`^${dateSource}T(?:${timeRegex})$`);\r\n}\r\nexport const string = (params) => {\r\n    const regex = params ? `[\\\\s\\\\S]{${params?.minimum ?? 0},${params?.maximum ?? \"\"}}` : `[\\\\s\\\\S]*`;\r\n    return new RegExp(`^${regex}$`);\r\n};\r\nexport const bigint = /^\\d+n?$/;\r\nexport const integer = /^\\d+$/;\r\nexport const number = /^-?\\d+(?:\\.\\d+)?/i;\r\nexport const boolean = /true|false/i;\r\nconst _null = /null/i;\r\nexport { _null as null };\r\nconst _undefined = /undefined/i;\r\nexport { _undefined as undefined };\r\n// regex for string with no uppercase letters\r\nexport const lowercase = /^[^A-Z]*$/;\r\n// regex for string with no lowercase letters\r\nexport const uppercase = /^[^a-z]*$/;\r\n", "// import { $ZodType } from \"./schemas.js\";\r\nimport * as core from \"./core.js\";\r\nimport * as regexes from \"./regexes.js\";\r\nimport * as util from \"./util.js\";\r\nexport const $ZodCheck = /*@__PURE__*/ core.$constructor(\"$ZodCheck\", (inst, def) => {\r\n    var _a;\r\n    inst._zod ?? (inst._zod = {});\r\n    inst._zod.def = def;\r\n    (_a = inst._zod).onattach ?? (_a.onattach = []);\r\n});\r\nconst numericOriginMap = {\r\n    number: \"number\",\r\n    bigint: \"bigint\",\r\n    object: \"date\",\r\n};\r\nexport const $ZodCheckLessThan = /*@__PURE__*/ core.$constructor(\"$ZodCheckLessThan\", (inst, def) => {\r\n    $ZodCheck.init(inst, def);\r\n    const origin = numericOriginMap[typeof def.value];\r\n    inst._zod.onattach.push((inst) => {\r\n        const bag = inst._zod.bag;\r\n        const curr = (def.inclusive ? bag.maximum : bag.exclusiveMaximum) ?? Number.POSITIVE_INFINITY;\r\n        if (def.value < curr) {\r\n            if (def.inclusive)\r\n                bag.maximum = def.value;\r\n            else\r\n                bag.exclusiveMaximum = def.value;\r\n        }\r\n    });\r\n    inst._zod.check = (payload) => {\r\n        if (def.inclusive ? payload.value <= def.value : payload.value < def.value) {\r\n            return;\r\n        }\r\n        payload.issues.push({\r\n            origin,\r\n            code: \"too_big\",\r\n            maximum: def.value,\r\n            input: payload.value,\r\n            inclusive: def.inclusive,\r\n            inst,\r\n            continue: !def.abort,\r\n        });\r\n    };\r\n});\r\nexport const $ZodCheckGreaterThan = /*@__PURE__*/ core.$constructor(\"$ZodCheckGreaterThan\", (inst, def) => {\r\n    $ZodCheck.init(inst, def);\r\n    const origin = numericOriginMap[typeof def.value];\r\n    inst._zod.onattach.push((inst) => {\r\n        const bag = inst._zod.bag;\r\n        const curr = (def.inclusive ? bag.minimum : bag.exclusiveMinimum) ?? Number.NEGATIVE_INFINITY;\r\n        if (def.value > curr) {\r\n            if (def.inclusive)\r\n                bag.minimum = def.value;\r\n            else\r\n                bag.exclusiveMinimum = def.value;\r\n        }\r\n    });\r\n    inst._zod.check = (payload) => {\r\n        if (def.inclusive ? payload.value >= def.value : payload.value > def.value) {\r\n            return;\r\n        }\r\n        payload.issues.push({\r\n            origin,\r\n            code: \"too_small\",\r\n            minimum: def.value,\r\n            input: payload.value,\r\n            inclusive: def.inclusive,\r\n            inst,\r\n            continue: !def.abort,\r\n        });\r\n    };\r\n});\r\nexport const $ZodCheckMultipleOf = \r\n/*@__PURE__*/ core.$constructor(\"$ZodCheckMultipleOf\", (inst, def) => {\r\n    $ZodCheck.init(inst, def);\r\n    inst._zod.onattach.push((inst) => {\r\n        var _a;\r\n        (_a = inst._zod.bag).multipleOf ?? (_a.multipleOf = def.value);\r\n    });\r\n    inst._zod.check = (payload) => {\r\n        if (typeof payload.value !== typeof def.value)\r\n            throw new Error(\"Cannot mix number and bigint in multiple_of check.\");\r\n        const isMultiple = typeof payload.value === \"bigint\"\r\n            ? payload.value % def.value === BigInt(0)\r\n            : util.floatSafeRemainder(payload.value, def.value) === 0;\r\n        if (isMultiple)\r\n            return;\r\n        payload.issues.push({\r\n            origin: typeof payload.value,\r\n            code: \"not_multiple_of\",\r\n            divisor: def.value,\r\n            input: payload.value,\r\n            inst,\r\n            continue: !def.abort,\r\n        });\r\n    };\r\n});\r\nexport const $ZodCheckNumberFormat = /*@__PURE__*/ core.$constructor(\"$ZodCheckNumberFormat\", (inst, def) => {\r\n    $ZodCheck.init(inst, def); // no format checks\r\n    def.format = def.format || \"float64\";\r\n    const isInt = def.format?.includes(\"int\");\r\n    const origin = isInt ? \"int\" : \"number\";\r\n    const [minimum, maximum] = util.NUMBER_FORMAT_RANGES[def.format];\r\n    inst._zod.onattach.push((inst) => {\r\n        const bag = inst._zod.bag;\r\n        bag.format = def.format;\r\n        bag.minimum = minimum;\r\n        bag.maximum = maximum;\r\n        if (isInt)\r\n            bag.pattern = regexes.integer;\r\n    });\r\n    inst._zod.check = (payload) => {\r\n        const input = payload.value;\r\n        if (isInt) {\r\n            if (!Number.isInteger(input)) {\r\n                // invalid_format issue\r\n                // payload.issues.push({\r\n                //   expected: def.format,\r\n                //   format: def.format,\r\n                //   code: \"invalid_format\",\r\n                //   input,\r\n                //   inst,\r\n                // });\r\n                // invalid_type issue\r\n                payload.issues.push({\r\n                    expected: origin,\r\n                    format: def.format,\r\n                    code: \"invalid_type\",\r\n                    input,\r\n                    inst,\r\n                });\r\n                return;\r\n                // not_multiple_of issue\r\n                // payload.issues.push({\r\n                //   code: \"not_multiple_of\",\r\n                //   origin: \"number\",\r\n                //   input,\r\n                //   inst,\r\n                //   divisor: 1,\r\n                // });\r\n            }\r\n            if (!Number.isSafeInteger(input)) {\r\n                if (input > 0) {\r\n                    // too_big\r\n                    payload.issues.push({\r\n                        input,\r\n                        code: \"too_big\",\r\n                        maximum: Number.MAX_SAFE_INTEGER,\r\n                        note: \"Integers must be within the safe integer range.\",\r\n                        inst,\r\n                        origin,\r\n                        continue: !def.abort,\r\n                    });\r\n                }\r\n                else {\r\n                    // too_small\r\n                    payload.issues.push({\r\n                        input,\r\n                        code: \"too_small\",\r\n                        minimum: Number.MIN_SAFE_INTEGER,\r\n                        note: \"Integers must be within the safe integer range.\",\r\n                        inst,\r\n                        origin,\r\n                        continue: !def.abort,\r\n                    });\r\n                }\r\n                return;\r\n            }\r\n        }\r\n        if (input < minimum) {\r\n            payload.issues.push({\r\n                origin: \"number\",\r\n                input,\r\n                code: \"too_small\",\r\n                minimum,\r\n                inclusive: true,\r\n                inst,\r\n                continue: !def.abort,\r\n            });\r\n        }\r\n        if (input > maximum) {\r\n            payload.issues.push({\r\n                origin: \"number\",\r\n                input,\r\n                code: \"too_big\",\r\n                maximum,\r\n                inst,\r\n            });\r\n        }\r\n    };\r\n});\r\nexport const $ZodCheckBigIntFormat = /*@__PURE__*/ core.$constructor(\"$ZodCheckBigIntFormat\", (inst, def) => {\r\n    $ZodCheck.init(inst, def); // no format checks\r\n    const [minimum, maximum] = util.BIGINT_FORMAT_RANGES[def.format];\r\n    inst._zod.onattach.push((inst) => {\r\n        const bag = inst._zod.bag;\r\n        bag.format = def.format;\r\n        bag.minimum = minimum;\r\n        bag.maximum = maximum;\r\n    });\r\n    inst._zod.check = (payload) => {\r\n        const input = payload.value;\r\n        if (input < minimum) {\r\n            payload.issues.push({\r\n                origin: \"bigint\",\r\n                input,\r\n                code: \"too_small\",\r\n                minimum: minimum,\r\n                inclusive: true,\r\n                inst,\r\n                continue: !def.abort,\r\n            });\r\n        }\r\n        if (input > maximum) {\r\n            payload.issues.push({\r\n                origin: \"bigint\",\r\n                input,\r\n                code: \"too_big\",\r\n                maximum,\r\n                inst,\r\n            });\r\n        }\r\n    };\r\n});\r\nexport const $ZodCheckMaxSize = /*@__PURE__*/ core.$constructor(\"$ZodCheckMaxSize\", (inst, def) => {\r\n    var _a;\r\n    $ZodCheck.init(inst, def);\r\n    (_a = inst._zod.def).when ?? (_a.when = (payload) => {\r\n        const val = payload.value;\r\n        return !util.nullish(val) && val.size !== undefined;\r\n    });\r\n    inst._zod.onattach.push((inst) => {\r\n        const curr = (inst._zod.bag.maximum ?? Number.POSITIVE_INFINITY);\r\n        if (def.maximum < curr)\r\n            inst._zod.bag.maximum = def.maximum;\r\n    });\r\n    inst._zod.check = (payload) => {\r\n        const input = payload.value;\r\n        const size = input.size;\r\n        if (size <= def.maximum)\r\n            return;\r\n        payload.issues.push({\r\n            origin: util.getSizableOrigin(input),\r\n            code: \"too_big\",\r\n            maximum: def.maximum,\r\n            input,\r\n            inst,\r\n            continue: !def.abort,\r\n        });\r\n    };\r\n});\r\nexport const $ZodCheckMinSize = /*@__PURE__*/ core.$constructor(\"$ZodCheckMinSize\", (inst, def) => {\r\n    var _a;\r\n    $ZodCheck.init(inst, def);\r\n    (_a = inst._zod.def).when ?? (_a.when = (payload) => {\r\n        const val = payload.value;\r\n        return !util.nullish(val) && val.size !== undefined;\r\n    });\r\n    inst._zod.onattach.push((inst) => {\r\n        const curr = (inst._zod.bag.minimum ?? Number.NEGATIVE_INFINITY);\r\n        if (def.minimum > curr)\r\n            inst._zod.bag.minimum = def.minimum;\r\n    });\r\n    inst._zod.check = (payload) => {\r\n        const input = payload.value;\r\n        const size = input.size;\r\n        if (size >= def.minimum)\r\n            return;\r\n        payload.issues.push({\r\n            origin: util.getSizableOrigin(input),\r\n            code: \"too_small\",\r\n            minimum: def.minimum,\r\n            input,\r\n            inst,\r\n            continue: !def.abort,\r\n        });\r\n    };\r\n});\r\nexport const $ZodCheckSizeEquals = /*@__PURE__*/ core.$constructor(\"$ZodCheckSizeEquals\", (inst, def) => {\r\n    var _a;\r\n    $ZodCheck.init(inst, def);\r\n    (_a = inst._zod.def).when ?? (_a.when = (payload) => {\r\n        const val = payload.value;\r\n        return !util.nullish(val) && val.size !== undefined;\r\n    });\r\n    inst._zod.onattach.push((inst) => {\r\n        const bag = inst._zod.bag;\r\n        bag.minimum = def.size;\r\n        bag.maximum = def.size;\r\n        bag.size = def.size;\r\n    });\r\n    inst._zod.check = (payload) => {\r\n        const input = payload.value;\r\n        const size = input.size;\r\n        if (size === def.size)\r\n            return;\r\n        const tooBig = size > def.size;\r\n        payload.issues.push({\r\n            origin: util.getSizableOrigin(input),\r\n            ...(tooBig ? { code: \"too_big\", maximum: def.size } : { code: \"too_small\", minimum: def.size }),\r\n            inclusive: true,\r\n            exact: true,\r\n            input: payload.value,\r\n            inst,\r\n            continue: !def.abort,\r\n        });\r\n    };\r\n});\r\nexport const $ZodCheckMaxLength = /*@__PURE__*/ core.$constructor(\"$ZodCheckMaxLength\", (inst, def) => {\r\n    var _a;\r\n    $ZodCheck.init(inst, def);\r\n    (_a = inst._zod.def).when ?? (_a.when = (payload) => {\r\n        const val = payload.value;\r\n        return !util.nullish(val) && val.length !== undefined;\r\n    });\r\n    inst._zod.onattach.push((inst) => {\r\n        const curr = (inst._zod.bag.maximum ?? Number.POSITIVE_INFINITY);\r\n        if (def.maximum < curr)\r\n            inst._zod.bag.maximum = def.maximum;\r\n    });\r\n    inst._zod.check = (payload) => {\r\n        const input = payload.value;\r\n        const length = input.length;\r\n        if (length <= def.maximum)\r\n            return;\r\n        const origin = util.getLengthableOrigin(input);\r\n        payload.issues.push({\r\n            origin,\r\n            code: \"too_big\",\r\n            maximum: def.maximum,\r\n            inclusive: true,\r\n            input,\r\n            inst,\r\n            continue: !def.abort,\r\n        });\r\n    };\r\n});\r\nexport const $ZodCheckMinLength = /*@__PURE__*/ core.$constructor(\"$ZodCheckMinLength\", (inst, def) => {\r\n    var _a;\r\n    $ZodCheck.init(inst, def);\r\n    (_a = inst._zod.def).when ?? (_a.when = (payload) => {\r\n        const val = payload.value;\r\n        return !util.nullish(val) && val.length !== undefined;\r\n    });\r\n    inst._zod.onattach.push((inst) => {\r\n        const curr = (inst._zod.bag.minimum ?? Number.NEGATIVE_INFINITY);\r\n        if (def.minimum > curr)\r\n            inst._zod.bag.minimum = def.minimum;\r\n    });\r\n    inst._zod.check = (payload) => {\r\n        const input = payload.value;\r\n        const length = input.length;\r\n        if (length >= def.minimum)\r\n            return;\r\n        const origin = util.getLengthableOrigin(input);\r\n        payload.issues.push({\r\n            origin,\r\n            code: \"too_small\",\r\n            minimum: def.minimum,\r\n            inclusive: true,\r\n            input,\r\n            inst,\r\n            continue: !def.abort,\r\n        });\r\n    };\r\n});\r\nexport const $ZodCheckLengthEquals = /*@__PURE__*/ core.$constructor(\"$ZodCheckLengthEquals\", (inst, def) => {\r\n    var _a;\r\n    $ZodCheck.init(inst, def);\r\n    (_a = inst._zod.def).when ?? (_a.when = (payload) => {\r\n        const val = payload.value;\r\n        return !util.nullish(val) && val.length !== undefined;\r\n    });\r\n    inst._zod.onattach.push((inst) => {\r\n        const bag = inst._zod.bag;\r\n        bag.minimum = def.length;\r\n        bag.maximum = def.length;\r\n        bag.length = def.length;\r\n    });\r\n    inst._zod.check = (payload) => {\r\n        const input = payload.value;\r\n        const length = input.length;\r\n        if (length === def.length)\r\n            return;\r\n        const origin = util.getLengthableOrigin(input);\r\n        const tooBig = length > def.length;\r\n        payload.issues.push({\r\n            origin,\r\n            ...(tooBig ? { code: \"too_big\", maximum: def.length } : { code: \"too_small\", minimum: def.length }),\r\n            inclusive: true,\r\n            exact: true,\r\n            input: payload.value,\r\n            inst,\r\n            continue: !def.abort,\r\n        });\r\n    };\r\n});\r\nexport const $ZodCheckStringFormat = /*@__PURE__*/ core.$constructor(\"$ZodCheckStringFormat\", (inst, def) => {\r\n    var _a, _b;\r\n    $ZodCheck.init(inst, def);\r\n    inst._zod.onattach.push((inst) => {\r\n        const bag = inst._zod.bag;\r\n        bag.format = def.format;\r\n        if (def.pattern) {\r\n            bag.patterns ?? (bag.patterns = new Set());\r\n            bag.patterns.add(def.pattern);\r\n        }\r\n    });\r\n    if (def.pattern)\r\n        (_a = inst._zod).check ?? (_a.check = (payload) => {\r\n            def.pattern.lastIndex = 0;\r\n            if (def.pattern.test(payload.value))\r\n                return;\r\n            payload.issues.push({\r\n                origin: \"string\",\r\n                code: \"invalid_format\",\r\n                format: def.format,\r\n                input: payload.value,\r\n                ...(def.pattern ? { pattern: def.pattern.toString() } : {}),\r\n                inst,\r\n                continue: !def.abort,\r\n            });\r\n        });\r\n    else\r\n        (_b = inst._zod).check ?? (_b.check = () => { });\r\n});\r\nexport const $ZodCheckRegex = /*@__PURE__*/ core.$constructor(\"$ZodCheckRegex\", (inst, def) => {\r\n    $ZodCheckStringFormat.init(inst, def);\r\n    inst._zod.check = (payload) => {\r\n        def.pattern.lastIndex = 0;\r\n        if (def.pattern.test(payload.value))\r\n            return;\r\n        payload.issues.push({\r\n            origin: \"string\",\r\n            code: \"invalid_format\",\r\n            format: \"regex\",\r\n            input: payload.value,\r\n            pattern: def.pattern.toString(),\r\n            inst,\r\n            continue: !def.abort,\r\n        });\r\n    };\r\n});\r\nexport const $ZodCheckLowerCase = /*@__PURE__*/ core.$constructor(\"$ZodCheckLowerCase\", (inst, def) => {\r\n    def.pattern ?? (def.pattern = regexes.lowercase);\r\n    $ZodCheckStringFormat.init(inst, def);\r\n});\r\nexport const $ZodCheckUpperCase = /*@__PURE__*/ core.$constructor(\"$ZodCheckUpperCase\", (inst, def) => {\r\n    def.pattern ?? (def.pattern = regexes.uppercase);\r\n    $ZodCheckStringFormat.init(inst, def);\r\n});\r\nexport const $ZodCheckIncludes = /*@__PURE__*/ core.$constructor(\"$ZodCheckIncludes\", (inst, def) => {\r\n    $ZodCheck.init(inst, def);\r\n    const escapedRegex = util.escapeRegex(def.includes);\r\n    const pattern = new RegExp(typeof def.position === \"number\" ? `^.{${def.position}}${escapedRegex}` : escapedRegex);\r\n    def.pattern = pattern;\r\n    inst._zod.onattach.push((inst) => {\r\n        const bag = inst._zod.bag;\r\n        bag.patterns ?? (bag.patterns = new Set());\r\n        bag.patterns.add(pattern);\r\n    });\r\n    inst._zod.check = (payload) => {\r\n        if (payload.value.includes(def.includes, def.position))\r\n            return;\r\n        payload.issues.push({\r\n            origin: \"string\",\r\n            code: \"invalid_format\",\r\n            format: \"includes\",\r\n            includes: def.includes,\r\n            input: payload.value,\r\n            inst,\r\n            continue: !def.abort,\r\n        });\r\n    };\r\n});\r\nexport const $ZodCheckStartsWith = /*@__PURE__*/ core.$constructor(\"$ZodCheckStartsWith\", (inst, def) => {\r\n    $ZodCheck.init(inst, def);\r\n    const pattern = new RegExp(`^${util.escapeRegex(def.prefix)}.*`);\r\n    def.pattern ?? (def.pattern = pattern);\r\n    inst._zod.onattach.push((inst) => {\r\n        const bag = inst._zod.bag;\r\n        bag.patterns ?? (bag.patterns = new Set());\r\n        bag.patterns.add(pattern);\r\n    });\r\n    inst._zod.check = (payload) => {\r\n        if (payload.value.startsWith(def.prefix))\r\n            return;\r\n        payload.issues.push({\r\n            origin: \"string\",\r\n            code: \"invalid_format\",\r\n            format: \"starts_with\",\r\n            prefix: def.prefix,\r\n            input: payload.value,\r\n            inst,\r\n            continue: !def.abort,\r\n        });\r\n    };\r\n});\r\nexport const $ZodCheckEndsWith = /*@__PURE__*/ core.$constructor(\"$ZodCheckEndsWith\", (inst, def) => {\r\n    $ZodCheck.init(inst, def);\r\n    const pattern = new RegExp(`.*${util.escapeRegex(def.suffix)}$`);\r\n    def.pattern ?? (def.pattern = pattern);\r\n    inst._zod.onattach.push((inst) => {\r\n        const bag = inst._zod.bag;\r\n        bag.patterns ?? (bag.patterns = new Set());\r\n        bag.patterns.add(pattern);\r\n    });\r\n    inst._zod.check = (payload) => {\r\n        if (payload.value.endsWith(def.suffix))\r\n            return;\r\n        payload.issues.push({\r\n            origin: \"string\",\r\n            code: \"invalid_format\",\r\n            format: \"ends_with\",\r\n            suffix: def.suffix,\r\n            input: payload.value,\r\n            inst,\r\n            continue: !def.abort,\r\n        });\r\n    };\r\n});\r\n///////////////////////////////////\r\n/////    $ZodCheckProperty    /////\r\n///////////////////////////////////\r\nfunction handleCheckPropertyResult(result, payload, property) {\r\n    if (result.issues.length) {\r\n        payload.issues.push(...util.prefixIssues(property, result.issues));\r\n    }\r\n}\r\nexport const $ZodCheckProperty = /*@__PURE__*/ core.$constructor(\"$ZodCheckProperty\", (inst, def) => {\r\n    $ZodCheck.init(inst, def);\r\n    inst._zod.check = (payload) => {\r\n        const result = def.schema._zod.run({\r\n            value: payload.value[def.property],\r\n            issues: [],\r\n        }, {});\r\n        if (result instanceof Promise) {\r\n            return result.then((result) => handleCheckPropertyResult(result, payload, def.property));\r\n        }\r\n        handleCheckPropertyResult(result, payload, def.property);\r\n        return;\r\n    };\r\n});\r\nexport const $ZodCheckMimeType = /*@__PURE__*/ core.$constructor(\"$ZodCheckMimeType\", (inst, def) => {\r\n    $ZodCheck.init(inst, def);\r\n    const mimeSet = new Set(def.mime);\r\n    inst._zod.onattach.push((inst) => {\r\n        inst._zod.bag.mime = def.mime;\r\n    });\r\n    inst._zod.check = (payload) => {\r\n        if (mimeSet.has(payload.value.type))\r\n            return;\r\n        payload.issues.push({\r\n            code: \"invalid_value\",\r\n            values: def.mime,\r\n            input: payload.value.type,\r\n            inst,\r\n        });\r\n    };\r\n});\r\nexport const $ZodCheckOverwrite = /*@__PURE__*/ core.$constructor(\"$ZodCheckOverwrite\", (inst, def) => {\r\n    $ZodCheck.init(inst, def);\r\n    inst._zod.check = (payload) => {\r\n        payload.value = def.tx(payload.value);\r\n    };\r\n});\r\n", "export class Doc {\r\n    constructor(args = []) {\r\n        this.content = [];\r\n        this.indent = 0;\r\n        if (this)\r\n            this.args = args;\r\n    }\r\n    indented(fn) {\r\n        this.indent += 1;\r\n        fn(this);\r\n        this.indent -= 1;\r\n    }\r\n    write(arg) {\r\n        if (typeof arg === \"function\") {\r\n            arg(this, { execution: \"sync\" });\r\n            arg(this, { execution: \"async\" });\r\n            return;\r\n        }\r\n        const content = arg;\r\n        const lines = content.split(\"\\n\").filter((x) => x);\r\n        const minIndent = Math.min(...lines.map((x) => x.length - x.trimStart().length));\r\n        const dedented = lines.map((x) => x.slice(minIndent)).map((x) => \" \".repeat(this.indent * 2) + x);\r\n        for (const line of dedented) {\r\n            this.content.push(line);\r\n        }\r\n    }\r\n    compile() {\r\n        const F = Function;\r\n        const args = this?.args;\r\n        const content = this?.content ?? [``];\r\n        const lines = [...content.map((x) => `  ${x}`)];\r\n        // console.log(lines.join(\"\\n\"));\r\n        return new F(...args, lines.join(\"\\n\"));\r\n    }\r\n}\r\n", "export const version = {\r\n    major: 4,\r\n    minor: 0,\r\n    patch: 5,\r\n};\r\n", "import * as checks from \"./checks.js\";\r\nimport * as core from \"./core.js\";\r\nimport { Doc } from \"./doc.js\";\r\nimport { safeParse, safeParseAsync } from \"./parse.js\";\r\nimport * as regexes from \"./regexes.js\";\r\nimport * as util from \"./util.js\";\r\nimport { version } from \"./versions.js\";\r\nexport const $ZodType = /*@__PURE__*/ core.$constructor(\"$ZodType\", (inst, def) => {\r\n    var _a;\r\n    inst ?? (inst = {});\r\n    inst._zod.def = def; // set _def property\r\n    inst._zod.bag = inst._zod.bag || {}; // initialize _bag object\r\n    inst._zod.version = version;\r\n    const checks = [...(inst._zod.def.checks ?? [])];\r\n    // if inst is itself a checks.$ZodCheck, run it as a check\r\n    if (inst._zod.traits.has(\"$ZodCheck\")) {\r\n        checks.unshift(inst);\r\n    }\r\n    //\r\n    for (const ch of checks) {\r\n        for (const fn of ch._zod.onattach) {\r\n            fn(inst);\r\n        }\r\n    }\r\n    if (checks.length === 0) {\r\n        // deferred initializer\r\n        // inst._zod.parse is not yet defined\r\n        (_a = inst._zod).deferred ?? (_a.deferred = []);\r\n        inst._zod.deferred?.push(() => {\r\n            inst._zod.run = inst._zod.parse;\r\n        });\r\n    }\r\n    else {\r\n        const runChecks = (payload, checks, ctx) => {\r\n            let isAborted = util.aborted(payload);\r\n            let asyncResult;\r\n            for (const ch of checks) {\r\n                if (ch._zod.def.when) {\r\n                    const shouldRun = ch._zod.def.when(payload);\r\n                    if (!shouldRun)\r\n                        continue;\r\n                }\r\n                else if (isAborted) {\r\n                    continue;\r\n                }\r\n                const currLen = payload.issues.length;\r\n                const _ = ch._zod.check(payload);\r\n                if (_ instanceof Promise && ctx?.async === false) {\r\n                    throw new core.$ZodAsyncError();\r\n                }\r\n                if (asyncResult || _ instanceof Promise) {\r\n                    asyncResult = (asyncResult ?? Promise.resolve()).then(async () => {\r\n                        await _;\r\n                        const nextLen = payload.issues.length;\r\n                        if (nextLen === currLen)\r\n                            return;\r\n                        if (!isAborted)\r\n                            isAborted = util.aborted(payload, currLen);\r\n                    });\r\n                }\r\n                else {\r\n                    const nextLen = payload.issues.length;\r\n                    if (nextLen === currLen)\r\n                        continue;\r\n                    if (!isAborted)\r\n                        isAborted = util.aborted(payload, currLen);\r\n                }\r\n            }\r\n            if (asyncResult) {\r\n                return asyncResult.then(() => {\r\n                    return payload;\r\n                });\r\n            }\r\n            return payload;\r\n        };\r\n        inst._zod.run = (payload, ctx) => {\r\n            const result = inst._zod.parse(payload, ctx);\r\n            if (result instanceof Promise) {\r\n                if (ctx.async === false)\r\n                    throw new core.$ZodAsyncError();\r\n                return result.then((result) => runChecks(result, checks, ctx));\r\n            }\r\n            return runChecks(result, checks, ctx);\r\n        };\r\n    }\r\n    inst[\"~standard\"] = {\r\n        validate: (value) => {\r\n            try {\r\n                const r = safeParse(inst, value);\r\n                return r.success ? { value: r.data } : { issues: r.error?.issues };\r\n            }\r\n            catch (_) {\r\n                return safeParseAsync(inst, value).then((r) => (r.success ? { value: r.data } : { issues: r.error?.issues }));\r\n            }\r\n        },\r\n        vendor: \"zod\",\r\n        version: 1,\r\n    };\r\n});\r\nexport { clone } from \"./util.js\";\r\nexport const $ZodString = /*@__PURE__*/ core.$constructor(\"$ZodString\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    inst._zod.pattern = [...(inst?._zod.bag?.patterns ?? [])].pop() ?? regexes.string(inst._zod.bag);\r\n    inst._zod.parse = (payload, _) => {\r\n        if (def.coerce)\r\n            try {\r\n                payload.value = String(payload.value);\r\n            }\r\n            catch (_) { }\r\n        if (typeof payload.value === \"string\")\r\n            return payload;\r\n        payload.issues.push({\r\n            expected: \"string\",\r\n            code: \"invalid_type\",\r\n            input: payload.value,\r\n            inst,\r\n        });\r\n        return payload;\r\n    };\r\n});\r\nexport const $ZodStringFormat = /*@__PURE__*/ core.$constructor(\"$ZodStringFormat\", (inst, def) => {\r\n    // check initialization must come first\r\n    checks.$ZodCheckStringFormat.init(inst, def);\r\n    $ZodString.init(inst, def);\r\n});\r\nexport const $ZodGUID = /*@__PURE__*/ core.$constructor(\"$ZodGUID\", (inst, def) => {\r\n    def.pattern ?? (def.pattern = regexes.guid);\r\n    $ZodStringFormat.init(inst, def);\r\n});\r\nexport const $ZodUUID = /*@__PURE__*/ core.$constructor(\"$ZodUUID\", (inst, def) => {\r\n    if (def.version) {\r\n        const versionMap = {\r\n            v1: 1,\r\n            v2: 2,\r\n            v3: 3,\r\n            v4: 4,\r\n            v5: 5,\r\n            v6: 6,\r\n            v7: 7,\r\n            v8: 8,\r\n        };\r\n        const v = versionMap[def.version];\r\n        if (v === undefined)\r\n            throw new Error(`Invalid UUID version: \"${def.version}\"`);\r\n        def.pattern ?? (def.pattern = regexes.uuid(v));\r\n    }\r\n    else\r\n        def.pattern ?? (def.pattern = regexes.uuid());\r\n    $ZodStringFormat.init(inst, def);\r\n});\r\nexport const $ZodEmail = /*@__PURE__*/ core.$constructor(\"$ZodEmail\", (inst, def) => {\r\n    def.pattern ?? (def.pattern = regexes.email);\r\n    $ZodStringFormat.init(inst, def);\r\n});\r\nexport const $ZodURL = /*@__PURE__*/ core.$constructor(\"$ZodURL\", (inst, def) => {\r\n    $ZodStringFormat.init(inst, def);\r\n    inst._zod.check = (payload) => {\r\n        try {\r\n            const orig = payload.value;\r\n            const url = new URL(orig);\r\n            const href = url.href;\r\n            if (def.hostname) {\r\n                def.hostname.lastIndex = 0;\r\n                if (!def.hostname.test(url.hostname)) {\r\n                    payload.issues.push({\r\n                        code: \"invalid_format\",\r\n                        format: \"url\",\r\n                        note: \"Invalid hostname\",\r\n                        pattern: regexes.hostname.source,\r\n                        input: payload.value,\r\n                        inst,\r\n                        continue: !def.abort,\r\n                    });\r\n                }\r\n            }\r\n            if (def.protocol) {\r\n                def.protocol.lastIndex = 0;\r\n                if (!def.protocol.test(url.protocol.endsWith(\":\") ? url.protocol.slice(0, -1) : url.protocol)) {\r\n                    payload.issues.push({\r\n                        code: \"invalid_format\",\r\n                        format: \"url\",\r\n                        note: \"Invalid protocol\",\r\n                        pattern: def.protocol.source,\r\n                        input: payload.value,\r\n                        inst,\r\n                        continue: !def.abort,\r\n                    });\r\n                }\r\n            }\r\n            // payload.value = url.href;\r\n            if (!orig.endsWith(\"/\") && href.endsWith(\"/\")) {\r\n                payload.value = href.slice(0, -1);\r\n            }\r\n            else {\r\n                payload.value = href;\r\n            }\r\n            return;\r\n        }\r\n        catch (_) {\r\n            payload.issues.push({\r\n                code: \"invalid_format\",\r\n                format: \"url\",\r\n                input: payload.value,\r\n                inst,\r\n                continue: !def.abort,\r\n            });\r\n        }\r\n    };\r\n});\r\nexport const $ZodEmoji = /*@__PURE__*/ core.$constructor(\"$ZodEmoji\", (inst, def) => {\r\n    def.pattern ?? (def.pattern = regexes.emoji());\r\n    $ZodStringFormat.init(inst, def);\r\n});\r\nexport const $ZodNanoID = /*@__PURE__*/ core.$constructor(\"$ZodNanoID\", (inst, def) => {\r\n    def.pattern ?? (def.pattern = regexes.nanoid);\r\n    $ZodStringFormat.init(inst, def);\r\n});\r\nexport const $ZodCUID = /*@__PURE__*/ core.$constructor(\"$ZodCUID\", (inst, def) => {\r\n    def.pattern ?? (def.pattern = regexes.cuid);\r\n    $ZodStringFormat.init(inst, def);\r\n});\r\nexport const $ZodCUID2 = /*@__PURE__*/ core.$constructor(\"$ZodCUID2\", (inst, def) => {\r\n    def.pattern ?? (def.pattern = regexes.cuid2);\r\n    $ZodStringFormat.init(inst, def);\r\n});\r\nexport const $ZodULID = /*@__PURE__*/ core.$constructor(\"$ZodULID\", (inst, def) => {\r\n    def.pattern ?? (def.pattern = regexes.ulid);\r\n    $ZodStringFormat.init(inst, def);\r\n});\r\nexport const $ZodXID = /*@__PURE__*/ core.$constructor(\"$ZodXID\", (inst, def) => {\r\n    def.pattern ?? (def.pattern = regexes.xid);\r\n    $ZodStringFormat.init(inst, def);\r\n});\r\nexport const $ZodKSUID = /*@__PURE__*/ core.$constructor(\"$ZodKSUID\", (inst, def) => {\r\n    def.pattern ?? (def.pattern = regexes.ksuid);\r\n    $ZodStringFormat.init(inst, def);\r\n});\r\nexport const $ZodISODateTime = /*@__PURE__*/ core.$constructor(\"$ZodISODateTime\", (inst, def) => {\r\n    def.pattern ?? (def.pattern = regexes.datetime(def));\r\n    $ZodStringFormat.init(inst, def);\r\n});\r\nexport const $ZodISODate = /*@__PURE__*/ core.$constructor(\"$ZodISODate\", (inst, def) => {\r\n    def.pattern ?? (def.pattern = regexes.date);\r\n    $ZodStringFormat.init(inst, def);\r\n});\r\nexport const $ZodISOTime = /*@__PURE__*/ core.$constructor(\"$ZodISOTime\", (inst, def) => {\r\n    def.pattern ?? (def.pattern = regexes.time(def));\r\n    $ZodStringFormat.init(inst, def);\r\n});\r\nexport const $ZodISODuration = /*@__PURE__*/ core.$constructor(\"$ZodISODuration\", (inst, def) => {\r\n    def.pattern ?? (def.pattern = regexes.duration);\r\n    $ZodStringFormat.init(inst, def);\r\n});\r\nexport const $ZodIPv4 = /*@__PURE__*/ core.$constructor(\"$ZodIPv4\", (inst, def) => {\r\n    def.pattern ?? (def.pattern = regexes.ipv4);\r\n    $ZodStringFormat.init(inst, def);\r\n    inst._zod.onattach.push((inst) => {\r\n        const bag = inst._zod.bag;\r\n        bag.format = `ipv4`;\r\n    });\r\n});\r\nexport const $ZodIPv6 = /*@__PURE__*/ core.$constructor(\"$ZodIPv6\", (inst, def) => {\r\n    def.pattern ?? (def.pattern = regexes.ipv6);\r\n    $ZodStringFormat.init(inst, def);\r\n    inst._zod.onattach.push((inst) => {\r\n        const bag = inst._zod.bag;\r\n        bag.format = `ipv6`;\r\n    });\r\n    inst._zod.check = (payload) => {\r\n        try {\r\n            new URL(`http://[${payload.value}]`);\r\n            // return;\r\n        }\r\n        catch {\r\n            payload.issues.push({\r\n                code: \"invalid_format\",\r\n                format: \"ipv6\",\r\n                input: payload.value,\r\n                inst,\r\n                continue: !def.abort,\r\n            });\r\n        }\r\n    };\r\n});\r\nexport const $ZodCIDRv4 = /*@__PURE__*/ core.$constructor(\"$ZodCIDRv4\", (inst, def) => {\r\n    def.pattern ?? (def.pattern = regexes.cidrv4);\r\n    $ZodStringFormat.init(inst, def);\r\n});\r\nexport const $ZodCIDRv6 = /*@__PURE__*/ core.$constructor(\"$ZodCIDRv6\", (inst, def) => {\r\n    def.pattern ?? (def.pattern = regexes.cidrv6); // not used for validation\r\n    $ZodStringFormat.init(inst, def);\r\n    inst._zod.check = (payload) => {\r\n        const [address, prefix] = payload.value.split(\"/\");\r\n        try {\r\n            if (!prefix)\r\n                throw new Error();\r\n            const prefixNum = Number(prefix);\r\n            if (`${prefixNum}` !== prefix)\r\n                throw new Error();\r\n            if (prefixNum < 0 || prefixNum > 128)\r\n                throw new Error();\r\n            new URL(`http://[${address}]`);\r\n        }\r\n        catch {\r\n            payload.issues.push({\r\n                code: \"invalid_format\",\r\n                format: \"cidrv6\",\r\n                input: payload.value,\r\n                inst,\r\n                continue: !def.abort,\r\n            });\r\n        }\r\n    };\r\n});\r\n//////////////////////////////   ZodBase64   //////////////////////////////\r\nexport function isValidBase64(data) {\r\n    if (data === \"\")\r\n        return true;\r\n    if (data.length % 4 !== 0)\r\n        return false;\r\n    try {\r\n        atob(data);\r\n        return true;\r\n    }\r\n    catch {\r\n        return false;\r\n    }\r\n}\r\nexport const $ZodBase64 = /*@__PURE__*/ core.$constructor(\"$ZodBase64\", (inst, def) => {\r\n    def.pattern ?? (def.pattern = regexes.base64);\r\n    $ZodStringFormat.init(inst, def);\r\n    inst._zod.onattach.push((inst) => {\r\n        inst._zod.bag.contentEncoding = \"base64\";\r\n    });\r\n    inst._zod.check = (payload) => {\r\n        if (isValidBase64(payload.value))\r\n            return;\r\n        payload.issues.push({\r\n            code: \"invalid_format\",\r\n            format: \"base64\",\r\n            input: payload.value,\r\n            inst,\r\n            continue: !def.abort,\r\n        });\r\n    };\r\n});\r\n//////////////////////////////   ZodBase64   //////////////////////////////\r\nexport function isValidBase64URL(data) {\r\n    if (!regexes.base64url.test(data))\r\n        return false;\r\n    const base64 = data.replace(/[-_]/g, (c) => (c === \"-\" ? \"+\" : \"/\"));\r\n    const padded = base64.padEnd(Math.ceil(base64.length / 4) * 4, \"=\");\r\n    return isValidBase64(padded);\r\n}\r\nexport const $ZodBase64URL = /*@__PURE__*/ core.$constructor(\"$ZodBase64URL\", (inst, def) => {\r\n    def.pattern ?? (def.pattern = regexes.base64url);\r\n    $ZodStringFormat.init(inst, def);\r\n    inst._zod.onattach.push((inst) => {\r\n        inst._zod.bag.contentEncoding = \"base64url\";\r\n    });\r\n    inst._zod.check = (payload) => {\r\n        if (isValidBase64URL(payload.value))\r\n            return;\r\n        payload.issues.push({\r\n            code: \"invalid_format\",\r\n            format: \"base64url\",\r\n            input: payload.value,\r\n            inst,\r\n            continue: !def.abort,\r\n        });\r\n    };\r\n});\r\nexport const $ZodE164 = /*@__PURE__*/ core.$constructor(\"$ZodE164\", (inst, def) => {\r\n    def.pattern ?? (def.pattern = regexes.e164);\r\n    $ZodStringFormat.init(inst, def);\r\n});\r\n//////////////////////////////   ZodJWT   //////////////////////////////\r\nexport function isValidJWT(token, algorithm = null) {\r\n    try {\r\n        const tokensParts = token.split(\".\");\r\n        if (tokensParts.length !== 3)\r\n            return false;\r\n        const [header] = tokensParts;\r\n        if (!header)\r\n            return false;\r\n        const parsedHeader = JSON.parse(atob(header));\r\n        if (\"typ\" in parsedHeader && parsedHeader?.typ !== \"JWT\")\r\n            return false;\r\n        if (!parsedHeader.alg)\r\n            return false;\r\n        if (algorithm && (!(\"alg\" in parsedHeader) || parsedHeader.alg !== algorithm))\r\n            return false;\r\n        return true;\r\n    }\r\n    catch {\r\n        return false;\r\n    }\r\n}\r\nexport const $ZodJWT = /*@__PURE__*/ core.$constructor(\"$ZodJWT\", (inst, def) => {\r\n    $ZodStringFormat.init(inst, def);\r\n    inst._zod.check = (payload) => {\r\n        if (isValidJWT(payload.value, def.alg))\r\n            return;\r\n        payload.issues.push({\r\n            code: \"invalid_format\",\r\n            format: \"jwt\",\r\n            input: payload.value,\r\n            inst,\r\n            continue: !def.abort,\r\n        });\r\n    };\r\n});\r\nexport const $ZodCustomStringFormat = /*@__PURE__*/ core.$constructor(\"$ZodCustomStringFormat\", (inst, def) => {\r\n    $ZodStringFormat.init(inst, def);\r\n    inst._zod.check = (payload) => {\r\n        if (def.fn(payload.value))\r\n            return;\r\n        payload.issues.push({\r\n            code: \"invalid_format\",\r\n            format: def.format,\r\n            input: payload.value,\r\n            inst,\r\n            continue: !def.abort,\r\n        });\r\n    };\r\n});\r\nexport const $ZodNumber = /*@__PURE__*/ core.$constructor(\"$ZodNumber\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    inst._zod.pattern = inst._zod.bag.pattern ?? regexes.number;\r\n    inst._zod.parse = (payload, _ctx) => {\r\n        if (def.coerce)\r\n            try {\r\n                payload.value = Number(payload.value);\r\n            }\r\n            catch (_) { }\r\n        const input = payload.value;\r\n        if (typeof input === \"number\" && !Number.isNaN(input) && Number.isFinite(input)) {\r\n            return payload;\r\n        }\r\n        const received = typeof input === \"number\"\r\n            ? Number.isNaN(input)\r\n                ? \"NaN\"\r\n                : !Number.isFinite(input)\r\n                    ? \"Infinity\"\r\n                    : undefined\r\n            : undefined;\r\n        payload.issues.push({\r\n            expected: \"number\",\r\n            code: \"invalid_type\",\r\n            input,\r\n            inst,\r\n            ...(received ? { received } : {}),\r\n        });\r\n        return payload;\r\n    };\r\n});\r\nexport const $ZodNumberFormat = /*@__PURE__*/ core.$constructor(\"$ZodNumber\", (inst, def) => {\r\n    checks.$ZodCheckNumberFormat.init(inst, def);\r\n    $ZodNumber.init(inst, def); // no format checksp\r\n});\r\nexport const $ZodBoolean = /*@__PURE__*/ core.$constructor(\"$ZodBoolean\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    inst._zod.pattern = regexes.boolean;\r\n    inst._zod.parse = (payload, _ctx) => {\r\n        if (def.coerce)\r\n            try {\r\n                payload.value = Boolean(payload.value);\r\n            }\r\n            catch (_) { }\r\n        const input = payload.value;\r\n        if (typeof input === \"boolean\")\r\n            return payload;\r\n        payload.issues.push({\r\n            expected: \"boolean\",\r\n            code: \"invalid_type\",\r\n            input,\r\n            inst,\r\n        });\r\n        return payload;\r\n    };\r\n});\r\nexport const $ZodBigInt = /*@__PURE__*/ core.$constructor(\"$ZodBigInt\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    inst._zod.pattern = regexes.bigint;\r\n    inst._zod.parse = (payload, _ctx) => {\r\n        if (def.coerce)\r\n            try {\r\n                payload.value = BigInt(payload.value);\r\n            }\r\n            catch (_) { }\r\n        if (typeof payload.value === \"bigint\")\r\n            return payload;\r\n        payload.issues.push({\r\n            expected: \"bigint\",\r\n            code: \"invalid_type\",\r\n            input: payload.value,\r\n            inst,\r\n        });\r\n        return payload;\r\n    };\r\n});\r\nexport const $ZodBigIntFormat = /*@__PURE__*/ core.$constructor(\"$ZodBigInt\", (inst, def) => {\r\n    checks.$ZodCheckBigIntFormat.init(inst, def);\r\n    $ZodBigInt.init(inst, def); // no format checks\r\n});\r\nexport const $ZodSymbol = /*@__PURE__*/ core.$constructor(\"$ZodSymbol\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    inst._zod.parse = (payload, _ctx) => {\r\n        const input = payload.value;\r\n        if (typeof input === \"symbol\")\r\n            return payload;\r\n        payload.issues.push({\r\n            expected: \"symbol\",\r\n            code: \"invalid_type\",\r\n            input,\r\n            inst,\r\n        });\r\n        return payload;\r\n    };\r\n});\r\nexport const $ZodUndefined = /*@__PURE__*/ core.$constructor(\"$ZodUndefined\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    inst._zod.pattern = regexes.undefined;\r\n    inst._zod.values = new Set([undefined]);\r\n    inst._zod.optin = \"optional\";\r\n    inst._zod.optout = \"optional\";\r\n    inst._zod.parse = (payload, _ctx) => {\r\n        const input = payload.value;\r\n        if (typeof input === \"undefined\")\r\n            return payload;\r\n        payload.issues.push({\r\n            expected: \"undefined\",\r\n            code: \"invalid_type\",\r\n            input,\r\n            inst,\r\n        });\r\n        return payload;\r\n    };\r\n});\r\nexport const $ZodNull = /*@__PURE__*/ core.$constructor(\"$ZodNull\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    inst._zod.pattern = regexes.null;\r\n    inst._zod.values = new Set([null]);\r\n    inst._zod.parse = (payload, _ctx) => {\r\n        const input = payload.value;\r\n        if (input === null)\r\n            return payload;\r\n        payload.issues.push({\r\n            expected: \"null\",\r\n            code: \"invalid_type\",\r\n            input,\r\n            inst,\r\n        });\r\n        return payload;\r\n    };\r\n});\r\nexport const $ZodAny = /*@__PURE__*/ core.$constructor(\"$ZodAny\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    inst._zod.parse = (payload) => payload;\r\n});\r\nexport const $ZodUnknown = /*@__PURE__*/ core.$constructor(\"$ZodUnknown\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    inst._zod.parse = (payload) => payload;\r\n});\r\nexport const $ZodNever = /*@__PURE__*/ core.$constructor(\"$ZodNever\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    inst._zod.parse = (payload, _ctx) => {\r\n        payload.issues.push({\r\n            expected: \"never\",\r\n            code: \"invalid_type\",\r\n            input: payload.value,\r\n            inst,\r\n        });\r\n        return payload;\r\n    };\r\n});\r\nexport const $ZodVoid = /*@__PURE__*/ core.$constructor(\"$ZodVoid\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    inst._zod.parse = (payload, _ctx) => {\r\n        const input = payload.value;\r\n        if (typeof input === \"undefined\")\r\n            return payload;\r\n        payload.issues.push({\r\n            expected: \"void\",\r\n            code: \"invalid_type\",\r\n            input,\r\n            inst,\r\n        });\r\n        return payload;\r\n    };\r\n});\r\nexport const $ZodDate = /*@__PURE__*/ core.$constructor(\"$ZodDate\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    inst._zod.parse = (payload, _ctx) => {\r\n        if (def.coerce) {\r\n            try {\r\n                payload.value = new Date(payload.value);\r\n            }\r\n            catch (_err) { }\r\n        }\r\n        const input = payload.value;\r\n        const isDate = input instanceof Date;\r\n        const isValidDate = isDate && !Number.isNaN(input.getTime());\r\n        if (isValidDate)\r\n            return payload;\r\n        payload.issues.push({\r\n            expected: \"date\",\r\n            code: \"invalid_type\",\r\n            input,\r\n            ...(isDate ? { received: \"Invalid Date\" } : {}),\r\n            inst,\r\n        });\r\n        return payload;\r\n    };\r\n});\r\nfunction handleArrayResult(result, final, index) {\r\n    if (result.issues.length) {\r\n        final.issues.push(...util.prefixIssues(index, result.issues));\r\n    }\r\n    final.value[index] = result.value;\r\n}\r\nexport const $ZodArray = /*@__PURE__*/ core.$constructor(\"$ZodArray\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    inst._zod.parse = (payload, ctx) => {\r\n        const input = payload.value;\r\n        if (!Array.isArray(input)) {\r\n            payload.issues.push({\r\n                expected: \"array\",\r\n                code: \"invalid_type\",\r\n                input,\r\n                inst,\r\n            });\r\n            return payload;\r\n        }\r\n        payload.value = Array(input.length);\r\n        const proms = [];\r\n        for (let i = 0; i < input.length; i++) {\r\n            const item = input[i];\r\n            const result = def.element._zod.run({\r\n                value: item,\r\n                issues: [],\r\n            }, ctx);\r\n            if (result instanceof Promise) {\r\n                proms.push(result.then((result) => handleArrayResult(result, payload, i)));\r\n            }\r\n            else {\r\n                handleArrayResult(result, payload, i);\r\n            }\r\n        }\r\n        if (proms.length) {\r\n            return Promise.all(proms).then(() => payload);\r\n        }\r\n        return payload; //handleArrayResultsAsync(parseResults, final);\r\n    };\r\n});\r\nfunction handleObjectResult(result, final, key) {\r\n    // if(isOptional)\r\n    if (result.issues.length) {\r\n        final.issues.push(...util.prefixIssues(key, result.issues));\r\n    }\r\n    final.value[key] = result.value;\r\n}\r\nfunction handleOptionalObjectResult(result, final, key, input) {\r\n    if (result.issues.length) {\r\n        // validation failed against value schema\r\n        if (input[key] === undefined) {\r\n            // if input was undefined, ignore the error\r\n            if (key in input) {\r\n                final.value[key] = undefined;\r\n            }\r\n            else {\r\n                final.value[key] = result.value;\r\n            }\r\n        }\r\n        else {\r\n            final.issues.push(...util.prefixIssues(key, result.issues));\r\n        }\r\n    }\r\n    else if (result.value === undefined) {\r\n        // validation returned `undefined`\r\n        if (key in input)\r\n            final.value[key] = undefined;\r\n    }\r\n    else {\r\n        // non-undefined value\r\n        final.value[key] = result.value;\r\n    }\r\n}\r\nexport const $ZodObject = /*@__PURE__*/ core.$constructor(\"$ZodObject\", (inst, def) => {\r\n    // requires cast because technically $ZodObject doesn't extend\r\n    $ZodType.init(inst, def);\r\n    const _normalized = util.cached(() => {\r\n        const keys = Object.keys(def.shape);\r\n        for (const k of keys) {\r\n            if (!(def.shape[k] instanceof $ZodType)) {\r\n                throw new Error(`Invalid element at key \"${k}\": expected a Zod schema`);\r\n            }\r\n        }\r\n        const okeys = util.optionalKeys(def.shape);\r\n        return {\r\n            shape: def.shape,\r\n            keys,\r\n            keySet: new Set(keys),\r\n            numKeys: keys.length,\r\n            optionalKeys: new Set(okeys),\r\n        };\r\n    });\r\n    util.defineLazy(inst._zod, \"propValues\", () => {\r\n        const shape = def.shape;\r\n        const propValues = {};\r\n        for (const key in shape) {\r\n            const field = shape[key]._zod;\r\n            if (field.values) {\r\n                propValues[key] ?? (propValues[key] = new Set());\r\n                for (const v of field.values)\r\n                    propValues[key].add(v);\r\n            }\r\n        }\r\n        return propValues;\r\n    });\r\n    const generateFastpass = (shape) => {\r\n        const doc = new Doc([\"shape\", \"payload\", \"ctx\"]);\r\n        const normalized = _normalized.value;\r\n        const parseStr = (key) => {\r\n            const k = util.esc(key);\r\n            return `shape[${k}]._zod.run({ value: input[${k}], issues: [] }, ctx)`;\r\n        };\r\n        doc.write(`const input = payload.value;`);\r\n        const ids = Object.create(null);\r\n        let counter = 0;\r\n        for (const key of normalized.keys) {\r\n            ids[key] = `key_${counter++}`;\r\n        }\r\n        // A: preserve key order {\r\n        doc.write(`const newResult = {}`);\r\n        for (const key of normalized.keys) {\r\n            if (normalized.optionalKeys.has(key)) {\r\n                const id = ids[key];\r\n                doc.write(`const ${id} = ${parseStr(key)};`);\r\n                const k = util.esc(key);\r\n                doc.write(`\r\n        if (${id}.issues.length) {\r\n          if (input[${k}] === undefined) {\r\n            if (${k} in input) {\r\n              newResult[${k}] = undefined;\r\n            }\r\n          } else {\r\n            payload.issues = payload.issues.concat(\r\n              ${id}.issues.map((iss) => ({\r\n                ...iss,\r\n                path: iss.path ? [${k}, ...iss.path] : [${k}],\r\n              }))\r\n            );\r\n          }\r\n        } else if (${id}.value === undefined) {\r\n          if (${k} in input) newResult[${k}] = undefined;\r\n        } else {\r\n          newResult[${k}] = ${id}.value;\r\n        }\r\n        `);\r\n            }\r\n            else {\r\n                const id = ids[key];\r\n                //  const id = ids[key];\r\n                doc.write(`const ${id} = ${parseStr(key)};`);\r\n                doc.write(`\r\n          if (${id}.issues.length) payload.issues = payload.issues.concat(${id}.issues.map(iss => ({\r\n            ...iss,\r\n            path: iss.path ? [${util.esc(key)}, ...iss.path] : [${util.esc(key)}]\r\n          })));`);\r\n                doc.write(`newResult[${util.esc(key)}] = ${id}.value`);\r\n            }\r\n        }\r\n        doc.write(`payload.value = newResult;`);\r\n        doc.write(`return payload;`);\r\n        const fn = doc.compile();\r\n        return (payload, ctx) => fn(shape, payload, ctx);\r\n    };\r\n    let fastpass;\r\n    const isObject = util.isObject;\r\n    const jit = !core.globalConfig.jitless;\r\n    const allowsEval = util.allowsEval;\r\n    const fastEnabled = jit && allowsEval.value; // && !def.catchall;\r\n    const catchall = def.catchall;\r\n    let value;\r\n    inst._zod.parse = (payload, ctx) => {\r\n        value ?? (value = _normalized.value);\r\n        const input = payload.value;\r\n        if (!isObject(input)) {\r\n            payload.issues.push({\r\n                expected: \"object\",\r\n                code: \"invalid_type\",\r\n                input,\r\n                inst,\r\n            });\r\n            return payload;\r\n        }\r\n        const proms = [];\r\n        if (jit && fastEnabled && ctx?.async === false && ctx.jitless !== true) {\r\n            // always synchronous\r\n            if (!fastpass)\r\n                fastpass = generateFastpass(def.shape);\r\n            payload = fastpass(payload, ctx);\r\n        }\r\n        else {\r\n            payload.value = {};\r\n            const shape = value.shape;\r\n            for (const key of value.keys) {\r\n                const el = shape[key];\r\n                // do not add omitted optional keys\r\n                // if (!(key in input)) {\r\n                //   if (optionalKeys.has(key)) continue;\r\n                //   payload.issues.push({\r\n                //     code: \"invalid_type\",\r\n                //     path: [key],\r\n                //     expected: \"nonoptional\",\r\n                //     note: `Missing required key: \"${key}\"`,\r\n                //     input,\r\n                //     inst,\r\n                //   });\r\n                // }\r\n                const r = el._zod.run({ value: input[key], issues: [] }, ctx);\r\n                const isOptional = el._zod.optin === \"optional\" && el._zod.optout === \"optional\";\r\n                if (r instanceof Promise) {\r\n                    proms.push(r.then((r) => isOptional ? handleOptionalObjectResult(r, payload, key, input) : handleObjectResult(r, payload, key)));\r\n                }\r\n                else if (isOptional) {\r\n                    handleOptionalObjectResult(r, payload, key, input);\r\n                }\r\n                else {\r\n                    handleObjectResult(r, payload, key);\r\n                }\r\n            }\r\n        }\r\n        if (!catchall) {\r\n            // return payload;\r\n            return proms.length ? Promise.all(proms).then(() => payload) : payload;\r\n        }\r\n        const unrecognized = [];\r\n        // iterate over input keys\r\n        const keySet = value.keySet;\r\n        const _catchall = catchall._zod;\r\n        const t = _catchall.def.type;\r\n        for (const key of Object.keys(input)) {\r\n            if (keySet.has(key))\r\n                continue;\r\n            if (t === \"never\") {\r\n                unrecognized.push(key);\r\n                continue;\r\n            }\r\n            const r = _catchall.run({ value: input[key], issues: [] }, ctx);\r\n            if (r instanceof Promise) {\r\n                proms.push(r.then((r) => handleObjectResult(r, payload, key)));\r\n            }\r\n            else {\r\n                handleObjectResult(r, payload, key);\r\n            }\r\n        }\r\n        if (unrecognized.length) {\r\n            payload.issues.push({\r\n                code: \"unrecognized_keys\",\r\n                keys: unrecognized,\r\n                input,\r\n                inst,\r\n            });\r\n        }\r\n        if (!proms.length)\r\n            return payload;\r\n        return Promise.all(proms).then(() => {\r\n            return payload;\r\n        });\r\n    };\r\n});\r\nfunction handleUnionResults(results, final, inst, ctx) {\r\n    for (const result of results) {\r\n        if (result.issues.length === 0) {\r\n            final.value = result.value;\r\n            return final;\r\n        }\r\n    }\r\n    final.issues.push({\r\n        code: \"invalid_union\",\r\n        input: final.value,\r\n        inst,\r\n        errors: results.map((result) => result.issues.map((iss) => util.finalizeIssue(iss, ctx, core.config()))),\r\n    });\r\n    return final;\r\n}\r\nexport const $ZodUnion = /*@__PURE__*/ core.$constructor(\"$ZodUnion\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    util.defineLazy(inst._zod, \"optin\", () => def.options.some((o) => o._zod.optin === \"optional\") ? \"optional\" : undefined);\r\n    util.defineLazy(inst._zod, \"optout\", () => def.options.some((o) => o._zod.optout === \"optional\") ? \"optional\" : undefined);\r\n    util.defineLazy(inst._zod, \"values\", () => {\r\n        if (def.options.every((o) => o._zod.values)) {\r\n            return new Set(def.options.flatMap((option) => Array.from(option._zod.values)));\r\n        }\r\n        return undefined;\r\n    });\r\n    util.defineLazy(inst._zod, \"pattern\", () => {\r\n        if (def.options.every((o) => o._zod.pattern)) {\r\n            const patterns = def.options.map((o) => o._zod.pattern);\r\n            return new RegExp(`^(${patterns.map((p) => util.cleanRegex(p.source)).join(\"|\")})$`);\r\n        }\r\n        return undefined;\r\n    });\r\n    inst._zod.parse = (payload, ctx) => {\r\n        let async = false;\r\n        const results = [];\r\n        for (const option of def.options) {\r\n            const result = option._zod.run({\r\n                value: payload.value,\r\n                issues: [],\r\n            }, ctx);\r\n            if (result instanceof Promise) {\r\n                results.push(result);\r\n                async = true;\r\n            }\r\n            else {\r\n                if (result.issues.length === 0)\r\n                    return result;\r\n                results.push(result);\r\n            }\r\n        }\r\n        if (!async)\r\n            return handleUnionResults(results, payload, inst, ctx);\r\n        return Promise.all(results).then((results) => {\r\n            return handleUnionResults(results, payload, inst, ctx);\r\n        });\r\n    };\r\n});\r\nexport const $ZodDiscriminatedUnion = \r\n/*@__PURE__*/\r\ncore.$constructor(\"$ZodDiscriminatedUnion\", (inst, def) => {\r\n    $ZodUnion.init(inst, def);\r\n    const _super = inst._zod.parse;\r\n    util.defineLazy(inst._zod, \"propValues\", () => {\r\n        const propValues = {};\r\n        for (const option of def.options) {\r\n            const pv = option._zod.propValues;\r\n            if (!pv || Object.keys(pv).length === 0)\r\n                throw new Error(`Invalid discriminated union option at index \"${def.options.indexOf(option)}\"`);\r\n            for (const [k, v] of Object.entries(pv)) {\r\n                if (!propValues[k])\r\n                    propValues[k] = new Set();\r\n                for (const val of v) {\r\n                    propValues[k].add(val);\r\n                }\r\n            }\r\n        }\r\n        return propValues;\r\n    });\r\n    const disc = util.cached(() => {\r\n        const opts = def.options;\r\n        const map = new Map();\r\n        for (const o of opts) {\r\n            const values = o._zod.propValues?.[def.discriminator];\r\n            if (!values || values.size === 0)\r\n                throw new Error(`Invalid discriminated union option at index \"${def.options.indexOf(o)}\"`);\r\n            for (const v of values) {\r\n                if (map.has(v)) {\r\n                    throw new Error(`Duplicate discriminator value \"${String(v)}\"`);\r\n                }\r\n                map.set(v, o);\r\n            }\r\n        }\r\n        return map;\r\n    });\r\n    inst._zod.parse = (payload, ctx) => {\r\n        const input = payload.value;\r\n        if (!util.isObject(input)) {\r\n            payload.issues.push({\r\n                code: \"invalid_type\",\r\n                expected: \"object\",\r\n                input,\r\n                inst,\r\n            });\r\n            return payload;\r\n        }\r\n        const opt = disc.value.get(input?.[def.discriminator]);\r\n        if (opt) {\r\n            return opt._zod.run(payload, ctx);\r\n        }\r\n        if (def.unionFallback) {\r\n            return _super(payload, ctx);\r\n        }\r\n        // no matching discriminator\r\n        payload.issues.push({\r\n            code: \"invalid_union\",\r\n            errors: [],\r\n            note: \"No matching discriminator\",\r\n            input,\r\n            path: [def.discriminator],\r\n            inst,\r\n        });\r\n        return payload;\r\n    };\r\n});\r\nexport const $ZodIntersection = /*@__PURE__*/ core.$constructor(\"$ZodIntersection\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    inst._zod.parse = (payload, ctx) => {\r\n        const input = payload.value;\r\n        const left = def.left._zod.run({ value: input, issues: [] }, ctx);\r\n        const right = def.right._zod.run({ value: input, issues: [] }, ctx);\r\n        const async = left instanceof Promise || right instanceof Promise;\r\n        if (async) {\r\n            return Promise.all([left, right]).then(([left, right]) => {\r\n                return handleIntersectionResults(payload, left, right);\r\n            });\r\n        }\r\n        return handleIntersectionResults(payload, left, right);\r\n    };\r\n});\r\nfunction mergeValues(a, b) {\r\n    // const aType = parse.t(a);\r\n    // const bType = parse.t(b);\r\n    if (a === b) {\r\n        return { valid: true, data: a };\r\n    }\r\n    if (a instanceof Date && b instanceof Date && +a === +b) {\r\n        return { valid: true, data: a };\r\n    }\r\n    if (util.isPlainObject(a) && util.isPlainObject(b)) {\r\n        const bKeys = Object.keys(b);\r\n        const sharedKeys = Object.keys(a).filter((key) => bKeys.indexOf(key) !== -1);\r\n        const newObj = { ...a, ...b };\r\n        for (const key of sharedKeys) {\r\n            const sharedValue = mergeValues(a[key], b[key]);\r\n            if (!sharedValue.valid) {\r\n                return {\r\n                    valid: false,\r\n                    mergeErrorPath: [key, ...sharedValue.mergeErrorPath],\r\n                };\r\n            }\r\n            newObj[key] = sharedValue.data;\r\n        }\r\n        return { valid: true, data: newObj };\r\n    }\r\n    if (Array.isArray(a) && Array.isArray(b)) {\r\n        if (a.length !== b.length) {\r\n            return { valid: false, mergeErrorPath: [] };\r\n        }\r\n        const newArray = [];\r\n        for (let index = 0; index < a.length; index++) {\r\n            const itemA = a[index];\r\n            const itemB = b[index];\r\n            const sharedValue = mergeValues(itemA, itemB);\r\n            if (!sharedValue.valid) {\r\n                return {\r\n                    valid: false,\r\n                    mergeErrorPath: [index, ...sharedValue.mergeErrorPath],\r\n                };\r\n            }\r\n            newArray.push(sharedValue.data);\r\n        }\r\n        return { valid: true, data: newArray };\r\n    }\r\n    return { valid: false, mergeErrorPath: [] };\r\n}\r\nfunction handleIntersectionResults(result, left, right) {\r\n    if (left.issues.length) {\r\n        result.issues.push(...left.issues);\r\n    }\r\n    if (right.issues.length) {\r\n        result.issues.push(...right.issues);\r\n    }\r\n    if (util.aborted(result))\r\n        return result;\r\n    const merged = mergeValues(left.value, right.value);\r\n    if (!merged.valid) {\r\n        throw new Error(`Unmergable intersection. Error path: ` + `${JSON.stringify(merged.mergeErrorPath)}`);\r\n    }\r\n    result.value = merged.data;\r\n    return result;\r\n}\r\nexport const $ZodTuple = /*@__PURE__*/ core.$constructor(\"$ZodTuple\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    const items = def.items;\r\n    const optStart = items.length - [...items].reverse().findIndex((item) => item._zod.optin !== \"optional\");\r\n    inst._zod.parse = (payload, ctx) => {\r\n        const input = payload.value;\r\n        if (!Array.isArray(input)) {\r\n            payload.issues.push({\r\n                input,\r\n                inst,\r\n                expected: \"tuple\",\r\n                code: \"invalid_type\",\r\n            });\r\n            return payload;\r\n        }\r\n        payload.value = [];\r\n        const proms = [];\r\n        if (!def.rest) {\r\n            const tooBig = input.length > items.length;\r\n            const tooSmall = input.length < optStart - 1;\r\n            if (tooBig || tooSmall) {\r\n                payload.issues.push({\r\n                    input,\r\n                    inst,\r\n                    origin: \"array\",\r\n                    ...(tooBig ? { code: \"too_big\", maximum: items.length } : { code: \"too_small\", minimum: items.length }),\r\n                });\r\n                return payload;\r\n            }\r\n        }\r\n        let i = -1;\r\n        for (const item of items) {\r\n            i++;\r\n            if (i >= input.length)\r\n                if (i >= optStart)\r\n                    continue;\r\n            const result = item._zod.run({\r\n                value: input[i],\r\n                issues: [],\r\n            }, ctx);\r\n            if (result instanceof Promise) {\r\n                proms.push(result.then((result) => handleTupleResult(result, payload, i)));\r\n            }\r\n            else {\r\n                handleTupleResult(result, payload, i);\r\n            }\r\n        }\r\n        if (def.rest) {\r\n            const rest = input.slice(items.length);\r\n            for (const el of rest) {\r\n                i++;\r\n                const result = def.rest._zod.run({\r\n                    value: el,\r\n                    issues: [],\r\n                }, ctx);\r\n                if (result instanceof Promise) {\r\n                    proms.push(result.then((result) => handleTupleResult(result, payload, i)));\r\n                }\r\n                else {\r\n                    handleTupleResult(result, payload, i);\r\n                }\r\n            }\r\n        }\r\n        if (proms.length)\r\n            return Promise.all(proms).then(() => payload);\r\n        return payload;\r\n    };\r\n});\r\nfunction handleTupleResult(result, final, index) {\r\n    if (result.issues.length) {\r\n        final.issues.push(...util.prefixIssues(index, result.issues));\r\n    }\r\n    final.value[index] = result.value;\r\n}\r\nexport const $ZodRecord = /*@__PURE__*/ core.$constructor(\"$ZodRecord\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    inst._zod.parse = (payload, ctx) => {\r\n        const input = payload.value;\r\n        if (!util.isPlainObject(input)) {\r\n            payload.issues.push({\r\n                expected: \"record\",\r\n                code: \"invalid_type\",\r\n                input,\r\n                inst,\r\n            });\r\n            return payload;\r\n        }\r\n        const proms = [];\r\n        if (def.keyType._zod.values) {\r\n            const values = def.keyType._zod.values;\r\n            payload.value = {};\r\n            for (const key of values) {\r\n                if (typeof key === \"string\" || typeof key === \"number\" || typeof key === \"symbol\") {\r\n                    const result = def.valueType._zod.run({ value: input[key], issues: [] }, ctx);\r\n                    if (result instanceof Promise) {\r\n                        proms.push(result.then((result) => {\r\n                            if (result.issues.length) {\r\n                                payload.issues.push(...util.prefixIssues(key, result.issues));\r\n                            }\r\n                            payload.value[key] = result.value;\r\n                        }));\r\n                    }\r\n                    else {\r\n                        if (result.issues.length) {\r\n                            payload.issues.push(...util.prefixIssues(key, result.issues));\r\n                        }\r\n                        payload.value[key] = result.value;\r\n                    }\r\n                }\r\n            }\r\n            let unrecognized;\r\n            for (const key in input) {\r\n                if (!values.has(key)) {\r\n                    unrecognized = unrecognized ?? [];\r\n                    unrecognized.push(key);\r\n                }\r\n            }\r\n            if (unrecognized && unrecognized.length > 0) {\r\n                payload.issues.push({\r\n                    code: \"unrecognized_keys\",\r\n                    input,\r\n                    inst,\r\n                    keys: unrecognized,\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            payload.value = {};\r\n            for (const key of Reflect.ownKeys(input)) {\r\n                if (key === \"__proto__\")\r\n                    continue;\r\n                const keyResult = def.keyType._zod.run({ value: key, issues: [] }, ctx);\r\n                if (keyResult instanceof Promise) {\r\n                    throw new Error(\"Async schemas not supported in object keys currently\");\r\n                }\r\n                if (keyResult.issues.length) {\r\n                    payload.issues.push({\r\n                        origin: \"record\",\r\n                        code: \"invalid_key\",\r\n                        issues: keyResult.issues.map((iss) => util.finalizeIssue(iss, ctx, core.config())),\r\n                        input: key,\r\n                        path: [key],\r\n                        inst,\r\n                    });\r\n                    payload.value[keyResult.value] = keyResult.value;\r\n                    continue;\r\n                }\r\n                const result = def.valueType._zod.run({ value: input[key], issues: [] }, ctx);\r\n                if (result instanceof Promise) {\r\n                    proms.push(result.then((result) => {\r\n                        if (result.issues.length) {\r\n                            payload.issues.push(...util.prefixIssues(key, result.issues));\r\n                        }\r\n                        payload.value[keyResult.value] = result.value;\r\n                    }));\r\n                }\r\n                else {\r\n                    if (result.issues.length) {\r\n                        payload.issues.push(...util.prefixIssues(key, result.issues));\r\n                    }\r\n                    payload.value[keyResult.value] = result.value;\r\n                }\r\n            }\r\n        }\r\n        if (proms.length) {\r\n            return Promise.all(proms).then(() => payload);\r\n        }\r\n        return payload;\r\n    };\r\n});\r\nexport const $ZodMap = /*@__PURE__*/ core.$constructor(\"$ZodMap\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    inst._zod.parse = (payload, ctx) => {\r\n        const input = payload.value;\r\n        if (!(input instanceof Map)) {\r\n            payload.issues.push({\r\n                expected: \"map\",\r\n                code: \"invalid_type\",\r\n                input,\r\n                inst,\r\n            });\r\n            return payload;\r\n        }\r\n        const proms = [];\r\n        payload.value = new Map();\r\n        for (const [key, value] of input) {\r\n            const keyResult = def.keyType._zod.run({ value: key, issues: [] }, ctx);\r\n            const valueResult = def.valueType._zod.run({ value: value, issues: [] }, ctx);\r\n            if (keyResult instanceof Promise || valueResult instanceof Promise) {\r\n                proms.push(Promise.all([keyResult, valueResult]).then(([keyResult, valueResult]) => {\r\n                    handleMapResult(keyResult, valueResult, payload, key, input, inst, ctx);\r\n                }));\r\n            }\r\n            else {\r\n                handleMapResult(keyResult, valueResult, payload, key, input, inst, ctx);\r\n            }\r\n        }\r\n        if (proms.length)\r\n            return Promise.all(proms).then(() => payload);\r\n        return payload;\r\n    };\r\n});\r\nfunction handleMapResult(keyResult, valueResult, final, key, input, inst, ctx) {\r\n    if (keyResult.issues.length) {\r\n        if (util.propertyKeyTypes.has(typeof key)) {\r\n            final.issues.push(...util.prefixIssues(key, keyResult.issues));\r\n        }\r\n        else {\r\n            final.issues.push({\r\n                origin: \"map\",\r\n                code: \"invalid_key\",\r\n                input,\r\n                inst,\r\n                issues: keyResult.issues.map((iss) => util.finalizeIssue(iss, ctx, core.config())),\r\n            });\r\n        }\r\n    }\r\n    if (valueResult.issues.length) {\r\n        if (util.propertyKeyTypes.has(typeof key)) {\r\n            final.issues.push(...util.prefixIssues(key, valueResult.issues));\r\n        }\r\n        else {\r\n            final.issues.push({\r\n                origin: \"map\",\r\n                code: \"invalid_element\",\r\n                input,\r\n                inst,\r\n                key: key,\r\n                issues: valueResult.issues.map((iss) => util.finalizeIssue(iss, ctx, core.config())),\r\n            });\r\n        }\r\n    }\r\n    final.value.set(keyResult.value, valueResult.value);\r\n}\r\nexport const $ZodSet = /*@__PURE__*/ core.$constructor(\"$ZodSet\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    inst._zod.parse = (payload, ctx) => {\r\n        const input = payload.value;\r\n        if (!(input instanceof Set)) {\r\n            payload.issues.push({\r\n                input,\r\n                inst,\r\n                expected: \"set\",\r\n                code: \"invalid_type\",\r\n            });\r\n            return payload;\r\n        }\r\n        const proms = [];\r\n        payload.value = new Set();\r\n        for (const item of input) {\r\n            const result = def.valueType._zod.run({ value: item, issues: [] }, ctx);\r\n            if (result instanceof Promise) {\r\n                proms.push(result.then((result) => handleSetResult(result, payload)));\r\n            }\r\n            else\r\n                handleSetResult(result, payload);\r\n        }\r\n        if (proms.length)\r\n            return Promise.all(proms).then(() => payload);\r\n        return payload;\r\n    };\r\n});\r\nfunction handleSetResult(result, final) {\r\n    if (result.issues.length) {\r\n        final.issues.push(...result.issues);\r\n    }\r\n    final.value.add(result.value);\r\n}\r\nexport const $ZodEnum = /*@__PURE__*/ core.$constructor(\"$ZodEnum\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    const values = util.getEnumValues(def.entries);\r\n    inst._zod.values = new Set(values);\r\n    inst._zod.pattern = new RegExp(`^(${values\r\n        .filter((k) => util.propertyKeyTypes.has(typeof k))\r\n        .map((o) => (typeof o === \"string\" ? util.escapeRegex(o) : o.toString()))\r\n        .join(\"|\")})$`);\r\n    inst._zod.parse = (payload, _ctx) => {\r\n        const input = payload.value;\r\n        if (inst._zod.values.has(input)) {\r\n            return payload;\r\n        }\r\n        payload.issues.push({\r\n            code: \"invalid_value\",\r\n            values,\r\n            input,\r\n            inst,\r\n        });\r\n        return payload;\r\n    };\r\n});\r\nexport const $ZodLiteral = /*@__PURE__*/ core.$constructor(\"$ZodLiteral\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    inst._zod.values = new Set(def.values);\r\n    inst._zod.pattern = new RegExp(`^(${def.values\r\n        .map((o) => (typeof o === \"string\" ? util.escapeRegex(o) : o ? o.toString() : String(o)))\r\n        .join(\"|\")})$`);\r\n    inst._zod.parse = (payload, _ctx) => {\r\n        const input = payload.value;\r\n        if (inst._zod.values.has(input)) {\r\n            return payload;\r\n        }\r\n        payload.issues.push({\r\n            code: \"invalid_value\",\r\n            values: def.values,\r\n            input,\r\n            inst,\r\n        });\r\n        return payload;\r\n    };\r\n});\r\nexport const $ZodFile = /*@__PURE__*/ core.$constructor(\"$ZodFile\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    inst._zod.parse = (payload, _ctx) => {\r\n        const input = payload.value;\r\n        if (input instanceof File)\r\n            return payload;\r\n        payload.issues.push({\r\n            expected: \"file\",\r\n            code: \"invalid_type\",\r\n            input,\r\n            inst,\r\n        });\r\n        return payload;\r\n    };\r\n});\r\nexport const $ZodTransform = /*@__PURE__*/ core.$constructor(\"$ZodTransform\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    inst._zod.parse = (payload, _ctx) => {\r\n        const _out = def.transform(payload.value, payload);\r\n        if (_ctx.async) {\r\n            const output = _out instanceof Promise ? _out : Promise.resolve(_out);\r\n            return output.then((output) => {\r\n                payload.value = output;\r\n                return payload;\r\n            });\r\n        }\r\n        if (_out instanceof Promise) {\r\n            throw new core.$ZodAsyncError();\r\n        }\r\n        payload.value = _out;\r\n        return payload;\r\n    };\r\n});\r\nexport const $ZodOptional = /*@__PURE__*/ core.$constructor(\"$ZodOptional\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    inst._zod.optin = \"optional\";\r\n    inst._zod.optout = \"optional\";\r\n    util.defineLazy(inst._zod, \"values\", () => {\r\n        return def.innerType._zod.values ? new Set([...def.innerType._zod.values, undefined]) : undefined;\r\n    });\r\n    util.defineLazy(inst._zod, \"pattern\", () => {\r\n        const pattern = def.innerType._zod.pattern;\r\n        return pattern ? new RegExp(`^(${util.cleanRegex(pattern.source)})?$`) : undefined;\r\n    });\r\n    inst._zod.parse = (payload, ctx) => {\r\n        if (def.innerType._zod.optin === \"optional\") {\r\n            return def.innerType._zod.run(payload, ctx);\r\n        }\r\n        if (payload.value === undefined) {\r\n            return payload;\r\n        }\r\n        return def.innerType._zod.run(payload, ctx);\r\n    };\r\n});\r\nexport const $ZodNullable = /*@__PURE__*/ core.$constructor(\"$ZodNullable\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    util.defineLazy(inst._zod, \"optin\", () => def.innerType._zod.optin);\r\n    util.defineLazy(inst._zod, \"optout\", () => def.innerType._zod.optout);\r\n    util.defineLazy(inst._zod, \"pattern\", () => {\r\n        const pattern = def.innerType._zod.pattern;\r\n        return pattern ? new RegExp(`^(${util.cleanRegex(pattern.source)}|null)$`) : undefined;\r\n    });\r\n    util.defineLazy(inst._zod, \"values\", () => {\r\n        return def.innerType._zod.values ? new Set([...def.innerType._zod.values, null]) : undefined;\r\n    });\r\n    inst._zod.parse = (payload, ctx) => {\r\n        if (payload.value === null)\r\n            return payload;\r\n        return def.innerType._zod.run(payload, ctx);\r\n    };\r\n});\r\nexport const $ZodDefault = /*@__PURE__*/ core.$constructor(\"$ZodDefault\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    // inst._zod.qin = \"true\";\r\n    inst._zod.optin = \"optional\";\r\n    util.defineLazy(inst._zod, \"values\", () => def.innerType._zod.values);\r\n    inst._zod.parse = (payload, ctx) => {\r\n        if (payload.value === undefined) {\r\n            payload.value = def.defaultValue;\r\n            /**\r\n             * $ZodDefault always returns the default value immediately.\r\n             * It doesn't pass the default value into the validator (\"prefault\"). There's no reason to pass the default value through validation. The validity of the default is enforced by TypeScript statically. Otherwise, it's the responsibility of the user to ensure the default is valid. In the case of pipes with divergent in/out types, you can specify the default on the `in` schema of your ZodPipe to set a \"prefault\" for the pipe.   */\r\n            return payload;\r\n        }\r\n        const result = def.innerType._zod.run(payload, ctx);\r\n        if (result instanceof Promise) {\r\n            return result.then((result) => handleDefaultResult(result, def));\r\n        }\r\n        return handleDefaultResult(result, def);\r\n    };\r\n});\r\nfunction handleDefaultResult(payload, def) {\r\n    if (payload.value === undefined) {\r\n        payload.value = def.defaultValue;\r\n    }\r\n    return payload;\r\n}\r\nexport const $ZodPrefault = /*@__PURE__*/ core.$constructor(\"$ZodPrefault\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    inst._zod.optin = \"optional\";\r\n    util.defineLazy(inst._zod, \"values\", () => def.innerType._zod.values);\r\n    inst._zod.parse = (payload, ctx) => {\r\n        if (payload.value === undefined) {\r\n            payload.value = def.defaultValue;\r\n        }\r\n        return def.innerType._zod.run(payload, ctx);\r\n    };\r\n});\r\nexport const $ZodNonOptional = /*@__PURE__*/ core.$constructor(\"$ZodNonOptional\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    util.defineLazy(inst._zod, \"values\", () => {\r\n        const v = def.innerType._zod.values;\r\n        return v ? new Set([...v].filter((x) => x !== undefined)) : undefined;\r\n    });\r\n    inst._zod.parse = (payload, ctx) => {\r\n        const result = def.innerType._zod.run(payload, ctx);\r\n        if (result instanceof Promise) {\r\n            return result.then((result) => handleNonOptionalResult(result, inst));\r\n        }\r\n        return handleNonOptionalResult(result, inst);\r\n    };\r\n});\r\nfunction handleNonOptionalResult(payload, inst) {\r\n    if (!payload.issues.length && payload.value === undefined) {\r\n        payload.issues.push({\r\n            code: \"invalid_type\",\r\n            expected: \"nonoptional\",\r\n            input: payload.value,\r\n            inst,\r\n        });\r\n    }\r\n    return payload;\r\n}\r\nexport const $ZodSuccess = /*@__PURE__*/ core.$constructor(\"$ZodSuccess\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    inst._zod.parse = (payload, ctx) => {\r\n        const result = def.innerType._zod.run(payload, ctx);\r\n        if (result instanceof Promise) {\r\n            return result.then((result) => {\r\n                payload.value = result.issues.length === 0;\r\n                return payload;\r\n            });\r\n        }\r\n        payload.value = result.issues.length === 0;\r\n        return payload;\r\n    };\r\n});\r\nexport const $ZodCatch = /*@__PURE__*/ core.$constructor(\"$ZodCatch\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    inst._zod.optin = \"optional\";\r\n    util.defineLazy(inst._zod, \"optout\", () => def.innerType._zod.optout);\r\n    util.defineLazy(inst._zod, \"values\", () => def.innerType._zod.values);\r\n    inst._zod.parse = (payload, ctx) => {\r\n        const result = def.innerType._zod.run(payload, ctx);\r\n        if (result instanceof Promise) {\r\n            return result.then((result) => {\r\n                payload.value = result.value;\r\n                if (result.issues.length) {\r\n                    payload.value = def.catchValue({\r\n                        ...payload,\r\n                        error: {\r\n                            issues: result.issues.map((iss) => util.finalizeIssue(iss, ctx, core.config())),\r\n                        },\r\n                        input: payload.value,\r\n                    });\r\n                    payload.issues = [];\r\n                }\r\n                return payload;\r\n            });\r\n        }\r\n        payload.value = result.value;\r\n        if (result.issues.length) {\r\n            payload.value = def.catchValue({\r\n                ...payload,\r\n                error: {\r\n                    issues: result.issues.map((iss) => util.finalizeIssue(iss, ctx, core.config())),\r\n                },\r\n                input: payload.value,\r\n            });\r\n            payload.issues = [];\r\n        }\r\n        return payload;\r\n    };\r\n});\r\nexport const $ZodNaN = /*@__PURE__*/ core.$constructor(\"$ZodNaN\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    inst._zod.parse = (payload, _ctx) => {\r\n        if (typeof payload.value !== \"number\" || !Number.isNaN(payload.value)) {\r\n            payload.issues.push({\r\n                input: payload.value,\r\n                inst,\r\n                expected: \"nan\",\r\n                code: \"invalid_type\",\r\n            });\r\n            return payload;\r\n        }\r\n        return payload;\r\n    };\r\n});\r\nexport const $ZodPipe = /*@__PURE__*/ core.$constructor(\"$ZodPipe\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    util.defineLazy(inst._zod, \"values\", () => def.in._zod.values);\r\n    util.defineLazy(inst._zod, \"optin\", () => def.in._zod.optin);\r\n    util.defineLazy(inst._zod, \"optout\", () => def.out._zod.optout);\r\n    util.defineLazy(inst._zod, \"propValues\", () => def.in._zod.propValues);\r\n    inst._zod.parse = (payload, ctx) => {\r\n        const left = def.in._zod.run(payload, ctx);\r\n        if (left instanceof Promise) {\r\n            return left.then((left) => handlePipeResult(left, def, ctx));\r\n        }\r\n        return handlePipeResult(left, def, ctx);\r\n    };\r\n});\r\nfunction handlePipeResult(left, def, ctx) {\r\n    if (util.aborted(left)) {\r\n        return left;\r\n    }\r\n    return def.out._zod.run({ value: left.value, issues: left.issues }, ctx);\r\n}\r\nexport const $ZodReadonly = /*@__PURE__*/ core.$constructor(\"$ZodReadonly\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    util.defineLazy(inst._zod, \"propValues\", () => def.innerType._zod.propValues);\r\n    util.defineLazy(inst._zod, \"values\", () => def.innerType._zod.values);\r\n    util.defineLazy(inst._zod, \"optin\", () => def.innerType._zod.optin);\r\n    util.defineLazy(inst._zod, \"optout\", () => def.innerType._zod.optout);\r\n    inst._zod.parse = (payload, ctx) => {\r\n        const result = def.innerType._zod.run(payload, ctx);\r\n        if (result instanceof Promise) {\r\n            return result.then(handleReadonlyResult);\r\n        }\r\n        return handleReadonlyResult(result);\r\n    };\r\n});\r\nfunction handleReadonlyResult(payload) {\r\n    payload.value = Object.freeze(payload.value);\r\n    return payload;\r\n}\r\nexport const $ZodTemplateLiteral = /*@__PURE__*/ core.$constructor(\"$ZodTemplateLiteral\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    const regexParts = [];\r\n    for (const part of def.parts) {\r\n        if (part instanceof $ZodType) {\r\n            if (!part._zod.pattern) {\r\n                // if (!source)\r\n                throw new Error(`Invalid template literal part, no pattern found: ${[...part._zod.traits].shift()}`);\r\n            }\r\n            const source = part._zod.pattern instanceof RegExp ? part._zod.pattern.source : part._zod.pattern;\r\n            if (!source)\r\n                throw new Error(`Invalid template literal part: ${part._zod.traits}`);\r\n            const start = source.startsWith(\"^\") ? 1 : 0;\r\n            const end = source.endsWith(\"$\") ? source.length - 1 : source.length;\r\n            regexParts.push(source.slice(start, end));\r\n        }\r\n        else if (part === null || util.primitiveTypes.has(typeof part)) {\r\n            regexParts.push(util.escapeRegex(`${part}`));\r\n        }\r\n        else {\r\n            throw new Error(`Invalid template literal part: ${part}`);\r\n        }\r\n    }\r\n    inst._zod.pattern = new RegExp(`^${regexParts.join(\"\")}$`);\r\n    inst._zod.parse = (payload, _ctx) => {\r\n        if (typeof payload.value !== \"string\") {\r\n            payload.issues.push({\r\n                input: payload.value,\r\n                inst,\r\n                expected: \"template_literal\",\r\n                code: \"invalid_type\",\r\n            });\r\n            return payload;\r\n        }\r\n        inst._zod.pattern.lastIndex = 0;\r\n        if (!inst._zod.pattern.test(payload.value)) {\r\n            payload.issues.push({\r\n                input: payload.value,\r\n                inst,\r\n                code: \"invalid_format\",\r\n                format: def.format ?? \"template_literal\",\r\n                pattern: inst._zod.pattern.source,\r\n            });\r\n            return payload;\r\n        }\r\n        return payload;\r\n    };\r\n});\r\nexport const $ZodPromise = /*@__PURE__*/ core.$constructor(\"$ZodPromise\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    inst._zod.parse = (payload, ctx) => {\r\n        return Promise.resolve(payload.value).then((inner) => def.innerType._zod.run({ value: inner, issues: [] }, ctx));\r\n    };\r\n});\r\nexport const $ZodLazy = /*@__PURE__*/ core.$constructor(\"$ZodLazy\", (inst, def) => {\r\n    $ZodType.init(inst, def);\r\n    util.defineLazy(inst._zod, \"innerType\", () => def.getter());\r\n    util.defineLazy(inst._zod, \"pattern\", () => inst._zod.innerType._zod.pattern);\r\n    util.defineLazy(inst._zod, \"propValues\", () => inst._zod.innerType._zod.propValues);\r\n    util.defineLazy(inst._zod, \"optin\", () => inst._zod.innerType._zod.optin);\r\n    util.defineLazy(inst._zod, \"optout\", () => inst._zod.innerType._zod.optout);\r\n    inst._zod.parse = (payload, ctx) => {\r\n        const inner = inst._zod.innerType;\r\n        return inner._zod.run(payload, ctx);\r\n    };\r\n});\r\nexport const $ZodCustom = /*@__PURE__*/ core.$constructor(\"$ZodCustom\", (inst, def) => {\r\n    checks.$ZodCheck.init(inst, def);\r\n    $ZodType.init(inst, def);\r\n    inst._zod.parse = (payload, _) => {\r\n        return payload;\r\n    };\r\n    inst._zod.check = (payload) => {\r\n        const input = payload.value;\r\n        const r = def.fn(input);\r\n        if (r instanceof Promise) {\r\n            return r.then((r) => handleRefineResult(r, payload, input, inst));\r\n        }\r\n        handleRefineResult(r, payload, input, inst);\r\n        return;\r\n    };\r\n});\r\nfunction handleRefineResult(result, payload, input, inst) {\r\n    if (!result) {\r\n        const _iss = {\r\n            code: \"custom\",\r\n            input,\r\n            inst, // incorporates params.error into issue reporting\r\n            path: [...(inst._zod.def.path ?? [])], // incorporates params.error into issue reporting\r\n            continue: !inst._zod.def.abort,\r\n            // params: inst._zod.def.params,\r\n        };\r\n        if (inst._zod.def.params)\r\n            _iss.params = inst._zod.def.params;\r\n        payload.issues.push(util.issue(_iss));\r\n    }\r\n}\r\n", "export { default as ar } from \"./ar.js\";\r\nexport { default as az } from \"./az.js\";\r\nexport { default as be } from \"./be.js\";\r\nexport { default as ca } from \"./ca.js\";\r\nexport { default as cs } from \"./cs.js\";\r\nexport { default as de } from \"./de.js\";\r\nexport { default as en } from \"./en.js\";\r\nexport { default as eo } from \"./eo.js\";\r\nexport { default as es } from \"./es.js\";\r\nexport { default as fa } from \"./fa.js\";\r\nexport { default as fi } from \"./fi.js\";\r\nexport { default as fr } from \"./fr.js\";\r\nexport { default as frCA } from \"./fr-CA.js\";\r\nexport { default as he } from \"./he.js\";\r\nexport { default as hu } from \"./hu.js\";\r\nexport { default as id } from \"./id.js\";\r\nexport { default as it } from \"./it.js\";\r\nexport { default as ja } from \"./ja.js\";\r\nexport { default as kh } from \"./kh.js\";\r\nexport { default as ko } from \"./ko.js\";\r\nexport { default as mk } from \"./mk.js\";\r\nexport { default as ms } from \"./ms.js\";\r\nexport { default as nl } from \"./nl.js\";\r\nexport { default as no } from \"./no.js\";\r\nexport { default as ota } from \"./ota.js\";\r\nexport { default as ps } from \"./ps.js\";\r\nexport { default as pl } from \"./pl.js\";\r\nexport { default as pt } from \"./pt.js\";\r\nexport { default as ru } from \"./ru.js\";\r\nexport { default as sl } from \"./sl.js\";\r\nexport { default as sv } from \"./sv.js\";\r\nexport { default as ta } from \"./ta.js\";\r\nexport { default as th } from \"./th.js\";\r\nexport { default as tr } from \"./tr.js\";\r\nexport { default as ua } from \"./ua.js\";\r\nexport { default as ur } from \"./ur.js\";\r\nexport { default as vi } from \"./vi.js\";\r\nexport { default as zhCN } from \"./zh-CN.js\";\r\nexport { default as zhTW } from \"./zh-TW.js\";\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"حرف\", verb: \"أن يحوي\" },\r\n        file: { unit: \"بايت\", verb: \"أن يحوي\" },\r\n        array: { unit: \"عنصر\", verb: \"أن يحوي\" },\r\n        set: { unit: \"عنصر\", verb: \"أن يحوي\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"number\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"array\";\r\n                }\r\n                if (data === null) {\r\n                    return \"null\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"مدخل\",\r\n        email: \"بريد إلكتروني\",\r\n        url: \"رابط\",\r\n        emoji: \"إيموجي\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"تاريخ ووقت بمعيار ISO\",\r\n        date: \"تاريخ بمعيار ISO\",\r\n        time: \"وقت بمعيار ISO\",\r\n        duration: \"مدة بمعيار ISO\",\r\n        ipv4: \"عنوان IPv4\",\r\n        ipv6: \"عنوان IPv6\",\r\n        cidrv4: \"مدى عناوين بصيغة IPv4\",\r\n        cidrv6: \"مدى عناوين بصيغة IPv6\",\r\n        base64: \"نَص بترميز base64-encoded\",\r\n        base64url: \"نَص بترميز base64url-encoded\",\r\n        json_string: \"نَص على هيئة JSON\",\r\n        e164: \"رقم هاتف بمعيار E.164\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"مدخل\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `مدخلات غير مقبولة: يفترض إدخال ${issue.expected}، ولكن تم إدخال ${parsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `مدخلات غير مقبولة: يفترض إدخال ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `اختيار غير مقبول: يتوقع انتقاء أحد هذه الخيارات: ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return ` أكبر من اللازم: يفترض أن تكون ${issue.origin ?? \"القيمة\"} ${adj} ${issue.maximum.toString()} ${sizing.unit ?? \"عنصر\"}`;\r\n                return `أكبر من اللازم: يفترض أن تكون ${issue.origin ?? \"القيمة\"} ${adj} ${issue.maximum.toString()}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `أصغر من اللازم: يفترض لـ ${issue.origin} أن يكون ${adj} ${issue.minimum.toString()} ${sizing.unit}`;\r\n                }\r\n                return `أصغر من اللازم: يفترض لـ ${issue.origin} أن يكون ${adj} ${issue.minimum.toString()}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\")\r\n                    return `نَص غير مقبول: يجب أن يبدأ بـ \"${issue.prefix}\"`;\r\n                if (_issue.format === \"ends_with\")\r\n                    return `نَص غير مقبول: يجب أن ينتهي بـ \"${_issue.suffix}\"`;\r\n                if (_issue.format === \"includes\")\r\n                    return `نَص غير مقبول: يجب أن يتضمَّن \"${_issue.includes}\"`;\r\n                if (_issue.format === \"regex\")\r\n                    return `نَص غير مقبول: يجب أن يطابق النمط ${_issue.pattern}`;\r\n                return `${Nouns[_issue.format] ?? issue.format} غير مقبول`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `رقم غير مقبول: يجب أن يكون من مضاعفات ${issue.divisor}`;\r\n            case \"unrecognized_keys\":\r\n                return `معرف${issue.keys.length > 1 ? \"ات\" : \"\"} غريب${issue.keys.length > 1 ? \"ة\" : \"\"}: ${util.joinValues(issue.keys, \"، \")}`;\r\n            case \"invalid_key\":\r\n                return `معرف غير مقبول في ${issue.origin}`;\r\n            case \"invalid_union\":\r\n                return \"مدخل غير مقبول\";\r\n            case \"invalid_element\":\r\n                return `مدخل غير مقبول في ${issue.origin}`;\r\n            default:\r\n                return \"مدخل غير مقبول\";\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"simvol\", verb: \"olmalıdır\" },\r\n        file: { unit: \"bayt\", verb: \"olmalıdır\" },\r\n        array: { unit: \"element\", verb: \"olmalıdır\" },\r\n        set: { unit: \"element\", verb: \"olmalıdır\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"number\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"array\";\r\n                }\r\n                if (data === null) {\r\n                    return \"null\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"input\",\r\n        email: \"email address\",\r\n        url: \"URL\",\r\n        emoji: \"emoji\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"ISO datetime\",\r\n        date: \"ISO date\",\r\n        time: \"ISO time\",\r\n        duration: \"ISO duration\",\r\n        ipv4: \"IPv4 address\",\r\n        ipv6: \"IPv6 address\",\r\n        cidrv4: \"IPv4 range\",\r\n        cidrv6: \"IPv6 range\",\r\n        base64: \"base64-encoded string\",\r\n        base64url: \"base64url-encoded string\",\r\n        json_string: \"JSON string\",\r\n        e164: \"E.164 number\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"input\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `Yanlış dəyər: gözlənilən ${issue.expected}, daxil olan ${parsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `Yanlış dəyər: gözlənilən ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `Yanlış seçim: aşağıdakılardan biri olmalıdır: ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `Çox böyük: gözlənilən ${issue.origin ?? \"dəyər\"} ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"element\"}`;\r\n                return `Çox böyük: gözlənilən ${issue.origin ?? \"dəyər\"} ${adj}${issue.maximum.toString()}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `Çox kiçik: gözlənilən ${issue.origin} ${adj}${issue.minimum.toString()} ${sizing.unit}`;\r\n                return `Çox kiçik: gözlənilən ${issue.origin} ${adj}${issue.minimum.toString()}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\")\r\n                    return `Yanlış mətn: \"${_issue.prefix}\" ilə başlamalıdır`;\r\n                if (_issue.format === \"ends_with\")\r\n                    return `Yanlış mətn: \"${_issue.suffix}\" ilə bitməlidir`;\r\n                if (_issue.format === \"includes\")\r\n                    return `Yanlış mətn: \"${_issue.includes}\" daxil olmalıdır`;\r\n                if (_issue.format === \"regex\")\r\n                    return `Yanlış mətn: ${_issue.pattern} şablonuna uyğun olmalıdır`;\r\n                return `Yanlış ${Nouns[_issue.format] ?? issue.format}`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `Yanlış ədəd: ${issue.divisor} ilə bölünə bilən olmalıdır`;\r\n            case \"unrecognized_keys\":\r\n                return `Tanınmayan açar${issue.keys.length > 1 ? \"lar\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `${issue.origin} daxilində yanlış açar`;\r\n            case \"invalid_union\":\r\n                return \"Yanlış dəyər\";\r\n            case \"invalid_element\":\r\n                return `${issue.origin} daxilində yanlış dəyər`;\r\n            default:\r\n                return `Yanlış dəyər`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nfunction getBelarusianPlural(count, one, few, many) {\r\n    const absCount = Math.abs(count);\r\n    const lastDigit = absCount % 10;\r\n    const lastTwoDigits = absCount % 100;\r\n    if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {\r\n        return many;\r\n    }\r\n    if (lastDigit === 1) {\r\n        return one;\r\n    }\r\n    if (lastDigit >= 2 && lastDigit <= 4) {\r\n        return few;\r\n    }\r\n    return many;\r\n}\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: {\r\n            unit: {\r\n                one: \"сімвал\",\r\n                few: \"сімвалы\",\r\n                many: \"сімвалаў\",\r\n            },\r\n            verb: \"мець\",\r\n        },\r\n        array: {\r\n            unit: {\r\n                one: \"элемент\",\r\n                few: \"элементы\",\r\n                many: \"элементаў\",\r\n            },\r\n            verb: \"мець\",\r\n        },\r\n        set: {\r\n            unit: {\r\n                one: \"элемент\",\r\n                few: \"элементы\",\r\n                many: \"элементаў\",\r\n            },\r\n            verb: \"мець\",\r\n        },\r\n        file: {\r\n            unit: {\r\n                one: \"байт\",\r\n                few: \"байты\",\r\n                many: \"байтаў\",\r\n            },\r\n            verb: \"мець\",\r\n        },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"лік\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"масіў\";\r\n                }\r\n                if (data === null) {\r\n                    return \"null\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"увод\",\r\n        email: \"email адрас\",\r\n        url: \"URL\",\r\n        emoji: \"эмодзі\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"ISO дата і час\",\r\n        date: \"ISO дата\",\r\n        time: \"ISO час\",\r\n        duration: \"ISO працягласць\",\r\n        ipv4: \"IPv4 адрас\",\r\n        ipv6: \"IPv6 адрас\",\r\n        cidrv4: \"IPv4 дыяпазон\",\r\n        cidrv6: \"IPv6 дыяпазон\",\r\n        base64: \"радок у фармаце base64\",\r\n        base64url: \"радок у фармаце base64url\",\r\n        json_string: \"JSON радок\",\r\n        e164: \"нумар E.164\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"увод\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `Няправільны ўвод: чакаўся ${issue.expected}, атрымана ${parsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `Няправільны ўвод: чакалася ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `Няправільны варыянт: чакаўся адзін з ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    const maxValue = Number(issue.maximum);\r\n                    const unit = getBelarusianPlural(maxValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);\r\n                    return `Занадта вялікі: чакалася, што ${issue.origin ?? \"значэнне\"} павінна ${sizing.verb} ${adj}${issue.maximum.toString()} ${unit}`;\r\n                }\r\n                return `Занадта вялікі: чакалася, што ${issue.origin ?? \"значэнне\"} павінна быць ${adj}${issue.maximum.toString()}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    const minValue = Number(issue.minimum);\r\n                    const unit = getBelarusianPlural(minValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);\r\n                    return `Занадта малы: чакалася, што ${issue.origin} павінна ${sizing.verb} ${adj}${issue.minimum.toString()} ${unit}`;\r\n                }\r\n                return `Занадта малы: чакалася, што ${issue.origin} павінна быць ${adj}${issue.minimum.toString()}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\")\r\n                    return `Няправільны радок: павінен пачынацца з \"${_issue.prefix}\"`;\r\n                if (_issue.format === \"ends_with\")\r\n                    return `Няправільны радок: павінен заканчвацца на \"${_issue.suffix}\"`;\r\n                if (_issue.format === \"includes\")\r\n                    return `Няправільны радок: павінен змяшчаць \"${_issue.includes}\"`;\r\n                if (_issue.format === \"regex\")\r\n                    return `Няправільны радок: павінен адпавядаць шаблону ${_issue.pattern}`;\r\n                return `Няправільны ${Nouns[_issue.format] ?? issue.format}`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `Няправільны лік: павінен быць кратным ${issue.divisor}`;\r\n            case \"unrecognized_keys\":\r\n                return `Нераспазнаны ${issue.keys.length > 1 ? \"ключы\" : \"ключ\"}: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `Няправільны ключ у ${issue.origin}`;\r\n            case \"invalid_union\":\r\n                return \"Няправільны ўвод\";\r\n            case \"invalid_element\":\r\n                return `Няправільнае значэнне ў ${issue.origin}`;\r\n            default:\r\n                return `Няправільны ўвод`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"caràcters\", verb: \"contenir\" },\r\n        file: { unit: \"bytes\", verb: \"contenir\" },\r\n        array: { unit: \"elements\", verb: \"contenir\" },\r\n        set: { unit: \"elements\", verb: \"contenir\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"number\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"array\";\r\n                }\r\n                if (data === null) {\r\n                    return \"null\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"entrada\",\r\n        email: \"adreça electrònica\",\r\n        url: \"URL\",\r\n        emoji: \"emoji\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"data i hora ISO\",\r\n        date: \"data ISO\",\r\n        time: \"hora ISO\",\r\n        duration: \"durada ISO\",\r\n        ipv4: \"adreça IPv4\",\r\n        ipv6: \"adreça IPv6\",\r\n        cidrv4: \"rang IPv4\",\r\n        cidrv6: \"rang IPv6\",\r\n        base64: \"cadena codificada en base64\",\r\n        base64url: \"cadena codificada en base64url\",\r\n        json_string: \"cadena JSON\",\r\n        e164: \"número E.164\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"entrada\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `Tipus invàlid: s'esperava ${issue.expected}, s'ha rebut ${parsedType(issue.input)}`;\r\n            // return `Tipus invàlid: s'esperava ${issue.expected}, s'ha rebut ${util.getParsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `Valor invàlid: s'esperava ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `Opció invàlida: s'esperava una de ${util.joinValues(issue.values, \" o \")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"com a màxim\" : \"menys de\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `Massa gran: s'esperava que ${issue.origin ?? \"el valor\"} contingués ${adj} ${issue.maximum.toString()} ${sizing.unit ?? \"elements\"}`;\r\n                return `Massa gran: s'esperava que ${issue.origin ?? \"el valor\"} fos ${adj} ${issue.maximum.toString()}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \"com a mínim\" : \"més de\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `Massa petit: s'esperava que ${issue.origin} contingués ${adj} ${issue.minimum.toString()} ${sizing.unit}`;\r\n                }\r\n                return `Massa petit: s'esperava que ${issue.origin} fos ${adj} ${issue.minimum.toString()}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\") {\r\n                    return `Format invàlid: ha de començar amb \"${_issue.prefix}\"`;\r\n                }\r\n                if (_issue.format === \"ends_with\")\r\n                    return `Format invàlid: ha d'acabar amb \"${_issue.suffix}\"`;\r\n                if (_issue.format === \"includes\")\r\n                    return `Format invàlid: ha d'incloure \"${_issue.includes}\"`;\r\n                if (_issue.format === \"regex\")\r\n                    return `Format invàlid: ha de coincidir amb el patró ${_issue.pattern}`;\r\n                return `Format invàlid per a ${Nouns[_issue.format] ?? issue.format}`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `Número invàlid: ha de ser múltiple de ${issue.divisor}`;\r\n            case \"unrecognized_keys\":\r\n                return `Clau${issue.keys.length > 1 ? \"s\" : \"\"} no reconeguda${issue.keys.length > 1 ? \"s\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `Clau invàlida a ${issue.origin}`;\r\n            case \"invalid_union\":\r\n                return \"Entrada invàlida\"; // Could also be \"Tipus d'unió invàlid\" but \"Entrada invàlida\" is more general\r\n            case \"invalid_element\":\r\n                return `Element invàlid a ${issue.origin}`;\r\n            default:\r\n                return `Entrada invàlida`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"znaků\", verb: \"mít\" },\r\n        file: { unit: \"bajtů\", verb: \"mít\" },\r\n        array: { unit: \"prvků\", verb: \"mít\" },\r\n        set: { unit: \"prvků\", verb: \"mít\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"číslo\";\r\n            }\r\n            case \"string\": {\r\n                return \"řetězec\";\r\n            }\r\n            case \"boolean\": {\r\n                return \"boolean\";\r\n            }\r\n            case \"bigint\": {\r\n                return \"bigint\";\r\n            }\r\n            case \"function\": {\r\n                return \"funkce\";\r\n            }\r\n            case \"symbol\": {\r\n                return \"symbol\";\r\n            }\r\n            case \"undefined\": {\r\n                return \"undefined\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"pole\";\r\n                }\r\n                if (data === null) {\r\n                    return \"null\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"regulární výraz\",\r\n        email: \"e-mailová adresa\",\r\n        url: \"URL\",\r\n        emoji: \"emoji\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"datum a čas ve formátu ISO\",\r\n        date: \"datum ve formátu ISO\",\r\n        time: \"čas ve formátu ISO\",\r\n        duration: \"doba trvání ISO\",\r\n        ipv4: \"IPv4 adresa\",\r\n        ipv6: \"IPv6 adresa\",\r\n        cidrv4: \"rozsah IPv4\",\r\n        cidrv6: \"rozsah IPv6\",\r\n        base64: \"řetězec zakódovaný ve formátu base64\",\r\n        base64url: \"řetězec zakódovaný ve formátu base64url\",\r\n        json_string: \"řetězec ve formátu JSON\",\r\n        e164: \"číslo E.164\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"vstup\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `Neplatný vstup: očekáváno ${issue.expected}, obdrženo ${parsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `Neplatný vstup: očekáváno ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `Neplatná možnost: očekávána jedna z hodnot ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `Hodnota je příliš velká: ${issue.origin ?? \"hodnota\"} musí mít ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"prvků\"}`;\r\n                }\r\n                return `Hodnota je příliš velká: ${issue.origin ?? \"hodnota\"} musí být ${adj}${issue.maximum.toString()}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `Hodnota je příliš malá: ${issue.origin ?? \"hodnota\"} musí mít ${adj}${issue.minimum.toString()} ${sizing.unit ?? \"prvků\"}`;\r\n                }\r\n                return `Hodnota je příliš malá: ${issue.origin ?? \"hodnota\"} musí být ${adj}${issue.minimum.toString()}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\")\r\n                    return `Neplatný řetězec: musí začínat na \"${_issue.prefix}\"`;\r\n                if (_issue.format === \"ends_with\")\r\n                    return `Neplatný řetězec: musí končit na \"${_issue.suffix}\"`;\r\n                if (_issue.format === \"includes\")\r\n                    return `Neplatný řetězec: musí obsahovat \"${_issue.includes}\"`;\r\n                if (_issue.format === \"regex\")\r\n                    return `Neplatný řetězec: musí odpovídat vzoru ${_issue.pattern}`;\r\n                return `Neplatný formát ${Nouns[_issue.format] ?? issue.format}`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `Neplatné číslo: musí být násobkem ${issue.divisor}`;\r\n            case \"unrecognized_keys\":\r\n                return `Neznámé klíče: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `Neplatný klíč v ${issue.origin}`;\r\n            case \"invalid_union\":\r\n                return \"Neplatný vstup\";\r\n            case \"invalid_element\":\r\n                return `Neplatná hodnota v ${issue.origin}`;\r\n            default:\r\n                return `Neplatný vstup`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"Zeichen\", verb: \"zu haben\" },\r\n        file: { unit: \"Bytes\", verb: \"zu haben\" },\r\n        array: { unit: \"Elemente\", verb: \"zu haben\" },\r\n        set: { unit: \"Elemente\", verb: \"zu haben\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"Zahl\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"Array\";\r\n                }\r\n                if (data === null) {\r\n                    return \"null\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"Eingabe\",\r\n        email: \"E-Mail-Adresse\",\r\n        url: \"URL\",\r\n        emoji: \"Emoji\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"ISO-Datum und -Uhrzeit\",\r\n        date: \"ISO-Datum\",\r\n        time: \"ISO-Uhrzeit\",\r\n        duration: \"ISO-Dauer\",\r\n        ipv4: \"IPv4-Adresse\",\r\n        ipv6: \"IPv6-Adresse\",\r\n        cidrv4: \"IPv4-Bereich\",\r\n        cidrv6: \"IPv6-Bereich\",\r\n        base64: \"Base64-codierter String\",\r\n        base64url: \"Base64-URL-codierter String\",\r\n        json_string: \"JSON-String\",\r\n        e164: \"E.164-Nummer\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"Eingabe\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `Ungültige Eingabe: erwartet ${issue.expected}, erhalten ${parsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `Ungültige Eingabe: erwartet ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `Ungültige Option: erwartet eine von ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `Zu groß: erwartet, dass ${issue.origin ?? \"Wert\"} ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"Elemente\"} hat`;\r\n                return `Zu groß: erwartet, dass ${issue.origin ?? \"Wert\"} ${adj}${issue.maximum.toString()} ist`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `Zu klein: erwartet, dass ${issue.origin} ${adj}${issue.minimum.toString()} ${sizing.unit} hat`;\r\n                }\r\n                return `Zu klein: erwartet, dass ${issue.origin} ${adj}${issue.minimum.toString()} ist`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\")\r\n                    return `Ungültiger String: muss mit \"${_issue.prefix}\" beginnen`;\r\n                if (_issue.format === \"ends_with\")\r\n                    return `Ungültiger String: muss mit \"${_issue.suffix}\" enden`;\r\n                if (_issue.format === \"includes\")\r\n                    return `Ungültiger String: muss \"${_issue.includes}\" enthalten`;\r\n                if (_issue.format === \"regex\")\r\n                    return `Ungültiger String: muss dem Muster ${_issue.pattern} entsprechen`;\r\n                return `Ungültig: ${Nouns[_issue.format] ?? issue.format}`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `Ungültige Zahl: muss ein Vielfaches von ${issue.divisor} sein`;\r\n            case \"unrecognized_keys\":\r\n                return `${issue.keys.length > 1 ? \"Unbekannte Schlüssel\" : \"Unbekannter Schlüssel\"}: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `Ungültiger Schlüssel in ${issue.origin}`;\r\n            case \"invalid_union\":\r\n                return \"Ungültige Eingabe\";\r\n            case \"invalid_element\":\r\n                return `Ungültiger Wert in ${issue.origin}`;\r\n            default:\r\n                return `Ungültige Eingabe`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nexport const parsedType = (data) => {\r\n    const t = typeof data;\r\n    switch (t) {\r\n        case \"number\": {\r\n            return Number.isNaN(data) ? \"NaN\" : \"number\";\r\n        }\r\n        case \"object\": {\r\n            if (Array.isArray(data)) {\r\n                return \"array\";\r\n            }\r\n            if (data === null) {\r\n                return \"null\";\r\n            }\r\n            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                return data.constructor.name;\r\n            }\r\n        }\r\n    }\r\n    return t;\r\n};\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"characters\", verb: \"to have\" },\r\n        file: { unit: \"bytes\", verb: \"to have\" },\r\n        array: { unit: \"items\", verb: \"to have\" },\r\n        set: { unit: \"items\", verb: \"to have\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const Nouns = {\r\n        regex: \"input\",\r\n        email: \"email address\",\r\n        url: \"URL\",\r\n        emoji: \"emoji\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"ISO datetime\",\r\n        date: \"ISO date\",\r\n        time: \"ISO time\",\r\n        duration: \"ISO duration\",\r\n        ipv4: \"IPv4 address\",\r\n        ipv6: \"IPv6 address\",\r\n        cidrv4: \"IPv4 range\",\r\n        cidrv6: \"IPv6 range\",\r\n        base64: \"base64-encoded string\",\r\n        base64url: \"base64url-encoded string\",\r\n        json_string: \"JSON string\",\r\n        e164: \"E.164 number\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"input\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `Invalid input: expected ${issue.expected}, received ${parsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `Invalid input: expected ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `Invalid option: expected one of ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `Too big: expected ${issue.origin ?? \"value\"} to have ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"elements\"}`;\r\n                return `Too big: expected ${issue.origin ?? \"value\"} to be ${adj}${issue.maximum.toString()}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `Too small: expected ${issue.origin} to have ${adj}${issue.minimum.toString()} ${sizing.unit}`;\r\n                }\r\n                return `Too small: expected ${issue.origin} to be ${adj}${issue.minimum.toString()}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\") {\r\n                    return `Invalid string: must start with \"${_issue.prefix}\"`;\r\n                }\r\n                if (_issue.format === \"ends_with\")\r\n                    return `Invalid string: must end with \"${_issue.suffix}\"`;\r\n                if (_issue.format === \"includes\")\r\n                    return `Invalid string: must include \"${_issue.includes}\"`;\r\n                if (_issue.format === \"regex\")\r\n                    return `Invalid string: must match pattern ${_issue.pattern}`;\r\n                return `Invalid ${Nouns[_issue.format] ?? issue.format}`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `Invalid number: must be a multiple of ${issue.divisor}`;\r\n            case \"unrecognized_keys\":\r\n                return `Unrecognized key${issue.keys.length > 1 ? \"s\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `Invalid key in ${issue.origin}`;\r\n            case \"invalid_union\":\r\n                return \"Invalid input\";\r\n            case \"invalid_element\":\r\n                return `Invalid value in ${issue.origin}`;\r\n            default:\r\n                return `Invalid input`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nexport const parsedType = (data) => {\r\n    const t = typeof data;\r\n    switch (t) {\r\n        case \"number\": {\r\n            return Number.isNaN(data) ? \"NaN\" : \"nombro\";\r\n        }\r\n        case \"object\": {\r\n            if (Array.isArray(data)) {\r\n                return \"tabelo\";\r\n            }\r\n            if (data === null) {\r\n                return \"senvalora\";\r\n            }\r\n            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                return data.constructor.name;\r\n            }\r\n        }\r\n    }\r\n    return t;\r\n};\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"karaktrojn\", verb: \"havi\" },\r\n        file: { unit: \"bajtojn\", verb: \"havi\" },\r\n        array: { unit: \"elementojn\", verb: \"havi\" },\r\n        set: { unit: \"elementojn\", verb: \"havi\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const Nouns = {\r\n        regex: \"enigo\",\r\n        email: \"retadreso\",\r\n        url: \"URL\",\r\n        emoji: \"emoĝio\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"ISO-datotempo\",\r\n        date: \"ISO-dato\",\r\n        time: \"ISO-tempo\",\r\n        duration: \"ISO-daŭro\",\r\n        ipv4: \"IPv4-adreso\",\r\n        ipv6: \"IPv6-adreso\",\r\n        cidrv4: \"IPv4-rango\",\r\n        cidrv6: \"IPv6-rango\",\r\n        base64: \"64-ume kodita karaktraro\",\r\n        base64url: \"URL-64-ume kodita karaktraro\",\r\n        json_string: \"JSON-karaktraro\",\r\n        e164: \"E.164-nombro\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"enigo\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `Nevalida enigo: atendiĝis ${issue.expected}, riceviĝis ${parsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `Nevalida enigo: atendiĝis ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `Nevalida opcio: atendiĝis unu el ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `Tro granda: atendiĝis ke ${issue.origin ?? \"valoro\"} havu ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"elementojn\"}`;\r\n                return `Tro granda: atendiĝis ke ${issue.origin ?? \"valoro\"} havu ${adj}${issue.maximum.toString()}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `Tro malgranda: atendiĝis ke ${issue.origin} havu ${adj}${issue.minimum.toString()} ${sizing.unit}`;\r\n                }\r\n                return `Tro malgranda: atendiĝis ke ${issue.origin} estu ${adj}${issue.minimum.toString()}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\")\r\n                    return `Nevalida karaktraro: devas komenciĝi per \"${_issue.prefix}\"`;\r\n                if (_issue.format === \"ends_with\")\r\n                    return `Nevalida karaktraro: devas finiĝi per \"${_issue.suffix}\"`;\r\n                if (_issue.format === \"includes\")\r\n                    return `Nevalida karaktraro: devas inkluzivi \"${_issue.includes}\"`;\r\n                if (_issue.format === \"regex\")\r\n                    return `Nevalida karaktraro: devas kongrui kun la modelo ${_issue.pattern}`;\r\n                return `Nevalida ${Nouns[_issue.format] ?? issue.format}`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `Nevalida nombro: devas esti oblo de ${issue.divisor}`;\r\n            case \"unrecognized_keys\":\r\n                return `Nekonata${issue.keys.length > 1 ? \"j\" : \"\"} ŝlosilo${issue.keys.length > 1 ? \"j\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `Nevalida ŝlosilo en ${issue.origin}`;\r\n            case \"invalid_union\":\r\n                return \"Nevalida enigo\";\r\n            case \"invalid_element\":\r\n                return `Nevalida valoro en ${issue.origin}`;\r\n            default:\r\n                return `Nevalida enigo`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"caracteres\", verb: \"tener\" },\r\n        file: { unit: \"bytes\", verb: \"tener\" },\r\n        array: { unit: \"elementos\", verb: \"tener\" },\r\n        set: { unit: \"elementos\", verb: \"tener\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"número\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"arreglo\";\r\n                }\r\n                if (data === null) {\r\n                    return \"nulo\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"entrada\",\r\n        email: \"dirección de correo electrónico\",\r\n        url: \"URL\",\r\n        emoji: \"emoji\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"fecha y hora ISO\",\r\n        date: \"fecha ISO\",\r\n        time: \"hora ISO\",\r\n        duration: \"duración ISO\",\r\n        ipv4: \"dirección IPv4\",\r\n        ipv6: \"dirección IPv6\",\r\n        cidrv4: \"rango IPv4\",\r\n        cidrv6: \"rango IPv6\",\r\n        base64: \"cadena codificada en base64\",\r\n        base64url: \"URL codificada en base64\",\r\n        json_string: \"cadena JSON\",\r\n        e164: \"número E.164\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"entrada\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `Entrada inválida: se esperaba ${issue.expected}, recibido ${parsedType(issue.input)}`;\r\n            // return `Entrada inválida: se esperaba ${issue.expected}, recibido ${util.getParsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `Entrada inválida: se esperaba ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `Opción inválida: se esperaba una de ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `Demasiado grande: se esperaba que ${issue.origin ?? \"valor\"} tuviera ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"elementos\"}`;\r\n                return `Demasiado grande: se esperaba que ${issue.origin ?? \"valor\"} fuera ${adj}${issue.maximum.toString()}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `Demasiado pequeño: se esperaba que ${issue.origin} tuviera ${adj}${issue.minimum.toString()} ${sizing.unit}`;\r\n                }\r\n                return `Demasiado pequeño: se esperaba que ${issue.origin} fuera ${adj}${issue.minimum.toString()}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\")\r\n                    return `Cadena inválida: debe comenzar con \"${_issue.prefix}\"`;\r\n                if (_issue.format === \"ends_with\")\r\n                    return `Cadena inválida: debe terminar en \"${_issue.suffix}\"`;\r\n                if (_issue.format === \"includes\")\r\n                    return `Cadena inválida: debe incluir \"${_issue.includes}\"`;\r\n                if (_issue.format === \"regex\")\r\n                    return `Cadena inválida: debe coincidir con el patrón ${_issue.pattern}`;\r\n                return `Inválido ${Nouns[_issue.format] ?? issue.format}`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `Número inválido: debe ser múltiplo de ${issue.divisor}`;\r\n            case \"unrecognized_keys\":\r\n                return `Llave${issue.keys.length > 1 ? \"s\" : \"\"} desconocida${issue.keys.length > 1 ? \"s\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `Llave inválida en ${issue.origin}`;\r\n            case \"invalid_union\":\r\n                return \"Entrada inválida\";\r\n            case \"invalid_element\":\r\n                return `Valor inválido en ${issue.origin}`;\r\n            default:\r\n                return `Entrada inválida`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"کاراکتر\", verb: \"داشته باشد\" },\r\n        file: { unit: \"بایت\", verb: \"داشته باشد\" },\r\n        array: { unit: \"آیتم\", verb: \"داشته باشد\" },\r\n        set: { unit: \"آیتم\", verb: \"داشته باشد\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"عدد\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"آرایه\";\r\n                }\r\n                if (data === null) {\r\n                    return \"null\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"ورودی\",\r\n        email: \"آدرس ایمیل\",\r\n        url: \"URL\",\r\n        emoji: \"ایموجی\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"تاریخ و زمان ایزو\",\r\n        date: \"تاریخ ایزو\",\r\n        time: \"زمان ایزو\",\r\n        duration: \"مدت زمان ایزو\",\r\n        ipv4: \"IPv4 آدرس\",\r\n        ipv6: \"IPv6 آدرس\",\r\n        cidrv4: \"IPv4 دامنه\",\r\n        cidrv6: \"IPv6 دامنه\",\r\n        base64: \"base64-encoded رشته\",\r\n        base64url: \"base64url-encoded رشته\",\r\n        json_string: \"JSON رشته\",\r\n        e164: \"E.164 عدد\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"ورودی\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `ورودی نامعتبر: می‌بایست ${issue.expected} می‌بود، ${parsedType(issue.input)} دریافت شد`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1) {\r\n                    return `ورودی نامعتبر: می‌بایست ${util.stringifyPrimitive(issue.values[0])} می‌بود`;\r\n                }\r\n                return `گزینه نامعتبر: می‌بایست یکی از ${util.joinValues(issue.values, \"|\")} می‌بود`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `خیلی بزرگ: ${issue.origin ?? \"مقدار\"} باید ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"عنصر\"} باشد`;\r\n                }\r\n                return `خیلی بزرگ: ${issue.origin ?? \"مقدار\"} باید ${adj}${issue.maximum.toString()} باشد`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `خیلی کوچک: ${issue.origin} باید ${adj}${issue.minimum.toString()} ${sizing.unit} باشد`;\r\n                }\r\n                return `خیلی کوچک: ${issue.origin} باید ${adj}${issue.minimum.toString()} باشد`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\") {\r\n                    return `رشته نامعتبر: باید با \"${_issue.prefix}\" شروع شود`;\r\n                }\r\n                if (_issue.format === \"ends_with\") {\r\n                    return `رشته نامعتبر: باید با \"${_issue.suffix}\" تمام شود`;\r\n                }\r\n                if (_issue.format === \"includes\") {\r\n                    return `رشته نامعتبر: باید شامل \"${_issue.includes}\" باشد`;\r\n                }\r\n                if (_issue.format === \"regex\") {\r\n                    return `رشته نامعتبر: باید با الگوی ${_issue.pattern} مطابقت داشته باشد`;\r\n                }\r\n                return `${Nouns[_issue.format] ?? issue.format} نامعتبر`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `عدد نامعتبر: باید مضرب ${issue.divisor} باشد`;\r\n            case \"unrecognized_keys\":\r\n                return `کلید${issue.keys.length > 1 ? \"های\" : \"\"} ناشناس: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `کلید ناشناس در ${issue.origin}`;\r\n            case \"invalid_union\":\r\n                return `ورودی نامعتبر`;\r\n            case \"invalid_element\":\r\n                return `مقدار نامعتبر در ${issue.origin}`;\r\n            default:\r\n                return `ورودی نامعتبر`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"merkkiä\", subject: \"merkkijonon\" },\r\n        file: { unit: \"tavua\", subject: \"tiedoston\" },\r\n        array: { unit: \"alkiota\", subject: \"listan\" },\r\n        set: { unit: \"alkiota\", subject: \"joukon\" },\r\n        number: { unit: \"\", subject: \"luvun\" },\r\n        bigint: { unit: \"\", subject: \"suuren kokonaisluvun\" },\r\n        int: { unit: \"\", subject: \"kokonaisluvun\" },\r\n        date: { unit: \"\", subject: \"päivämäärän\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"number\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"array\";\r\n                }\r\n                if (data === null) {\r\n                    return \"null\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"säännöllinen lauseke\",\r\n        email: \"sähköpostiosoite\",\r\n        url: \"URL-osoite\",\r\n        emoji: \"emoji\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"ISO-aikaleima\",\r\n        date: \"ISO-päivämäärä\",\r\n        time: \"ISO-aika\",\r\n        duration: \"ISO-kesto\",\r\n        ipv4: \"IPv4-osoite\",\r\n        ipv6: \"IPv6-osoite\",\r\n        cidrv4: \"IPv4-alue\",\r\n        cidrv6: \"IPv6-alue\",\r\n        base64: \"base64-koodattu merkkijono\",\r\n        base64url: \"base64url-koodattu merkkijono\",\r\n        json_string: \"JSON-merkkijono\",\r\n        e164: \"E.164-luku\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"templaattimerkkijono\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `Virheellinen tyyppi: odotettiin ${issue.expected}, oli ${parsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `Virheellinen syöte: täytyy olla ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `Virheellinen valinta: täytyy olla yksi seuraavista: ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `Liian suuri: ${sizing.subject} täytyy olla ${adj}${issue.maximum.toString()} ${sizing.unit}`.trim();\r\n                }\r\n                return `Liian suuri: arvon täytyy olla ${adj}${issue.maximum.toString()}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `Liian pieni: ${sizing.subject} täytyy olla ${adj}${issue.minimum.toString()} ${sizing.unit}`.trim();\r\n                }\r\n                return `Liian pieni: arvon täytyy olla ${adj}${issue.minimum.toString()}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\")\r\n                    return `Virheellinen syöte: täytyy alkaa \"${_issue.prefix}\"`;\r\n                if (_issue.format === \"ends_with\")\r\n                    return `Virheellinen syöte: täytyy loppua \"${_issue.suffix}\"`;\r\n                if (_issue.format === \"includes\")\r\n                    return `Virheellinen syöte: täytyy sisältää \"${_issue.includes}\"`;\r\n                if (_issue.format === \"regex\") {\r\n                    return `Virheellinen syöte: täytyy vastata säännöllistä lauseketta ${_issue.pattern}`;\r\n                }\r\n                return `Virheellinen ${Nouns[_issue.format] ?? issue.format}`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `Virheellinen luku: täytyy olla luvun ${issue.divisor} monikerta`;\r\n            case \"unrecognized_keys\":\r\n                return `${issue.keys.length > 1 ? \"Tuntemattomat avaimet\" : \"Tuntematon avain\"}: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return \"Virheellinen avain tietueessa\";\r\n            case \"invalid_union\":\r\n                return \"Virheellinen unioni\";\r\n            case \"invalid_element\":\r\n                return \"Virheellinen arvo joukossa\";\r\n            default:\r\n                return `Virheellinen syöte`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"caractères\", verb: \"avoir\" },\r\n        file: { unit: \"octets\", verb: \"avoir\" },\r\n        array: { unit: \"éléments\", verb: \"avoir\" },\r\n        set: { unit: \"éléments\", verb: \"avoir\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"nombre\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"tableau\";\r\n                }\r\n                if (data === null) {\r\n                    return \"null\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"entrée\",\r\n        email: \"adresse e-mail\",\r\n        url: \"URL\",\r\n        emoji: \"emoji\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"date et heure ISO\",\r\n        date: \"date ISO\",\r\n        time: \"heure ISO\",\r\n        duration: \"durée ISO\",\r\n        ipv4: \"adresse IPv4\",\r\n        ipv6: \"adresse IPv6\",\r\n        cidrv4: \"plage IPv4\",\r\n        cidrv6: \"plage IPv6\",\r\n        base64: \"chaîne encodée en base64\",\r\n        base64url: \"chaîne encodée en base64url\",\r\n        json_string: \"chaîne JSON\",\r\n        e164: \"numéro E.164\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"entrée\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `Entrée invalide : ${issue.expected} attendu, ${parsedType(issue.input)} reçu`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `Entrée invalide : ${util.stringifyPrimitive(issue.values[0])} attendu`;\r\n                return `Option invalide : une valeur parmi ${util.joinValues(issue.values, \"|\")} attendue`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `Trop grand : ${issue.origin ?? \"valeur\"} doit ${sizing.verb} ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"élément(s)\"}`;\r\n                return `Trop grand : ${issue.origin ?? \"valeur\"} doit être ${adj}${issue.maximum.toString()}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `Trop petit : ${issue.origin} doit ${sizing.verb} ${adj}${issue.minimum.toString()} ${sizing.unit}`;\r\n                }\r\n                return `Trop petit : ${issue.origin} doit être ${adj}${issue.minimum.toString()}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\")\r\n                    return `Chaîne invalide : doit commencer par \"${_issue.prefix}\"`;\r\n                if (_issue.format === \"ends_with\")\r\n                    return `Chaîne invalide : doit se terminer par \"${_issue.suffix}\"`;\r\n                if (_issue.format === \"includes\")\r\n                    return `Chaîne invalide : doit inclure \"${_issue.includes}\"`;\r\n                if (_issue.format === \"regex\")\r\n                    return `Chaîne invalide : doit correspondre au modèle ${_issue.pattern}`;\r\n                return `${Nouns[_issue.format] ?? issue.format} invalide`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `Nombre invalide : doit être un multiple de ${issue.divisor}`;\r\n            case \"unrecognized_keys\":\r\n                return `Clé${issue.keys.length > 1 ? \"s\" : \"\"} non reconnue${issue.keys.length > 1 ? \"s\" : \"\"} : ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `Clé invalide dans ${issue.origin}`;\r\n            case \"invalid_union\":\r\n                return \"Entrée invalide\";\r\n            case \"invalid_element\":\r\n                return `Valeur invalide dans ${issue.origin}`;\r\n            default:\r\n                return `Entrée invalide`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"caractères\", verb: \"avoir\" },\r\n        file: { unit: \"octets\", verb: \"avoir\" },\r\n        array: { unit: \"éléments\", verb: \"avoir\" },\r\n        set: { unit: \"éléments\", verb: \"avoir\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"number\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"array\";\r\n                }\r\n                if (data === null) {\r\n                    return \"null\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"entrée\",\r\n        email: \"adresse courriel\",\r\n        url: \"URL\",\r\n        emoji: \"emoji\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"date-heure ISO\",\r\n        date: \"date ISO\",\r\n        time: \"heure ISO\",\r\n        duration: \"durée ISO\",\r\n        ipv4: \"adresse IPv4\",\r\n        ipv6: \"adresse IPv6\",\r\n        cidrv4: \"plage IPv4\",\r\n        cidrv6: \"plage IPv6\",\r\n        base64: \"chaîne encodée en base64\",\r\n        base64url: \"chaîne encodée en base64url\",\r\n        json_string: \"chaîne JSON\",\r\n        e164: \"numéro E.164\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"entrée\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `Entrée invalide : attendu ${issue.expected}, reçu ${parsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `Entrée invalide : attendu ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `Option invalide : attendu l'une des valeurs suivantes ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"≤\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `Trop grand : attendu que ${issue.origin ?? \"la valeur\"} ait ${adj}${issue.maximum.toString()} ${sizing.unit}`;\r\n                return `Trop grand : attendu que ${issue.origin ?? \"la valeur\"} soit ${adj}${issue.maximum.toString()}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \"≥\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `Trop petit : attendu que ${issue.origin} ait ${adj}${issue.minimum.toString()} ${sizing.unit}`;\r\n                }\r\n                return `Trop petit : attendu que ${issue.origin} soit ${adj}${issue.minimum.toString()}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\") {\r\n                    return `Chaîne invalide : doit commencer par \"${_issue.prefix}\"`;\r\n                }\r\n                if (_issue.format === \"ends_with\")\r\n                    return `Chaîne invalide : doit se terminer par \"${_issue.suffix}\"`;\r\n                if (_issue.format === \"includes\")\r\n                    return `Chaîne invalide : doit inclure \"${_issue.includes}\"`;\r\n                if (_issue.format === \"regex\")\r\n                    return `Chaîne invalide : doit correspondre au motif ${_issue.pattern}`;\r\n                return `${Nouns[_issue.format] ?? issue.format} invalide`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `Nombre invalide : doit être un multiple de ${issue.divisor}`;\r\n            case \"unrecognized_keys\":\r\n                return `Clé${issue.keys.length > 1 ? \"s\" : \"\"} non reconnue${issue.keys.length > 1 ? \"s\" : \"\"} : ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `Clé invalide dans ${issue.origin}`;\r\n            case \"invalid_union\":\r\n                return \"Entrée invalide\";\r\n            case \"invalid_element\":\r\n                return `Valeur invalide dans ${issue.origin}`;\r\n            default:\r\n                return `Entrée invalide`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"אותיות\", verb: \"לכלול\" },\r\n        file: { unit: \"בייטים\", verb: \"לכלול\" },\r\n        array: { unit: \"פריטים\", verb: \"לכלול\" },\r\n        set: { unit: \"פריטים\", verb: \"לכלול\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"number\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"array\";\r\n                }\r\n                if (data === null) {\r\n                    return \"null\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"קלט\",\r\n        email: \"כתובת אימייל\",\r\n        url: \"כתובת רשת\",\r\n        emoji: \"אימוג'י\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"תאריך וזמן ISO\",\r\n        date: \"תאריך ISO\",\r\n        time: \"זמן ISO\",\r\n        duration: \"משך זמן ISO\",\r\n        ipv4: \"כתובת IPv4\",\r\n        ipv6: \"כתובת IPv6\",\r\n        cidrv4: \"טווח IPv4\",\r\n        cidrv6: \"טווח IPv6\",\r\n        base64: \"מחרוזת בבסיס 64\",\r\n        base64url: \"מחרוזת בבסיס 64 לכתובות רשת\",\r\n        json_string: \"מחרוזת JSON\",\r\n        e164: \"מספר E.164\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"קלט\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `קלט לא תקין: צריך ${issue.expected}, התקבל ${parsedType(issue.input)}`;\r\n            // return `Invalid input: expected ${issue.expected}, received ${util.getParsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `קלט לא תקין: צריך ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `קלט לא תקין: צריך אחת מהאפשרויות  ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `גדול מדי: ${issue.origin ?? \"value\"} צריך להיות ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"elements\"}`;\r\n                return `גדול מדי: ${issue.origin ?? \"value\"} צריך להיות ${adj}${issue.maximum.toString()}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `קטן מדי: ${issue.origin} צריך להיות ${adj}${issue.minimum.toString()} ${sizing.unit}`;\r\n                }\r\n                return `קטן מדי: ${issue.origin} צריך להיות ${adj}${issue.minimum.toString()}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\")\r\n                    return `מחרוזת לא תקינה: חייבת להתחיל ב\"${_issue.prefix}\"`;\r\n                if (_issue.format === \"ends_with\")\r\n                    return `מחרוזת לא תקינה: חייבת להסתיים ב \"${_issue.suffix}\"`;\r\n                if (_issue.format === \"includes\")\r\n                    return `מחרוזת לא תקינה: חייבת לכלול \"${_issue.includes}\"`;\r\n                if (_issue.format === \"regex\")\r\n                    return `מחרוזת לא תקינה: חייבת להתאים לתבנית ${_issue.pattern}`;\r\n                return `${Nouns[_issue.format] ?? issue.format} לא תקין`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `מספר לא תקין: חייב להיות מכפלה של ${issue.divisor}`;\r\n            case \"unrecognized_keys\":\r\n                return `מפתח${issue.keys.length > 1 ? \"ות\" : \"\"} לא מזוה${issue.keys.length > 1 ? \"ים\" : \"ה\"}: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `מפתח לא תקין ב${issue.origin}`;\r\n            case \"invalid_union\":\r\n                return \"קלט לא תקין\";\r\n            case \"invalid_element\":\r\n                return `ערך לא תקין ב${issue.origin}`;\r\n            default:\r\n                return `קלט לא תקין`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"karakter\", verb: \"legyen\" },\r\n        file: { unit: \"byte\", verb: \"legyen\" },\r\n        array: { unit: \"elem\", verb: \"legyen\" },\r\n        set: { unit: \"elem\", verb: \"legyen\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"szám\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"tömb\";\r\n                }\r\n                if (data === null) {\r\n                    return \"null\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"bemenet\",\r\n        email: \"email cím\",\r\n        url: \"URL\",\r\n        emoji: \"emoji\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"ISO időbélyeg\",\r\n        date: \"ISO dátum\",\r\n        time: \"ISO idő\",\r\n        duration: \"ISO időintervallum\",\r\n        ipv4: \"IPv4 cím\",\r\n        ipv6: \"IPv6 cím\",\r\n        cidrv4: \"IPv4 tartomány\",\r\n        cidrv6: \"IPv6 tartomány\",\r\n        base64: \"base64-kódolt string\",\r\n        base64url: \"base64url-kódolt string\",\r\n        json_string: \"JSON string\",\r\n        e164: \"E.164 szám\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"bemenet\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `Érvénytelen bemenet: a várt érték ${issue.expected}, a kapott érték ${parsedType(issue.input)}`;\r\n            // return `Invalid input: expected ${issue.expected}, received ${util.getParsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `Érvénytelen bemenet: a várt érték ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `Érvénytelen opció: valamelyik érték várt ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `Túl nagy: ${issue.origin ?? \"érték\"} mérete túl nagy ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"elem\"}`;\r\n                return `Túl nagy: a bemeneti érték ${issue.origin ?? \"érték\"} túl nagy: ${adj}${issue.maximum.toString()}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `Túl kicsi: a bemeneti érték ${issue.origin} mérete túl kicsi ${adj}${issue.minimum.toString()} ${sizing.unit}`;\r\n                }\r\n                return `Túl kicsi: a bemeneti érték ${issue.origin} túl kicsi ${adj}${issue.minimum.toString()}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\")\r\n                    return `Érvénytelen string: \"${_issue.prefix}\" értékkel kell kezdődnie`;\r\n                if (_issue.format === \"ends_with\")\r\n                    return `Érvénytelen string: \"${_issue.suffix}\" értékkel kell végződnie`;\r\n                if (_issue.format === \"includes\")\r\n                    return `Érvénytelen string: \"${_issue.includes}\" értéket kell tartalmaznia`;\r\n                if (_issue.format === \"regex\")\r\n                    return `Érvénytelen string: ${_issue.pattern} mintának kell megfelelnie`;\r\n                return `Érvénytelen ${Nouns[_issue.format] ?? issue.format}`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `Érvénytelen szám: ${issue.divisor} többszörösének kell lennie`;\r\n            case \"unrecognized_keys\":\r\n                return `Ismeretlen kulcs${issue.keys.length > 1 ? \"s\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `Érvénytelen kulcs ${issue.origin}`;\r\n            case \"invalid_union\":\r\n                return \"Érvénytelen bemenet\";\r\n            case \"invalid_element\":\r\n                return `Érvénytelen érték: ${issue.origin}`;\r\n            default:\r\n                return `Érvénytelen bemenet`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"karakter\", verb: \"memiliki\" },\r\n        file: { unit: \"byte\", verb: \"memiliki\" },\r\n        array: { unit: \"item\", verb: \"memiliki\" },\r\n        set: { unit: \"item\", verb: \"memiliki\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"number\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"array\";\r\n                }\r\n                if (data === null) {\r\n                    return \"null\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"input\",\r\n        email: \"alamat email\",\r\n        url: \"URL\",\r\n        emoji: \"emoji\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"tanggal dan waktu format ISO\",\r\n        date: \"tanggal format ISO\",\r\n        time: \"jam format ISO\",\r\n        duration: \"durasi format ISO\",\r\n        ipv4: \"alamat IPv4\",\r\n        ipv6: \"alamat IPv6\",\r\n        cidrv4: \"rentang alamat IPv4\",\r\n        cidrv6: \"rentang alamat IPv6\",\r\n        base64: \"string dengan enkode base64\",\r\n        base64url: \"string dengan enkode base64url\",\r\n        json_string: \"string JSON\",\r\n        e164: \"angka E.164\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"input\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `Input tidak valid: diharapkan ${issue.expected}, diterima ${parsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `Input tidak valid: diharapkan ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `Pilihan tidak valid: diharapkan salah satu dari ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `Terlalu besar: diharapkan ${issue.origin ?? \"value\"} memiliki ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"elemen\"}`;\r\n                return `Terlalu besar: diharapkan ${issue.origin ?? \"value\"} menjadi ${adj}${issue.maximum.toString()}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `Terlalu kecil: diharapkan ${issue.origin} memiliki ${adj}${issue.minimum.toString()} ${sizing.unit}`;\r\n                }\r\n                return `Terlalu kecil: diharapkan ${issue.origin} menjadi ${adj}${issue.minimum.toString()}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\")\r\n                    return `String tidak valid: harus dimulai dengan \"${_issue.prefix}\"`;\r\n                if (_issue.format === \"ends_with\")\r\n                    return `String tidak valid: harus berakhir dengan \"${_issue.suffix}\"`;\r\n                if (_issue.format === \"includes\")\r\n                    return `String tidak valid: harus menyertakan \"${_issue.includes}\"`;\r\n                if (_issue.format === \"regex\")\r\n                    return `String tidak valid: harus sesuai pola ${_issue.pattern}`;\r\n                return `${Nouns[_issue.format] ?? issue.format} tidak valid`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `Angka tidak valid: harus kelipatan dari ${issue.divisor}`;\r\n            case \"unrecognized_keys\":\r\n                return `Kunci tidak dikenali ${issue.keys.length > 1 ? \"s\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `Kunci tidak valid di ${issue.origin}`;\r\n            case \"invalid_union\":\r\n                return \"Input tidak valid\";\r\n            case \"invalid_element\":\r\n                return `Nilai tidak valid di ${issue.origin}`;\r\n            default:\r\n                return `Input tidak valid`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"caratteri\", verb: \"avere\" },\r\n        file: { unit: \"byte\", verb: \"avere\" },\r\n        array: { unit: \"elementi\", verb: \"avere\" },\r\n        set: { unit: \"elementi\", verb: \"avere\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"numero\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"vettore\";\r\n                }\r\n                if (data === null) {\r\n                    return \"null\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"input\",\r\n        email: \"indirizzo email\",\r\n        url: \"URL\",\r\n        emoji: \"emoji\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"data e ora ISO\",\r\n        date: \"data ISO\",\r\n        time: \"ora ISO\",\r\n        duration: \"durata ISO\",\r\n        ipv4: \"indirizzo IPv4\",\r\n        ipv6: \"indirizzo IPv6\",\r\n        cidrv4: \"intervallo IPv4\",\r\n        cidrv6: \"intervallo IPv6\",\r\n        base64: \"stringa codificata in base64\",\r\n        base64url: \"URL codificata in base64\",\r\n        json_string: \"stringa JSON\",\r\n        e164: \"numero E.164\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"input\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `Input non valido: atteso ${issue.expected}, ricevuto ${parsedType(issue.input)}`;\r\n            // return `Input non valido: atteso ${issue.expected}, ricevuto ${util.getParsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `Input non valido: atteso ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `Opzione non valida: atteso uno tra ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `Troppo grande: ${issue.origin ?? \"valore\"} deve avere ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"elementi\"}`;\r\n                return `Troppo grande: ${issue.origin ?? \"valore\"} deve essere ${adj}${issue.maximum.toString()}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `Troppo piccolo: ${issue.origin} deve avere ${adj}${issue.minimum.toString()} ${sizing.unit}`;\r\n                }\r\n                return `Troppo piccolo: ${issue.origin} deve essere ${adj}${issue.minimum.toString()}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\")\r\n                    return `Stringa non valida: deve iniziare con \"${_issue.prefix}\"`;\r\n                if (_issue.format === \"ends_with\")\r\n                    return `Stringa non valida: deve terminare con \"${_issue.suffix}\"`;\r\n                if (_issue.format === \"includes\")\r\n                    return `Stringa non valida: deve includere \"${_issue.includes}\"`;\r\n                if (_issue.format === \"regex\")\r\n                    return `Stringa non valida: deve corrispondere al pattern ${_issue.pattern}`;\r\n                return `Invalid ${Nouns[_issue.format] ?? issue.format}`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `Numero non valido: deve essere un multiplo di ${issue.divisor}`;\r\n            case \"unrecognized_keys\":\r\n                return `Chiav${issue.keys.length > 1 ? \"i\" : \"e\"} non riconosciut${issue.keys.length > 1 ? \"e\" : \"a\"}: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `Chiave non valida in ${issue.origin}`;\r\n            case \"invalid_union\":\r\n                return \"Input non valido\";\r\n            case \"invalid_element\":\r\n                return `Valore non valido in ${issue.origin}`;\r\n            default:\r\n                return `Input non valido`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"文字\", verb: \"である\" },\r\n        file: { unit: \"バイト\", verb: \"である\" },\r\n        array: { unit: \"要素\", verb: \"である\" },\r\n        set: { unit: \"要素\", verb: \"である\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"数値\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"配列\";\r\n                }\r\n                if (data === null) {\r\n                    return \"null\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"入力値\",\r\n        email: \"メールアドレス\",\r\n        url: \"URL\",\r\n        emoji: \"絵文字\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"ISO日時\",\r\n        date: \"ISO日付\",\r\n        time: \"ISO時刻\",\r\n        duration: \"ISO期間\",\r\n        ipv4: \"IPv4アドレス\",\r\n        ipv6: \"IPv6アドレス\",\r\n        cidrv4: \"IPv4範囲\",\r\n        cidrv6: \"IPv6範囲\",\r\n        base64: \"base64エンコード文字列\",\r\n        base64url: \"base64urlエンコード文字列\",\r\n        json_string: \"JSON文字列\",\r\n        e164: \"E.164番号\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"入力値\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `無効な入力: ${issue.expected}が期待されましたが、${parsedType(issue.input)}が入力されました`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `無効な入力: ${util.stringifyPrimitive(issue.values[0])}が期待されました`;\r\n                return `無効な選択: ${util.joinValues(issue.values, \"、\")}のいずれかである必要があります`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"以下である\" : \"より小さい\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `大きすぎる値: ${issue.origin ?? \"値\"}は${issue.maximum.toString()}${sizing.unit ?? \"要素\"}${adj}必要があります`;\r\n                return `大きすぎる値: ${issue.origin ?? \"値\"}は${issue.maximum.toString()}${adj}必要があります`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \"以上である\" : \"より大きい\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `小さすぎる値: ${issue.origin}は${issue.minimum.toString()}${sizing.unit}${adj}必要があります`;\r\n                return `小さすぎる値: ${issue.origin}は${issue.minimum.toString()}${adj}必要があります`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\")\r\n                    return `無効な文字列: \"${_issue.prefix}\"で始まる必要があります`;\r\n                if (_issue.format === \"ends_with\")\r\n                    return `無効な文字列: \"${_issue.suffix}\"で終わる必要があります`;\r\n                if (_issue.format === \"includes\")\r\n                    return `無効な文字列: \"${_issue.includes}\"を含む必要があります`;\r\n                if (_issue.format === \"regex\")\r\n                    return `無効な文字列: パターン${_issue.pattern}に一致する必要があります`;\r\n                return `無効な${Nouns[_issue.format] ?? issue.format}`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `無効な数値: ${issue.divisor}の倍数である必要があります`;\r\n            case \"unrecognized_keys\":\r\n                return `認識されていないキー${issue.keys.length > 1 ? \"群\" : \"\"}: ${util.joinValues(issue.keys, \"、\")}`;\r\n            case \"invalid_key\":\r\n                return `${issue.origin}内の無効なキー`;\r\n            case \"invalid_union\":\r\n                return \"無効な入力\";\r\n            case \"invalid_element\":\r\n                return `${issue.origin}内の無効な値`;\r\n            default:\r\n                return `無効な入力`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"តួអក្សរ\", verb: \"គួរមាន\" },\r\n        file: { unit: \"បៃ\", verb: \"គួរមាន\" },\r\n        array: { unit: \"ធាតុ\", verb: \"គួរមាន\" },\r\n        set: { unit: \"ធាតុ\", verb: \"គួរមាន\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"មិនមែនជាលេខ (NaN)\" : \"លេខ\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"អារេ (Array)\";\r\n                }\r\n                if (data === null) {\r\n                    return \"គ្មានតម្លៃ (null)\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"ទិន្នន័យបញ្ចូល\",\r\n        email: \"អាសយដ្ឋានអ៊ីមែល\",\r\n        url: \"URL\",\r\n        emoji: \"សញ្ញាអារម្មណ៍\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"កាលបរិច្ឆេទ និងម៉ោង ISO\",\r\n        date: \"កាលបរិច្ឆេទ ISO\",\r\n        time: \"ម៉ោង ISO\",\r\n        duration: \"រយៈពេល ISO\",\r\n        ipv4: \"អាសយដ្ឋាន IPv4\",\r\n        ipv6: \"អាសយដ្ឋាន IPv6\",\r\n        cidrv4: \"ដែនអាសយដ្ឋាន IPv4\",\r\n        cidrv6: \"ដែនអាសយដ្ឋាន IPv6\",\r\n        base64: \"ខ្សែអក្សរអ៊ិកូដ base64\",\r\n        base64url: \"ខ្សែអក្សរអ៊ិកូដ base64url\",\r\n        json_string: \"ខ្សែអក្សរ JSON\",\r\n        e164: \"លេខ E.164\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"ទិន្នន័យបញ្ចូល\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `ទិន្នន័យបញ្ចូលមិនត្រឹមត្រូវ៖ ត្រូវការ ${issue.expected} ប៉ុន្តែទទួលបាន ${parsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `ទិន្នន័យបញ្ចូលមិនត្រឹមត្រូវ៖ ត្រូវការ ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `ជម្រើសមិនត្រឹមត្រូវ៖ ត្រូវជាមួយក្នុងចំណោម ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `ធំពេក៖ ត្រូវការ ${issue.origin ?? \"តម្លៃ\"} ${adj} ${issue.maximum.toString()} ${sizing.unit ?? \"ធាតុ\"}`;\r\n                return `ធំពេក៖ ត្រូវការ ${issue.origin ?? \"តម្លៃ\"} ${adj} ${issue.maximum.toString()}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `តូចពេក៖ ត្រូវការ ${issue.origin} ${adj} ${issue.minimum.toString()} ${sizing.unit}`;\r\n                }\r\n                return `តូចពេក៖ ត្រូវការ ${issue.origin} ${adj} ${issue.minimum.toString()}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\") {\r\n                    return `ខ្សែអក្សរមិនត្រឹមត្រូវ៖ ត្រូវចាប់ផ្តើមដោយ \"${_issue.prefix}\"`;\r\n                }\r\n                if (_issue.format === \"ends_with\")\r\n                    return `ខ្សែអក្សរមិនត្រឹមត្រូវ៖ ត្រូវបញ្ចប់ដោយ \"${_issue.suffix}\"`;\r\n                if (_issue.format === \"includes\")\r\n                    return `ខ្សែអក្សរមិនត្រឹមត្រូវ៖ ត្រូវមាន \"${_issue.includes}\"`;\r\n                if (_issue.format === \"regex\")\r\n                    return `ខ្សែអក្សរមិនត្រឹមត្រូវ៖ ត្រូវតែផ្គូផ្គងនឹងទម្រង់ដែលបានកំណត់ ${_issue.pattern}`;\r\n                return `មិនត្រឹមត្រូវ៖ ${Nouns[_issue.format] ?? issue.format}`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `លេខមិនត្រឹមត្រូវ៖ ត្រូវតែជាពហុគុណនៃ ${issue.divisor}`;\r\n            case \"unrecognized_keys\":\r\n                return `រកឃើញសោមិនស្គាល់៖ ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `សោមិនត្រឹមត្រូវនៅក្នុង ${issue.origin}`;\r\n            case \"invalid_union\":\r\n                return `ទិន្នន័យមិនត្រឹមត្រូវ`;\r\n            case \"invalid_element\":\r\n                return `ទិន្នន័យមិនត្រឹមត្រូវនៅក្នុង ${issue.origin}`;\r\n            default:\r\n                return `ទិន្នន័យមិនត្រឹមត្រូវ`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"문자\", verb: \"to have\" },\r\n        file: { unit: \"바이트\", verb: \"to have\" },\r\n        array: { unit: \"개\", verb: \"to have\" },\r\n        set: { unit: \"개\", verb: \"to have\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"number\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"array\";\r\n                }\r\n                if (data === null) {\r\n                    return \"null\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"입력\",\r\n        email: \"이메일 주소\",\r\n        url: \"URL\",\r\n        emoji: \"이모지\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"ISO 날짜시간\",\r\n        date: \"ISO 날짜\",\r\n        time: \"ISO 시간\",\r\n        duration: \"ISO 기간\",\r\n        ipv4: \"IPv4 주소\",\r\n        ipv6: \"IPv6 주소\",\r\n        cidrv4: \"IPv4 범위\",\r\n        cidrv6: \"IPv6 범위\",\r\n        base64: \"base64 인코딩 문자열\",\r\n        base64url: \"base64url 인코딩 문자열\",\r\n        json_string: \"JSON 문자열\",\r\n        e164: \"E.164 번호\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"입력\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `잘못된 입력: 예상 타입은 ${issue.expected}, 받은 타입은 ${parsedType(issue.input)}입니다`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `잘못된 입력: 값은 ${util.stringifyPrimitive(issue.values[0])} 이어야 합니다`;\r\n                return `잘못된 옵션: ${util.joinValues(issue.values, \"또는 \")} 중 하나여야 합니다`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"이하\" : \"미만\";\r\n                const suffix = adj === \"미만\" ? \"이어야 합니다\" : \"여야 합니다\";\r\n                const sizing = getSizing(issue.origin);\r\n                const unit = sizing?.unit ?? \"요소\";\r\n                if (sizing)\r\n                    return `${issue.origin ?? \"값\"}이 너무 큽니다: ${issue.maximum.toString()}${unit} ${adj}${suffix}`;\r\n                return `${issue.origin ?? \"값\"}이 너무 큽니다: ${issue.maximum.toString()} ${adj}${suffix}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \"이상\" : \"초과\";\r\n                const suffix = adj === \"이상\" ? \"이어야 합니다\" : \"여야 합니다\";\r\n                const sizing = getSizing(issue.origin);\r\n                const unit = sizing?.unit ?? \"요소\";\r\n                if (sizing) {\r\n                    return `${issue.origin ?? \"값\"}이 너무 작습니다: ${issue.minimum.toString()}${unit} ${adj}${suffix}`;\r\n                }\r\n                return `${issue.origin ?? \"값\"}이 너무 작습니다: ${issue.minimum.toString()} ${adj}${suffix}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\") {\r\n                    return `잘못된 문자열: \"${_issue.prefix}\"(으)로 시작해야 합니다`;\r\n                }\r\n                if (_issue.format === \"ends_with\")\r\n                    return `잘못된 문자열: \"${_issue.suffix}\"(으)로 끝나야 합니다`;\r\n                if (_issue.format === \"includes\")\r\n                    return `잘못된 문자열: \"${_issue.includes}\"을(를) 포함해야 합니다`;\r\n                if (_issue.format === \"regex\")\r\n                    return `잘못된 문자열: 정규식 ${_issue.pattern} 패턴과 일치해야 합니다`;\r\n                return `잘못된 ${Nouns[_issue.format] ?? issue.format}`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `잘못된 숫자: ${issue.divisor}의 배수여야 합니다`;\r\n            case \"unrecognized_keys\":\r\n                return `인식할 수 없는 키: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `잘못된 키: ${issue.origin}`;\r\n            case \"invalid_union\":\r\n                return `잘못된 입력`;\r\n            case \"invalid_element\":\r\n                return `잘못된 값: ${issue.origin}`;\r\n            default:\r\n                return `잘못된 입력`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"знаци\", verb: \"да имаат\" },\r\n        file: { unit: \"бајти\", verb: \"да имаат\" },\r\n        array: { unit: \"ставки\", verb: \"да имаат\" },\r\n        set: { unit: \"ставки\", verb: \"да имаат\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"број\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"низа\";\r\n                }\r\n                if (data === null) {\r\n                    return \"null\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"внес\",\r\n        email: \"адреса на е-пошта\",\r\n        url: \"URL\",\r\n        emoji: \"емоџи\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"ISO датум и време\",\r\n        date: \"ISO датум\",\r\n        time: \"ISO време\",\r\n        duration: \"ISO времетраење\",\r\n        ipv4: \"IPv4 адреса\",\r\n        ipv6: \"IPv6 адреса\",\r\n        cidrv4: \"IPv4 опсег\",\r\n        cidrv6: \"IPv6 опсег\",\r\n        base64: \"base64-енкодирана низа\",\r\n        base64url: \"base64url-енкодирана низа\",\r\n        json_string: \"JSON низа\",\r\n        e164: \"E.164 број\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"внес\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `Грешен внес: се очекува ${issue.expected}, примено ${parsedType(issue.input)}`;\r\n            // return `Invalid input: expected ${issue.expected}, received ${util.getParsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `Invalid input: expected ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `Грешана опција: се очекува една ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `Премногу голем: се очекува ${issue.origin ?? \"вредноста\"} да има ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"елементи\"}`;\r\n                return `Премногу голем: се очекува ${issue.origin ?? \"вредноста\"} да биде ${adj}${issue.maximum.toString()}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `Премногу мал: се очекува ${issue.origin} да има ${adj}${issue.minimum.toString()} ${sizing.unit}`;\r\n                }\r\n                return `Премногу мал: се очекува ${issue.origin} да биде ${adj}${issue.minimum.toString()}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\") {\r\n                    return `Неважечка низа: мора да започнува со \"${_issue.prefix}\"`;\r\n                }\r\n                if (_issue.format === \"ends_with\")\r\n                    return `Неважечка низа: мора да завршува со \"${_issue.suffix}\"`;\r\n                if (_issue.format === \"includes\")\r\n                    return `Неважечка низа: мора да вклучува \"${_issue.includes}\"`;\r\n                if (_issue.format === \"regex\")\r\n                    return `Неважечка низа: мора да одгоара на патернот ${_issue.pattern}`;\r\n                return `Invalid ${Nouns[_issue.format] ?? issue.format}`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `Грешен број: мора да биде делив со ${issue.divisor}`;\r\n            case \"unrecognized_keys\":\r\n                return `${issue.keys.length > 1 ? \"Непрепознаени клучеви\" : \"Непрепознаен клуч\"}: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `Грешен клуч во ${issue.origin}`;\r\n            case \"invalid_union\":\r\n                return \"Грешен внес\";\r\n            case \"invalid_element\":\r\n                return `Грешна вредност во ${issue.origin}`;\r\n            default:\r\n                return `Грешен внес`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"aksara\", verb: \"mempunyai\" },\r\n        file: { unit: \"bait\", verb: \"mempunyai\" },\r\n        array: { unit: \"elemen\", verb: \"mempunyai\" },\r\n        set: { unit: \"elemen\", verb: \"mempunyai\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"nombor\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"array\";\r\n                }\r\n                if (data === null) {\r\n                    return \"null\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"input\",\r\n        email: \"alamat e-mel\",\r\n        url: \"URL\",\r\n        emoji: \"emoji\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"tarikh masa ISO\",\r\n        date: \"tarikh ISO\",\r\n        time: \"masa ISO\",\r\n        duration: \"tempoh ISO\",\r\n        ipv4: \"alamat IPv4\",\r\n        ipv6: \"alamat IPv6\",\r\n        cidrv4: \"julat IPv4\",\r\n        cidrv6: \"julat IPv6\",\r\n        base64: \"string dikodkan base64\",\r\n        base64url: \"string dikodkan base64url\",\r\n        json_string: \"string JSON\",\r\n        e164: \"nombor E.164\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"input\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `Input tidak sah: dijangka ${issue.expected}, diterima ${parsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `Input tidak sah: dijangka ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `Pilihan tidak sah: dijangka salah satu daripada ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `Terlalu besar: dijangka ${issue.origin ?? \"nilai\"} ${sizing.verb} ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"elemen\"}`;\r\n                return `Terlalu besar: dijangka ${issue.origin ?? \"nilai\"} adalah ${adj}${issue.maximum.toString()}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `Terlalu kecil: dijangka ${issue.origin} ${sizing.verb} ${adj}${issue.minimum.toString()} ${sizing.unit}`;\r\n                }\r\n                return `Terlalu kecil: dijangka ${issue.origin} adalah ${adj}${issue.minimum.toString()}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\")\r\n                    return `String tidak sah: mesti bermula dengan \"${_issue.prefix}\"`;\r\n                if (_issue.format === \"ends_with\")\r\n                    return `String tidak sah: mesti berakhir dengan \"${_issue.suffix}\"`;\r\n                if (_issue.format === \"includes\")\r\n                    return `String tidak sah: mesti mengandungi \"${_issue.includes}\"`;\r\n                if (_issue.format === \"regex\")\r\n                    return `String tidak sah: mesti sepadan dengan corak ${_issue.pattern}`;\r\n                return `${Nouns[_issue.format] ?? issue.format} tidak sah`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `Nombor tidak sah: perlu gandaan ${issue.divisor}`;\r\n            case \"unrecognized_keys\":\r\n                return `Kunci tidak dikenali: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `Kunci tidak sah dalam ${issue.origin}`;\r\n            case \"invalid_union\":\r\n                return \"Input tidak sah\";\r\n            case \"invalid_element\":\r\n                return `Nilai tidak sah dalam ${issue.origin}`;\r\n            default:\r\n                return `Input tidak sah`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"tekens\" },\r\n        file: { unit: \"bytes\" },\r\n        array: { unit: \"elementen\" },\r\n        set: { unit: \"elementen\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"getal\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"array\";\r\n                }\r\n                if (data === null) {\r\n                    return \"null\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"invoer\",\r\n        email: \"emailadres\",\r\n        url: \"URL\",\r\n        emoji: \"emoji\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"ISO datum en tijd\",\r\n        date: \"ISO datum\",\r\n        time: \"ISO tijd\",\r\n        duration: \"ISO duur\",\r\n        ipv4: \"IPv4-adres\",\r\n        ipv6: \"IPv6-adres\",\r\n        cidrv4: \"IPv4-bereik\",\r\n        cidrv6: \"IPv6-bereik\",\r\n        base64: \"base64-gecodeerde tekst\",\r\n        base64url: \"base64 URL-gecodeerde tekst\",\r\n        json_string: \"JSON string\",\r\n        e164: \"E.164-nummer\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"invoer\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `Ongeldige invoer: verwacht ${issue.expected}, ontving ${parsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `Ongeldige invoer: verwacht ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `Ongeldige optie: verwacht één van ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `Te lang: verwacht dat ${issue.origin ?? \"waarde\"} ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"elementen\"} bevat`;\r\n                return `Te lang: verwacht dat ${issue.origin ?? \"waarde\"} ${adj}${issue.maximum.toString()} is`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `Te kort: verwacht dat ${issue.origin} ${adj}${issue.minimum.toString()} ${sizing.unit} bevat`;\r\n                }\r\n                return `Te kort: verwacht dat ${issue.origin} ${adj}${issue.minimum.toString()} is`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\") {\r\n                    return `Ongeldige tekst: moet met \"${_issue.prefix}\" beginnen`;\r\n                }\r\n                if (_issue.format === \"ends_with\")\r\n                    return `Ongeldige tekst: moet op \"${_issue.suffix}\" eindigen`;\r\n                if (_issue.format === \"includes\")\r\n                    return `Ongeldige tekst: moet \"${_issue.includes}\" bevatten`;\r\n                if (_issue.format === \"regex\")\r\n                    return `Ongeldige tekst: moet overeenkomen met patroon ${_issue.pattern}`;\r\n                return `Ongeldig: ${Nouns[_issue.format] ?? issue.format}`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `Ongeldig getal: moet een veelvoud van ${issue.divisor} zijn`;\r\n            case \"unrecognized_keys\":\r\n                return `Onbekende key${issue.keys.length > 1 ? \"s\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `Ongeldige key in ${issue.origin}`;\r\n            case \"invalid_union\":\r\n                return \"Ongeldige invoer\";\r\n            case \"invalid_element\":\r\n                return `Ongeldige waarde in ${issue.origin}`;\r\n            default:\r\n                return `Ongeldige invoer`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"tegn\", verb: \"å ha\" },\r\n        file: { unit: \"bytes\", verb: \"å ha\" },\r\n        array: { unit: \"elementer\", verb: \"å inneholde\" },\r\n        set: { unit: \"elementer\", verb: \"å inneholde\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"tall\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"liste\";\r\n                }\r\n                if (data === null) {\r\n                    return \"null\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"input\",\r\n        email: \"e-postadresse\",\r\n        url: \"URL\",\r\n        emoji: \"emoji\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"ISO dato- og klokkeslett\",\r\n        date: \"ISO-dato\",\r\n        time: \"ISO-klokkeslett\",\r\n        duration: \"ISO-varighet\",\r\n        ipv4: \"IPv4-område\",\r\n        ipv6: \"IPv6-område\",\r\n        cidrv4: \"IPv4-spekter\",\r\n        cidrv6: \"IPv6-spekter\",\r\n        base64: \"base64-enkodet streng\",\r\n        base64url: \"base64url-enkodet streng\",\r\n        json_string: \"JSON-streng\",\r\n        e164: \"E.164-nummer\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"input\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `Ugyldig input: forventet ${issue.expected}, fikk ${parsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `Ugyldig verdi: forventet ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `Ugyldig valg: forventet en av ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `For stor(t): forventet ${issue.origin ?? \"value\"} til å ha ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"elementer\"}`;\r\n                return `For stor(t): forventet ${issue.origin ?? \"value\"} til å ha ${adj}${issue.maximum.toString()}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `For lite(n): forventet ${issue.origin} til å ha ${adj}${issue.minimum.toString()} ${sizing.unit}`;\r\n                }\r\n                return `For lite(n): forventet ${issue.origin} til å ha ${adj}${issue.minimum.toString()}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\")\r\n                    return `Ugyldig streng: må starte med \"${_issue.prefix}\"`;\r\n                if (_issue.format === \"ends_with\")\r\n                    return `Ugyldig streng: må ende med \"${_issue.suffix}\"`;\r\n                if (_issue.format === \"includes\")\r\n                    return `Ugyldig streng: må inneholde \"${_issue.includes}\"`;\r\n                if (_issue.format === \"regex\")\r\n                    return `Ugyldig streng: må matche mønsteret ${_issue.pattern}`;\r\n                return `Ugyldig ${Nouns[_issue.format] ?? issue.format}`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `Ugyldig tall: må være et multiplum av ${issue.divisor}`;\r\n            case \"unrecognized_keys\":\r\n                return `${issue.keys.length > 1 ? \"Ukjente nøkler\" : \"Ukjent nøkkel\"}: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `Ugyldig nøkkel i ${issue.origin}`;\r\n            case \"invalid_union\":\r\n                return \"Ugyldig input\";\r\n            case \"invalid_element\":\r\n                return `Ugyldig verdi i ${issue.origin}`;\r\n            default:\r\n                return `Ugyldig input`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"harf\", verb: \"olmalıdır\" },\r\n        file: { unit: \"bayt\", verb: \"olmalıdır\" },\r\n        array: { unit: \"unsur\", verb: \"olmalıdır\" },\r\n        set: { unit: \"unsur\", verb: \"olmalıdır\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"numara\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"saf\";\r\n                }\r\n                if (data === null) {\r\n                    return \"gayb\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"giren\",\r\n        email: \"epostagâh\",\r\n        url: \"URL\",\r\n        emoji: \"emoji\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"ISO hengâmı\",\r\n        date: \"ISO tarihi\",\r\n        time: \"ISO zamanı\",\r\n        duration: \"ISO müddeti\",\r\n        ipv4: \"IPv4 nişânı\",\r\n        ipv6: \"IPv6 nişânı\",\r\n        cidrv4: \"IPv4 menzili\",\r\n        cidrv6: \"IPv6 menzili\",\r\n        base64: \"base64-şifreli metin\",\r\n        base64url: \"base64url-şifreli metin\",\r\n        json_string: \"JSON metin\",\r\n        e164: \"E.164 sayısı\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"giren\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `Fâsit giren: umulan ${issue.expected}, alınan ${parsedType(issue.input)}`;\r\n            // return `Fâsit giren: umulan ${issue.expected}, alınan ${util.getParsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `Fâsit giren: umulan ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `Fâsit tercih: mûteberler ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `Fazla büyük: ${issue.origin ?? \"value\"}, ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"elements\"} sahip olmalıydı.`;\r\n                return `Fazla büyük: ${issue.origin ?? \"value\"}, ${adj}${issue.maximum.toString()} olmalıydı.`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `Fazla küçük: ${issue.origin}, ${adj}${issue.minimum.toString()} ${sizing.unit} sahip olmalıydı.`;\r\n                }\r\n                return `Fazla küçük: ${issue.origin}, ${adj}${issue.minimum.toString()} olmalıydı.`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\")\r\n                    return `Fâsit metin: \"${_issue.prefix}\" ile başlamalı.`;\r\n                if (_issue.format === \"ends_with\")\r\n                    return `Fâsit metin: \"${_issue.suffix}\" ile bitmeli.`;\r\n                if (_issue.format === \"includes\")\r\n                    return `Fâsit metin: \"${_issue.includes}\" ihtivâ etmeli.`;\r\n                if (_issue.format === \"regex\")\r\n                    return `Fâsit metin: ${_issue.pattern} nakşına uymalı.`;\r\n                return `Fâsit ${Nouns[_issue.format] ?? issue.format}`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `Fâsit sayı: ${issue.divisor} katı olmalıydı.`;\r\n            case \"unrecognized_keys\":\r\n                return `Tanınmayan anahtar ${issue.keys.length > 1 ? \"s\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `${issue.origin} için tanınmayan anahtar var.`;\r\n            case \"invalid_union\":\r\n                return \"Giren tanınamadı.\";\r\n            case \"invalid_element\":\r\n                return `${issue.origin} için tanınmayan kıymet var.`;\r\n            default:\r\n                return `Kıymet tanınamadı.`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"توکي\", verb: \"ولري\" },\r\n        file: { unit: \"بایټس\", verb: \"ولري\" },\r\n        array: { unit: \"توکي\", verb: \"ولري\" },\r\n        set: { unit: \"توکي\", verb: \"ولري\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"عدد\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"ارې\";\r\n                }\r\n                if (data === null) {\r\n                    return \"null\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"ورودي\",\r\n        email: \"بریښنالیک\",\r\n        url: \"یو آر ال\",\r\n        emoji: \"ایموجي\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"نیټه او وخت\",\r\n        date: \"نېټه\",\r\n        time: \"وخت\",\r\n        duration: \"موده\",\r\n        ipv4: \"د IPv4 پته\",\r\n        ipv6: \"د IPv6 پته\",\r\n        cidrv4: \"د IPv4 ساحه\",\r\n        cidrv6: \"د IPv6 ساحه\",\r\n        base64: \"base64-encoded متن\",\r\n        base64url: \"base64url-encoded متن\",\r\n        json_string: \"JSON متن\",\r\n        e164: \"د E.164 شمېره\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"ورودي\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `ناسم ورودي: باید ${issue.expected} وای, مګر ${parsedType(issue.input)} ترلاسه شو`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1) {\r\n                    return `ناسم ورودي: باید ${util.stringifyPrimitive(issue.values[0])} وای`;\r\n                }\r\n                return `ناسم انتخاب: باید یو له ${util.joinValues(issue.values, \"|\")} څخه وای`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `ډیر لوی: ${issue.origin ?? \"ارزښت\"} باید ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"عنصرونه\"} ولري`;\r\n                }\r\n                return `ډیر لوی: ${issue.origin ?? \"ارزښت\"} باید ${adj}${issue.maximum.toString()} وي`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `ډیر کوچنی: ${issue.origin} باید ${adj}${issue.minimum.toString()} ${sizing.unit} ولري`;\r\n                }\r\n                return `ډیر کوچنی: ${issue.origin} باید ${adj}${issue.minimum.toString()} وي`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\") {\r\n                    return `ناسم متن: باید د \"${_issue.prefix}\" سره پیل شي`;\r\n                }\r\n                if (_issue.format === \"ends_with\") {\r\n                    return `ناسم متن: باید د \"${_issue.suffix}\" سره پای ته ورسيږي`;\r\n                }\r\n                if (_issue.format === \"includes\") {\r\n                    return `ناسم متن: باید \"${_issue.includes}\" ولري`;\r\n                }\r\n                if (_issue.format === \"regex\") {\r\n                    return `ناسم متن: باید د ${_issue.pattern} سره مطابقت ولري`;\r\n                }\r\n                return `${Nouns[_issue.format] ?? issue.format} ناسم دی`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `ناسم عدد: باید د ${issue.divisor} مضرب وي`;\r\n            case \"unrecognized_keys\":\r\n                return `ناسم ${issue.keys.length > 1 ? \"کلیډونه\" : \"کلیډ\"}: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `ناسم کلیډ په ${issue.origin} کې`;\r\n            case \"invalid_union\":\r\n                return `ناسمه ورودي`;\r\n            case \"invalid_element\":\r\n                return `ناسم عنصر په ${issue.origin} کې`;\r\n            default:\r\n                return `ناسمه ورودي`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"znaków\", verb: \"mieć\" },\r\n        file: { unit: \"bajtów\", verb: \"mieć\" },\r\n        array: { unit: \"elementów\", verb: \"mieć\" },\r\n        set: { unit: \"elementów\", verb: \"mieć\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"liczba\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"tablica\";\r\n                }\r\n                if (data === null) {\r\n                    return \"null\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"wyrażenie\",\r\n        email: \"adres email\",\r\n        url: \"URL\",\r\n        emoji: \"emoji\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"data i godzina w formacie ISO\",\r\n        date: \"data w formacie ISO\",\r\n        time: \"godzina w formacie ISO\",\r\n        duration: \"czas trwania ISO\",\r\n        ipv4: \"adres IPv4\",\r\n        ipv6: \"adres IPv6\",\r\n        cidrv4: \"zakres IPv4\",\r\n        cidrv6: \"zakres IPv6\",\r\n        base64: \"ciąg znaków zakodowany w formacie base64\",\r\n        base64url: \"ciąg znaków zakodowany w formacie base64url\",\r\n        json_string: \"ciąg znaków w formacie JSON\",\r\n        e164: \"liczba E.164\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"wejście\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `Nieprawidłowe dane wejściowe: oczekiwano ${issue.expected}, otrzymano ${parsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `Nieprawidłowe dane wejściowe: oczekiwano ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `Nieprawidłowa opcja: oczekiwano jednej z wartości ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `Za duża wartość: oczekiwano, że ${issue.origin ?? \"wartość\"} będzie mieć ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"elementów\"}`;\r\n                }\r\n                return `Zbyt duż(y/a/e): oczekiwano, że ${issue.origin ?? \"wartość\"} będzie wynosić ${adj}${issue.maximum.toString()}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `Za mała wartość: oczekiwano, że ${issue.origin ?? \"wartość\"} będzie mieć ${adj}${issue.minimum.toString()} ${sizing.unit ?? \"elementów\"}`;\r\n                }\r\n                return `Zbyt mał(y/a/e): oczekiwano, że ${issue.origin ?? \"wartość\"} będzie wynosić ${adj}${issue.minimum.toString()}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\")\r\n                    return `Nieprawidłowy ciąg znaków: musi zaczynać się od \"${_issue.prefix}\"`;\r\n                if (_issue.format === \"ends_with\")\r\n                    return `Nieprawidłowy ciąg znaków: musi kończyć się na \"${_issue.suffix}\"`;\r\n                if (_issue.format === \"includes\")\r\n                    return `Nieprawidłowy ciąg znaków: musi zawierać \"${_issue.includes}\"`;\r\n                if (_issue.format === \"regex\")\r\n                    return `Nieprawidłowy ciąg znaków: musi odpowiadać wzorcowi ${_issue.pattern}`;\r\n                return `Nieprawidłow(y/a/e) ${Nouns[_issue.format] ?? issue.format}`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `Nieprawidłowa liczba: musi być wielokrotnością ${issue.divisor}`;\r\n            case \"unrecognized_keys\":\r\n                return `Nierozpoznane klucze${issue.keys.length > 1 ? \"s\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `Nieprawidłowy klucz w ${issue.origin}`;\r\n            case \"invalid_union\":\r\n                return \"Nieprawidłowe dane wejściowe\";\r\n            case \"invalid_element\":\r\n                return `Nieprawidłowa wartość w ${issue.origin}`;\r\n            default:\r\n                return `Nieprawidłowe dane wejściowe`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"caracteres\", verb: \"ter\" },\r\n        file: { unit: \"bytes\", verb: \"ter\" },\r\n        array: { unit: \"itens\", verb: \"ter\" },\r\n        set: { unit: \"itens\", verb: \"ter\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"número\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"array\";\r\n                }\r\n                if (data === null) {\r\n                    return \"nulo\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"padrão\",\r\n        email: \"endereço de e-mail\",\r\n        url: \"URL\",\r\n        emoji: \"emoji\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"data e hora ISO\",\r\n        date: \"data ISO\",\r\n        time: \"hora ISO\",\r\n        duration: \"duração ISO\",\r\n        ipv4: \"endereço IPv4\",\r\n        ipv6: \"endereço IPv6\",\r\n        cidrv4: \"faixa de IPv4\",\r\n        cidrv6: \"faixa de IPv6\",\r\n        base64: \"texto codificado em base64\",\r\n        base64url: \"URL codificada em base64\",\r\n        json_string: \"texto JSON\",\r\n        e164: \"número E.164\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"entrada\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `Tipo inválido: esperado ${issue.expected}, recebido ${parsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `Entrada inválida: esperado ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `Opção inválida: esperada uma das ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `Muito grande: esperado que ${issue.origin ?? \"valor\"} tivesse ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"elementos\"}`;\r\n                return `Muito grande: esperado que ${issue.origin ?? \"valor\"} fosse ${adj}${issue.maximum.toString()}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `Muito pequeno: esperado que ${issue.origin} tivesse ${adj}${issue.minimum.toString()} ${sizing.unit}`;\r\n                }\r\n                return `Muito pequeno: esperado que ${issue.origin} fosse ${adj}${issue.minimum.toString()}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\")\r\n                    return `Texto inválido: deve começar com \"${_issue.prefix}\"`;\r\n                if (_issue.format === \"ends_with\")\r\n                    return `Texto inválido: deve terminar com \"${_issue.suffix}\"`;\r\n                if (_issue.format === \"includes\")\r\n                    return `Texto inválido: deve incluir \"${_issue.includes}\"`;\r\n                if (_issue.format === \"regex\")\r\n                    return `Texto inválido: deve corresponder ao padrão ${_issue.pattern}`;\r\n                return `${Nouns[_issue.format] ?? issue.format} inválido`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `Número inválido: deve ser múltiplo de ${issue.divisor}`;\r\n            case \"unrecognized_keys\":\r\n                return `Chave${issue.keys.length > 1 ? \"s\" : \"\"} desconhecida${issue.keys.length > 1 ? \"s\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `Chave inválida em ${issue.origin}`;\r\n            case \"invalid_union\":\r\n                return \"Entrada inválida\";\r\n            case \"invalid_element\":\r\n                return `Valor inválido em ${issue.origin}`;\r\n            default:\r\n                return `Campo inválido`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nfunction getRussianPlural(count, one, few, many) {\r\n    const absCount = Math.abs(count);\r\n    const lastDigit = absCount % 10;\r\n    const lastTwoDigits = absCount % 100;\r\n    if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {\r\n        return many;\r\n    }\r\n    if (lastDigit === 1) {\r\n        return one;\r\n    }\r\n    if (lastDigit >= 2 && lastDigit <= 4) {\r\n        return few;\r\n    }\r\n    return many;\r\n}\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: {\r\n            unit: {\r\n                one: \"символ\",\r\n                few: \"символа\",\r\n                many: \"символов\",\r\n            },\r\n            verb: \"иметь\",\r\n        },\r\n        file: {\r\n            unit: {\r\n                one: \"байт\",\r\n                few: \"байта\",\r\n                many: \"байт\",\r\n            },\r\n            verb: \"иметь\",\r\n        },\r\n        array: {\r\n            unit: {\r\n                one: \"элемент\",\r\n                few: \"элемента\",\r\n                many: \"элементов\",\r\n            },\r\n            verb: \"иметь\",\r\n        },\r\n        set: {\r\n            unit: {\r\n                one: \"элемент\",\r\n                few: \"элемента\",\r\n                many: \"элементов\",\r\n            },\r\n            verb: \"иметь\",\r\n        },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"число\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"массив\";\r\n                }\r\n                if (data === null) {\r\n                    return \"null\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"ввод\",\r\n        email: \"email адрес\",\r\n        url: \"URL\",\r\n        emoji: \"эмодзи\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"ISO дата и время\",\r\n        date: \"ISO дата\",\r\n        time: \"ISO время\",\r\n        duration: \"ISO длительность\",\r\n        ipv4: \"IPv4 адрес\",\r\n        ipv6: \"IPv6 адрес\",\r\n        cidrv4: \"IPv4 диапазон\",\r\n        cidrv6: \"IPv6 диапазон\",\r\n        base64: \"строка в формате base64\",\r\n        base64url: \"строка в формате base64url\",\r\n        json_string: \"JSON строка\",\r\n        e164: \"номер E.164\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"ввод\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `Неверный ввод: ожидалось ${issue.expected}, получено ${parsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `Неверный ввод: ожидалось ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `Неверный вариант: ожидалось одно из ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    const maxValue = Number(issue.maximum);\r\n                    const unit = getRussianPlural(maxValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);\r\n                    return `Слишком большое значение: ожидалось, что ${issue.origin ?? \"значение\"} будет иметь ${adj}${issue.maximum.toString()} ${unit}`;\r\n                }\r\n                return `Слишком большое значение: ожидалось, что ${issue.origin ?? \"значение\"} будет ${adj}${issue.maximum.toString()}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    const minValue = Number(issue.minimum);\r\n                    const unit = getRussianPlural(minValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);\r\n                    return `Слишком маленькое значение: ожидалось, что ${issue.origin} будет иметь ${adj}${issue.minimum.toString()} ${unit}`;\r\n                }\r\n                return `Слишком маленькое значение: ожидалось, что ${issue.origin} будет ${adj}${issue.minimum.toString()}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\")\r\n                    return `Неверная строка: должна начинаться с \"${_issue.prefix}\"`;\r\n                if (_issue.format === \"ends_with\")\r\n                    return `Неверная строка: должна заканчиваться на \"${_issue.suffix}\"`;\r\n                if (_issue.format === \"includes\")\r\n                    return `Неверная строка: должна содержать \"${_issue.includes}\"`;\r\n                if (_issue.format === \"regex\")\r\n                    return `Неверная строка: должна соответствовать шаблону ${_issue.pattern}`;\r\n                return `Неверный ${Nouns[_issue.format] ?? issue.format}`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `Неверное число: должно быть кратным ${issue.divisor}`;\r\n            case \"unrecognized_keys\":\r\n                return `Нераспознанн${issue.keys.length > 1 ? \"ые\" : \"ый\"} ключ${issue.keys.length > 1 ? \"и\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `Неверный ключ в ${issue.origin}`;\r\n            case \"invalid_union\":\r\n                return \"Неверные входные данные\";\r\n            case \"invalid_element\":\r\n                return `Неверное значение в ${issue.origin}`;\r\n            default:\r\n                return `Неверные входные данные`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"znakov\", verb: \"imeti\" },\r\n        file: { unit: \"bajtov\", verb: \"imeti\" },\r\n        array: { unit: \"elementov\", verb: \"imeti\" },\r\n        set: { unit: \"elementov\", verb: \"imeti\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"število\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"tabela\";\r\n                }\r\n                if (data === null) {\r\n                    return \"null\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"vnos\",\r\n        email: \"e-poštni naslov\",\r\n        url: \"URL\",\r\n        emoji: \"emoji\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"ISO datum in čas\",\r\n        date: \"ISO datum\",\r\n        time: \"ISO čas\",\r\n        duration: \"ISO trajanje\",\r\n        ipv4: \"IPv4 naslov\",\r\n        ipv6: \"IPv6 naslov\",\r\n        cidrv4: \"obseg IPv4\",\r\n        cidrv6: \"obseg IPv6\",\r\n        base64: \"base64 kodiran niz\",\r\n        base64url: \"base64url kodiran niz\",\r\n        json_string: \"JSON niz\",\r\n        e164: \"E.164 številka\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"vnos\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `Neveljaven vnos: pričakovano ${issue.expected}, prejeto ${parsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `Neveljaven vnos: pričakovano ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `Neveljavna možnost: pričakovano eno izmed ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `Preveliko: pričakovano, da bo ${issue.origin ?? \"vrednost\"} imelo ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"elementov\"}`;\r\n                return `Preveliko: pričakovano, da bo ${issue.origin ?? \"vrednost\"} ${adj}${issue.maximum.toString()}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `Premajhno: pričakovano, da bo ${issue.origin} imelo ${adj}${issue.minimum.toString()} ${sizing.unit}`;\r\n                }\r\n                return `Premajhno: pričakovano, da bo ${issue.origin} ${adj}${issue.minimum.toString()}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\") {\r\n                    return `Neveljaven niz: mora se začeti z \"${_issue.prefix}\"`;\r\n                }\r\n                if (_issue.format === \"ends_with\")\r\n                    return `Neveljaven niz: mora se končati z \"${_issue.suffix}\"`;\r\n                if (_issue.format === \"includes\")\r\n                    return `Neveljaven niz: mora vsebovati \"${_issue.includes}\"`;\r\n                if (_issue.format === \"regex\")\r\n                    return `Neveljaven niz: mora ustrezati vzorcu ${_issue.pattern}`;\r\n                return `Neveljaven ${Nouns[_issue.format] ?? issue.format}`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `Neveljavno število: mora biti večkratnik ${issue.divisor}`;\r\n            case \"unrecognized_keys\":\r\n                return `Neprepoznan${issue.keys.length > 1 ? \"i ključi\" : \" ključ\"}: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `Neveljaven ključ v ${issue.origin}`;\r\n            case \"invalid_union\":\r\n                return \"Neveljaven vnos\";\r\n            case \"invalid_element\":\r\n                return `Neveljavna vrednost v ${issue.origin}`;\r\n            default:\r\n                return \"Neveljaven vnos\";\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"tecken\", verb: \"att ha\" },\r\n        file: { unit: \"bytes\", verb: \"att ha\" },\r\n        array: { unit: \"objekt\", verb: \"att innehålla\" },\r\n        set: { unit: \"objekt\", verb: \"att innehålla\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"antal\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"lista\";\r\n                }\r\n                if (data === null) {\r\n                    return \"null\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"reguljärt uttryck\",\r\n        email: \"e-postadress\",\r\n        url: \"URL\",\r\n        emoji: \"emoji\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"ISO-datum och tid\",\r\n        date: \"ISO-datum\",\r\n        time: \"ISO-tid\",\r\n        duration: \"ISO-varaktighet\",\r\n        ipv4: \"IPv4-intervall\",\r\n        ipv6: \"IPv6-intervall\",\r\n        cidrv4: \"IPv4-spektrum\",\r\n        cidrv6: \"IPv6-spektrum\",\r\n        base64: \"base64-kodad sträng\",\r\n        base64url: \"base64url-kodad sträng\",\r\n        json_string: \"JSON-sträng\",\r\n        e164: \"E.164-nummer\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"mall-literal\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `Ogiltig inmatning: förväntat ${issue.expected}, fick ${parsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `Ogiltig inmatning: förväntat ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `Ogiltigt val: förväntade en av ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `För stor(t): förväntade ${issue.origin ?? \"värdet\"} att ha ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"element\"}`;\r\n                }\r\n                return `För stor(t): förväntat ${issue.origin ?? \"värdet\"} att ha ${adj}${issue.maximum.toString()}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `För lite(t): förväntade ${issue.origin ?? \"värdet\"} att ha ${adj}${issue.minimum.toString()} ${sizing.unit}`;\r\n                }\r\n                return `För lite(t): förväntade ${issue.origin ?? \"värdet\"} att ha ${adj}${issue.minimum.toString()}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\") {\r\n                    return `Ogiltig sträng: måste börja med \"${_issue.prefix}\"`;\r\n                }\r\n                if (_issue.format === \"ends_with\")\r\n                    return `Ogiltig sträng: måste sluta med \"${_issue.suffix}\"`;\r\n                if (_issue.format === \"includes\")\r\n                    return `Ogiltig sträng: måste innehålla \"${_issue.includes}\"`;\r\n                if (_issue.format === \"regex\")\r\n                    return `Ogiltig sträng: måste matcha mönstret \"${_issue.pattern}\"`;\r\n                return `Ogiltig(t) ${Nouns[_issue.format] ?? issue.format}`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `Ogiltigt tal: måste vara en multipel av ${issue.divisor}`;\r\n            case \"unrecognized_keys\":\r\n                return `${issue.keys.length > 1 ? \"Okända nycklar\" : \"Okänd nyckel\"}: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `Ogiltig nyckel i ${issue.origin ?? \"värdet\"}`;\r\n            case \"invalid_union\":\r\n                return \"Ogiltig input\";\r\n            case \"invalid_element\":\r\n                return `Ogiltigt värde i ${issue.origin ?? \"värdet\"}`;\r\n            default:\r\n                return `Ogiltig input`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"எழுத்துக்கள்\", verb: \"கொண்டிருக்க வேண்டும்\" },\r\n        file: { unit: \"பைட்டுகள்\", verb: \"கொண்டிருக்க வேண்டும்\" },\r\n        array: { unit: \"உறுப்புகள்\", verb: \"கொண்டிருக்க வேண்டும்\" },\r\n        set: { unit: \"உறுப்புகள்\", verb: \"கொண்டிருக்க வேண்டும்\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"எண் அல்லாதது\" : \"எண்\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"அணி\";\r\n                }\r\n                if (data === null) {\r\n                    return \"வெறுமை\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"உள்ளீடு\",\r\n        email: \"மின்னஞ்சல் முகவரி\",\r\n        url: \"URL\",\r\n        emoji: \"emoji\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"ISO தேதி நேரம்\",\r\n        date: \"ISO தேதி\",\r\n        time: \"ISO நேரம்\",\r\n        duration: \"ISO கால அளவு\",\r\n        ipv4: \"IPv4 முகவரி\",\r\n        ipv6: \"IPv6 முகவரி\",\r\n        cidrv4: \"IPv4 வரம்பு\",\r\n        cidrv6: \"IPv6 வரம்பு\",\r\n        base64: \"base64-encoded சரம்\",\r\n        base64url: \"base64url-encoded சரம்\",\r\n        json_string: \"JSON சரம்\",\r\n        e164: \"E.164 எண்\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"input\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `தவறான உள்ளீடு: எதிர்பார்க்கப்பட்டது ${issue.expected}, பெறப்பட்டது ${parsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `தவறான உள்ளீடு: எதிர்பார்க்கப்பட்டது ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `தவறான விருப்பம்: எதிர்பார்க்கப்பட்டது ${util.joinValues(issue.values, \"|\")} இல் ஒன்று`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `மிக பெரியது: எதிர்பார்க்கப்பட்டது ${issue.origin ?? \"மதிப்பு\"} ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"உறுப்புகள்\"} ஆக இருக்க வேண்டும்`;\r\n                }\r\n                return `மிக பெரியது: எதிர்பார்க்கப்பட்டது ${issue.origin ?? \"மதிப்பு\"} ${adj}${issue.maximum.toString()} ஆக இருக்க வேண்டும்`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `மிகச் சிறியது: எதிர்பார்க்கப்பட்டது ${issue.origin} ${adj}${issue.minimum.toString()} ${sizing.unit} ஆக இருக்க வேண்டும்`; //\r\n                }\r\n                return `மிகச் சிறியது: எதிர்பார்க்கப்பட்டது ${issue.origin} ${adj}${issue.minimum.toString()} ஆக இருக்க வேண்டும்`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\")\r\n                    return `தவறான சரம்: \"${_issue.prefix}\" இல் தொடங்க வேண்டும்`;\r\n                if (_issue.format === \"ends_with\")\r\n                    return `தவறான சரம்: \"${_issue.suffix}\" இல் முடிவடைய வேண்டும்`;\r\n                if (_issue.format === \"includes\")\r\n                    return `தவறான சரம்: \"${_issue.includes}\" ஐ உள்ளடக்க வேண்டும்`;\r\n                if (_issue.format === \"regex\")\r\n                    return `தவறான சரம்: ${_issue.pattern} முறைபாட்டுடன் பொருந்த வேண்டும்`;\r\n                return `தவறான ${Nouns[_issue.format] ?? issue.format}`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `தவறான எண்: ${issue.divisor} இன் பலமாக இருக்க வேண்டும்`;\r\n            case \"unrecognized_keys\":\r\n                return `அடையாளம் தெரியாத விசை${issue.keys.length > 1 ? \"கள்\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `${issue.origin} இல் தவறான விசை`;\r\n            case \"invalid_union\":\r\n                return \"தவறான உள்ளீடு\";\r\n            case \"invalid_element\":\r\n                return `${issue.origin} இல் தவறான மதிப்பு`;\r\n            default:\r\n                return `தவறான உள்ளீடு`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"ตัวอักษร\", verb: \"ควรมี\" },\r\n        file: { unit: \"ไบต์\", verb: \"ควรมี\" },\r\n        array: { unit: \"รายการ\", verb: \"ควรมี\" },\r\n        set: { unit: \"รายการ\", verb: \"ควรมี\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"ไม่ใช่ตัวเลข (NaN)\" : \"ตัวเลข\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"อาร์เรย์ (Array)\";\r\n                }\r\n                if (data === null) {\r\n                    return \"ไม่มีค่า (null)\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"ข้อมูลที่ป้อน\",\r\n        email: \"ที่อยู่อีเมล\",\r\n        url: \"URL\",\r\n        emoji: \"อิโมจิ\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"วันที่เวลาแบบ ISO\",\r\n        date: \"วันที่แบบ ISO\",\r\n        time: \"เวลาแบบ ISO\",\r\n        duration: \"ช่วงเวลาแบบ ISO\",\r\n        ipv4: \"ที่อยู่ IPv4\",\r\n        ipv6: \"ที่อยู่ IPv6\",\r\n        cidrv4: \"ช่วง IP แบบ IPv4\",\r\n        cidrv6: \"ช่วง IP แบบ IPv6\",\r\n        base64: \"ข้อความแบบ Base64\",\r\n        base64url: \"ข้อความแบบ Base64 สำหรับ URL\",\r\n        json_string: \"ข้อความแบบ JSON\",\r\n        e164: \"เบอร์โทรศัพท์ระหว่างประเทศ (E.164)\",\r\n        jwt: \"โทเคน JWT\",\r\n        template_literal: \"ข้อมูลที่ป้อน\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `ประเภทข้อมูลไม่ถูกต้อง: ควรเป็น ${issue.expected} แต่ได้รับ ${parsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `ค่าไม่ถูกต้อง: ควรเป็น ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `ตัวเลือกไม่ถูกต้อง: ควรเป็นหนึ่งใน ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"ไม่เกิน\" : \"น้อยกว่า\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `เกินกำหนด: ${issue.origin ?? \"ค่า\"} ควรมี${adj} ${issue.maximum.toString()} ${sizing.unit ?? \"รายการ\"}`;\r\n                return `เกินกำหนด: ${issue.origin ?? \"ค่า\"} ควรมี${adj} ${issue.maximum.toString()}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \"อย่างน้อย\" : \"มากกว่า\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `น้อยกว่ากำหนด: ${issue.origin} ควรมี${adj} ${issue.minimum.toString()} ${sizing.unit}`;\r\n                }\r\n                return `น้อยกว่ากำหนด: ${issue.origin} ควรมี${adj} ${issue.minimum.toString()}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\") {\r\n                    return `รูปแบบไม่ถูกต้อง: ข้อความต้องขึ้นต้นด้วย \"${_issue.prefix}\"`;\r\n                }\r\n                if (_issue.format === \"ends_with\")\r\n                    return `รูปแบบไม่ถูกต้อง: ข้อความต้องลงท้ายด้วย \"${_issue.suffix}\"`;\r\n                if (_issue.format === \"includes\")\r\n                    return `รูปแบบไม่ถูกต้อง: ข้อความต้องมี \"${_issue.includes}\" อยู่ในข้อความ`;\r\n                if (_issue.format === \"regex\")\r\n                    return `รูปแบบไม่ถูกต้อง: ต้องตรงกับรูปแบบที่กำหนด ${_issue.pattern}`;\r\n                return `รูปแบบไม่ถูกต้อง: ${Nouns[_issue.format] ?? issue.format}`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `ตัวเลขไม่ถูกต้อง: ต้องเป็นจำนวนที่หารด้วย ${issue.divisor} ได้ลงตัว`;\r\n            case \"unrecognized_keys\":\r\n                return `พบคีย์ที่ไม่รู้จัก: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `คีย์ไม่ถูกต้องใน ${issue.origin}`;\r\n            case \"invalid_union\":\r\n                return \"ข้อมูลไม่ถูกต้อง: ไม่ตรงกับรูปแบบยูเนียนที่กำหนดไว้\";\r\n            case \"invalid_element\":\r\n                return `ข้อมูลไม่ถูกต้องใน ${issue.origin}`;\r\n            default:\r\n                return `ข้อมูลไม่ถูกต้อง`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nexport const parsedType = (data) => {\r\n    const t = typeof data;\r\n    switch (t) {\r\n        case \"number\": {\r\n            return Number.isNaN(data) ? \"NaN\" : \"number\";\r\n        }\r\n        case \"object\": {\r\n            if (Array.isArray(data)) {\r\n                return \"array\";\r\n            }\r\n            if (data === null) {\r\n                return \"null\";\r\n            }\r\n            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                return data.constructor.name;\r\n            }\r\n        }\r\n    }\r\n    return t;\r\n};\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"karakter\", verb: \"olmalı\" },\r\n        file: { unit: \"bayt\", verb: \"olmalı\" },\r\n        array: { unit: \"öğe\", verb: \"olmalı\" },\r\n        set: { unit: \"öğe\", verb: \"olmalı\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const Nouns = {\r\n        regex: \"girdi\",\r\n        email: \"e-posta adresi\",\r\n        url: \"URL\",\r\n        emoji: \"emoji\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"ISO tarih ve saat\",\r\n        date: \"ISO tarih\",\r\n        time: \"ISO saat\",\r\n        duration: \"ISO süre\",\r\n        ipv4: \"IPv4 adresi\",\r\n        ipv6: \"IPv6 adresi\",\r\n        cidrv4: \"IPv4 aralığı\",\r\n        cidrv6: \"IPv6 aralığı\",\r\n        base64: \"base64 ile şifrelenmiş metin\",\r\n        base64url: \"base64url ile şifrelenmiş metin\",\r\n        json_string: \"JSON dizesi\",\r\n        e164: \"E.164 sayısı\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"Şablon dizesi\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `Geçersiz değer: beklenen ${issue.expected}, alınan ${parsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `Geçersiz değer: beklenen ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `Geçersiz seçenek: aşağıdakilerden biri olmalı: ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `Çok büyük: beklenen ${issue.origin ?? \"değer\"} ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"öğe\"}`;\r\n                return `Çok büyük: beklenen ${issue.origin ?? \"değer\"} ${adj}${issue.maximum.toString()}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `Çok küçük: beklenen ${issue.origin} ${adj}${issue.minimum.toString()} ${sizing.unit}`;\r\n                return `Çok küçük: beklenen ${issue.origin} ${adj}${issue.minimum.toString()}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\")\r\n                    return `Geçersiz metin: \"${_issue.prefix}\" ile başlamalı`;\r\n                if (_issue.format === \"ends_with\")\r\n                    return `Geçersiz metin: \"${_issue.suffix}\" ile bitmeli`;\r\n                if (_issue.format === \"includes\")\r\n                    return `Geçersiz metin: \"${_issue.includes}\" içermeli`;\r\n                if (_issue.format === \"regex\")\r\n                    return `Geçersiz metin: ${_issue.pattern} desenine uymalı`;\r\n                return `Geçersiz ${Nouns[_issue.format] ?? issue.format}`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `Geçersiz sayı: ${issue.divisor} ile tam bölünebilmeli`;\r\n            case \"unrecognized_keys\":\r\n                return `Tanınmayan anahtar${issue.keys.length > 1 ? \"lar\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `${issue.origin} içinde geçersiz anahtar`;\r\n            case \"invalid_union\":\r\n                return \"Geçersiz değer\";\r\n            case \"invalid_element\":\r\n                return `${issue.origin} içinde geçersiz değer`;\r\n            default:\r\n                return `Geçersiz değer`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"символів\", verb: \"матиме\" },\r\n        file: { unit: \"байтів\", verb: \"матиме\" },\r\n        array: { unit: \"елементів\", verb: \"матиме\" },\r\n        set: { unit: \"елементів\", verb: \"матиме\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"число\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"масив\";\r\n                }\r\n                if (data === null) {\r\n                    return \"null\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"вхідні дані\",\r\n        email: \"адреса електронної пошти\",\r\n        url: \"URL\",\r\n        emoji: \"емодзі\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"дата та час ISO\",\r\n        date: \"дата ISO\",\r\n        time: \"час ISO\",\r\n        duration: \"тривалість ISO\",\r\n        ipv4: \"адреса IPv4\",\r\n        ipv6: \"адреса IPv6\",\r\n        cidrv4: \"діапазон IPv4\",\r\n        cidrv6: \"діапазон IPv6\",\r\n        base64: \"рядок у кодуванні base64\",\r\n        base64url: \"рядок у кодуванні base64url\",\r\n        json_string: \"рядок JSON\",\r\n        e164: \"номер E.164\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"вхідні дані\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `Неправильні вхідні дані: очікується ${issue.expected}, отримано ${parsedType(issue.input)}`;\r\n            // return `Неправильні вхідні дані: очікується ${issue.expected}, отримано ${util.getParsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `Неправильні вхідні дані: очікується ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `Неправильна опція: очікується одне з ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `Занадто велике: очікується, що ${issue.origin ?? \"значення\"} ${sizing.verb} ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"елементів\"}`;\r\n                return `Занадто велике: очікується, що ${issue.origin ?? \"значення\"} буде ${adj}${issue.maximum.toString()}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `Занадто мале: очікується, що ${issue.origin} ${sizing.verb} ${adj}${issue.minimum.toString()} ${sizing.unit}`;\r\n                }\r\n                return `Занадто мале: очікується, що ${issue.origin} буде ${adj}${issue.minimum.toString()}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\")\r\n                    return `Неправильний рядок: повинен починатися з \"${_issue.prefix}\"`;\r\n                if (_issue.format === \"ends_with\")\r\n                    return `Неправильний рядок: повинен закінчуватися на \"${_issue.suffix}\"`;\r\n                if (_issue.format === \"includes\")\r\n                    return `Неправильний рядок: повинен містити \"${_issue.includes}\"`;\r\n                if (_issue.format === \"regex\")\r\n                    return `Неправильний рядок: повинен відповідати шаблону ${_issue.pattern}`;\r\n                return `Неправильний ${Nouns[_issue.format] ?? issue.format}`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `Неправильне число: повинно бути кратним ${issue.divisor}`;\r\n            case \"unrecognized_keys\":\r\n                return `Нерозпізнаний ключ${issue.keys.length > 1 ? \"і\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `Неправильний ключ у ${issue.origin}`;\r\n            case \"invalid_union\":\r\n                return \"Неправильні вхідні дані\";\r\n            case \"invalid_element\":\r\n                return `Неправильне значення у ${issue.origin}`;\r\n            default:\r\n                return `Неправильні вхідні дані`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"حروف\", verb: \"ہونا\" },\r\n        file: { unit: \"بائٹس\", verb: \"ہونا\" },\r\n        array: { unit: \"آئٹمز\", verb: \"ہونا\" },\r\n        set: { unit: \"آئٹمز\", verb: \"ہونا\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"نمبر\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"آرے\";\r\n                }\r\n                if (data === null) {\r\n                    return \"نل\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"ان پٹ\",\r\n        email: \"ای میل ایڈریس\",\r\n        url: \"یو آر ایل\",\r\n        emoji: \"ایموجی\",\r\n        uuid: \"یو یو آئی ڈی\",\r\n        uuidv4: \"یو یو آئی ڈی وی 4\",\r\n        uuidv6: \"یو یو آئی ڈی وی 6\",\r\n        nanoid: \"نینو آئی ڈی\",\r\n        guid: \"جی یو آئی ڈی\",\r\n        cuid: \"سی یو آئی ڈی\",\r\n        cuid2: \"سی یو آئی ڈی 2\",\r\n        ulid: \"یو ایل آئی ڈی\",\r\n        xid: \"ایکس آئی ڈی\",\r\n        ksuid: \"کے ایس یو آئی ڈی\",\r\n        datetime: \"آئی ایس او ڈیٹ ٹائم\",\r\n        date: \"آئی ایس او تاریخ\",\r\n        time: \"آئی ایس او وقت\",\r\n        duration: \"آئی ایس او مدت\",\r\n        ipv4: \"آئی پی وی 4 ایڈریس\",\r\n        ipv6: \"آئی پی وی 6 ایڈریس\",\r\n        cidrv4: \"آئی پی وی 4 رینج\",\r\n        cidrv6: \"آئی پی وی 6 رینج\",\r\n        base64: \"بیس 64 ان کوڈڈ سٹرنگ\",\r\n        base64url: \"بیس 64 یو آر ایل ان کوڈڈ سٹرنگ\",\r\n        json_string: \"جے ایس او این سٹرنگ\",\r\n        e164: \"ای 164 نمبر\",\r\n        jwt: \"جے ڈبلیو ٹی\",\r\n        template_literal: \"ان پٹ\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `غلط ان پٹ: ${issue.expected} متوقع تھا، ${parsedType(issue.input)} موصول ہوا`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `غلط ان پٹ: ${util.stringifyPrimitive(issue.values[0])} متوقع تھا`;\r\n                return `غلط آپشن: ${util.joinValues(issue.values, \"|\")} میں سے ایک متوقع تھا`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `بہت بڑا: ${issue.origin ?? \"ویلیو\"} کے ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"عناصر\"} ہونے متوقع تھے`;\r\n                return `بہت بڑا: ${issue.origin ?? \"ویلیو\"} کا ${adj}${issue.maximum.toString()} ہونا متوقع تھا`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `بہت چھوٹا: ${issue.origin} کے ${adj}${issue.minimum.toString()} ${sizing.unit} ہونے متوقع تھے`;\r\n                }\r\n                return `بہت چھوٹا: ${issue.origin} کا ${adj}${issue.minimum.toString()} ہونا متوقع تھا`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\") {\r\n                    return `غلط سٹرنگ: \"${_issue.prefix}\" سے شروع ہونا چاہیے`;\r\n                }\r\n                if (_issue.format === \"ends_with\")\r\n                    return `غلط سٹرنگ: \"${_issue.suffix}\" پر ختم ہونا چاہیے`;\r\n                if (_issue.format === \"includes\")\r\n                    return `غلط سٹرنگ: \"${_issue.includes}\" شامل ہونا چاہیے`;\r\n                if (_issue.format === \"regex\")\r\n                    return `غلط سٹرنگ: پیٹرن ${_issue.pattern} سے میچ ہونا چاہیے`;\r\n                return `غلط ${Nouns[_issue.format] ?? issue.format}`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `غلط نمبر: ${issue.divisor} کا مضاعف ہونا چاہیے`;\r\n            case \"unrecognized_keys\":\r\n                return `غیر تسلیم شدہ کی${issue.keys.length > 1 ? \"ز\" : \"\"}: ${util.joinValues(issue.keys, \"، \")}`;\r\n            case \"invalid_key\":\r\n                return `${issue.origin} میں غلط کی`;\r\n            case \"invalid_union\":\r\n                return \"غلط ان پٹ\";\r\n            case \"invalid_element\":\r\n                return `${issue.origin} میں غلط ویلیو`;\r\n            default:\r\n                return `غلط ان پٹ`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"ký tự\", verb: \"có\" },\r\n        file: { unit: \"byte\", verb: \"có\" },\r\n        array: { unit: \"phần tử\", verb: \"có\" },\r\n        set: { unit: \"phần tử\", verb: \"có\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"số\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"mảng\";\r\n                }\r\n                if (data === null) {\r\n                    return \"null\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"đầu vào\",\r\n        email: \"địa chỉ email\",\r\n        url: \"URL\",\r\n        emoji: \"emoji\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"ngày giờ ISO\",\r\n        date: \"ngày ISO\",\r\n        time: \"giờ ISO\",\r\n        duration: \"khoảng thời gian ISO\",\r\n        ipv4: \"địa chỉ IPv4\",\r\n        ipv6: \"địa chỉ IPv6\",\r\n        cidrv4: \"dải IPv4\",\r\n        cidrv6: \"dải IPv6\",\r\n        base64: \"chuỗi mã hóa base64\",\r\n        base64url: \"chuỗi mã hóa base64url\",\r\n        json_string: \"chuỗi JSON\",\r\n        e164: \"số E.164\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"đầu vào\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `Đầu vào không hợp lệ: mong đợi ${issue.expected}, nhận được ${parsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `Đầu vào không hợp lệ: mong đợi ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `Tùy chọn không hợp lệ: mong đợi một trong các giá trị ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `Quá lớn: mong đợi ${issue.origin ?? \"giá trị\"} ${sizing.verb} ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"phần tử\"}`;\r\n                return `Quá lớn: mong đợi ${issue.origin ?? \"giá trị\"} ${adj}${issue.maximum.toString()}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `Quá nhỏ: mong đợi ${issue.origin} ${sizing.verb} ${adj}${issue.minimum.toString()} ${sizing.unit}`;\r\n                }\r\n                return `Quá nhỏ: mong đợi ${issue.origin} ${adj}${issue.minimum.toString()}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\")\r\n                    return `Chuỗi không hợp lệ: phải bắt đầu bằng \"${_issue.prefix}\"`;\r\n                if (_issue.format === \"ends_with\")\r\n                    return `Chuỗi không hợp lệ: phải kết thúc bằng \"${_issue.suffix}\"`;\r\n                if (_issue.format === \"includes\")\r\n                    return `Chuỗi không hợp lệ: phải bao gồm \"${_issue.includes}\"`;\r\n                if (_issue.format === \"regex\")\r\n                    return `Chuỗi không hợp lệ: phải khớp với mẫu ${_issue.pattern}`;\r\n                return `${Nouns[_issue.format] ?? issue.format} không hợp lệ`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `Số không hợp lệ: phải là bội số của ${issue.divisor}`;\r\n            case \"unrecognized_keys\":\r\n                return `Khóa không được nhận dạng: ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `Khóa không hợp lệ trong ${issue.origin}`;\r\n            case \"invalid_union\":\r\n                return \"Đầu vào không hợp lệ\";\r\n            case \"invalid_element\":\r\n                return `Giá trị không hợp lệ trong ${issue.origin}`;\r\n            default:\r\n                return `Đầu vào không hợp lệ`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"字符\", verb: \"包含\" },\r\n        file: { unit: \"字节\", verb: \"包含\" },\r\n        array: { unit: \"项\", verb: \"包含\" },\r\n        set: { unit: \"项\", verb: \"包含\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"非数字(NaN)\" : \"数字\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"数组\";\r\n                }\r\n                if (data === null) {\r\n                    return \"空值(null)\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"输入\",\r\n        email: \"电子邮件\",\r\n        url: \"URL\",\r\n        emoji: \"表情符号\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"ISO日期时间\",\r\n        date: \"ISO日期\",\r\n        time: \"ISO时间\",\r\n        duration: \"ISO时长\",\r\n        ipv4: \"IPv4地址\",\r\n        ipv6: \"IPv6地址\",\r\n        cidrv4: \"IPv4网段\",\r\n        cidrv6: \"IPv6网段\",\r\n        base64: \"base64编码字符串\",\r\n        base64url: \"base64url编码字符串\",\r\n        json_string: \"JSON字符串\",\r\n        e164: \"E.164号码\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"输入\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `无效输入：期望 ${issue.expected}，实际接收 ${parsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `无效输入：期望 ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `无效选项：期望以下之一 ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `数值过大：期望 ${issue.origin ?? \"值\"} ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"个元素\"}`;\r\n                return `数值过大：期望 ${issue.origin ?? \"值\"} ${adj}${issue.maximum.toString()}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `数值过小：期望 ${issue.origin} ${adj}${issue.minimum.toString()} ${sizing.unit}`;\r\n                }\r\n                return `数值过小：期望 ${issue.origin} ${adj}${issue.minimum.toString()}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\")\r\n                    return `无效字符串：必须以 \"${_issue.prefix}\" 开头`;\r\n                if (_issue.format === \"ends_with\")\r\n                    return `无效字符串：必须以 \"${_issue.suffix}\" 结尾`;\r\n                if (_issue.format === \"includes\")\r\n                    return `无效字符串：必须包含 \"${_issue.includes}\"`;\r\n                if (_issue.format === \"regex\")\r\n                    return `无效字符串：必须满足正则表达式 ${_issue.pattern}`;\r\n                return `无效${Nouns[_issue.format] ?? issue.format}`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `无效数字：必须是 ${issue.divisor} 的倍数`;\r\n            case \"unrecognized_keys\":\r\n                return `出现未知的键(key): ${util.joinValues(issue.keys, \", \")}`;\r\n            case \"invalid_key\":\r\n                return `${issue.origin} 中的键(key)无效`;\r\n            case \"invalid_union\":\r\n                return \"无效输入\";\r\n            case \"invalid_element\":\r\n                return `${issue.origin} 中包含无效值(value)`;\r\n            default:\r\n                return `无效输入`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "import * as util from \"../core/util.js\";\r\nconst error = () => {\r\n    const Sizable = {\r\n        string: { unit: \"字元\", verb: \"擁有\" },\r\n        file: { unit: \"位元組\", verb: \"擁有\" },\r\n        array: { unit: \"項目\", verb: \"擁有\" },\r\n        set: { unit: \"項目\", verb: \"擁有\" },\r\n    };\r\n    function getSizing(origin) {\r\n        return Sizable[origin] ?? null;\r\n    }\r\n    const parsedType = (data) => {\r\n        const t = typeof data;\r\n        switch (t) {\r\n            case \"number\": {\r\n                return Number.isNaN(data) ? \"NaN\" : \"number\";\r\n            }\r\n            case \"object\": {\r\n                if (Array.isArray(data)) {\r\n                    return \"array\";\r\n                }\r\n                if (data === null) {\r\n                    return \"null\";\r\n                }\r\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\r\n                    return data.constructor.name;\r\n                }\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    const Nouns = {\r\n        regex: \"輸入\",\r\n        email: \"郵件地址\",\r\n        url: \"URL\",\r\n        emoji: \"emoji\",\r\n        uuid: \"UUID\",\r\n        uuidv4: \"UUIDv4\",\r\n        uuidv6: \"UUIDv6\",\r\n        nanoid: \"nanoid\",\r\n        guid: \"GUID\",\r\n        cuid: \"cuid\",\r\n        cuid2: \"cuid2\",\r\n        ulid: \"ULID\",\r\n        xid: \"XID\",\r\n        ksuid: \"KSUID\",\r\n        datetime: \"ISO 日期時間\",\r\n        date: \"ISO 日期\",\r\n        time: \"ISO 時間\",\r\n        duration: \"ISO 期間\",\r\n        ipv4: \"IPv4 位址\",\r\n        ipv6: \"IPv6 位址\",\r\n        cidrv4: \"IPv4 範圍\",\r\n        cidrv6: \"IPv6 範圍\",\r\n        base64: \"base64 編碼字串\",\r\n        base64url: \"base64url 編碼字串\",\r\n        json_string: \"JSON 字串\",\r\n        e164: \"E.164 數值\",\r\n        jwt: \"JWT\",\r\n        template_literal: \"輸入\",\r\n    };\r\n    return (issue) => {\r\n        switch (issue.code) {\r\n            case \"invalid_type\":\r\n                return `無效的輸入值：預期為 ${issue.expected}，但收到 ${parsedType(issue.input)}`;\r\n            case \"invalid_value\":\r\n                if (issue.values.length === 1)\r\n                    return `無效的輸入值：預期為 ${util.stringifyPrimitive(issue.values[0])}`;\r\n                return `無效的選項：預期為以下其中之一 ${util.joinValues(issue.values, \"|\")}`;\r\n            case \"too_big\": {\r\n                const adj = issue.inclusive ? \"<=\" : \"<\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing)\r\n                    return `數值過大：預期 ${issue.origin ?? \"值\"} 應為 ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"個元素\"}`;\r\n                return `數值過大：預期 ${issue.origin ?? \"值\"} 應為 ${adj}${issue.maximum.toString()}`;\r\n            }\r\n            case \"too_small\": {\r\n                const adj = issue.inclusive ? \">=\" : \">\";\r\n                const sizing = getSizing(issue.origin);\r\n                if (sizing) {\r\n                    return `數值過小：預期 ${issue.origin} 應為 ${adj}${issue.minimum.toString()} ${sizing.unit}`;\r\n                }\r\n                return `數值過小：預期 ${issue.origin} 應為 ${adj}${issue.minimum.toString()}`;\r\n            }\r\n            case \"invalid_format\": {\r\n                const _issue = issue;\r\n                if (_issue.format === \"starts_with\") {\r\n                    return `無效的字串：必須以 \"${_issue.prefix}\" 開頭`;\r\n                }\r\n                if (_issue.format === \"ends_with\")\r\n                    return `無效的字串：必須以 \"${_issue.suffix}\" 結尾`;\r\n                if (_issue.format === \"includes\")\r\n                    return `無效的字串：必須包含 \"${_issue.includes}\"`;\r\n                if (_issue.format === \"regex\")\r\n                    return `無效的字串：必須符合格式 ${_issue.pattern}`;\r\n                return `無效的 ${Nouns[_issue.format] ?? issue.format}`;\r\n            }\r\n            case \"not_multiple_of\":\r\n                return `無效的數字：必須為 ${issue.divisor} 的倍數`;\r\n            case \"unrecognized_keys\":\r\n                return `無法識別的鍵值${issue.keys.length > 1 ? \"們\" : \"\"}：${util.joinValues(issue.keys, \"、\")}`;\r\n            case \"invalid_key\":\r\n                return `${issue.origin} 中有無效的鍵值`;\r\n            case \"invalid_union\":\r\n                return \"無效的輸入值\";\r\n            case \"invalid_element\":\r\n                return `${issue.origin} 中有無效的值`;\r\n            default:\r\n                return `無效的輸入值`;\r\n        }\r\n    };\r\n};\r\nexport default function () {\r\n    return {\r\n        localeError: error(),\r\n    };\r\n}\r\n", "export const $output = Symbol(\"ZodOutput\");\r\nexport const $input = Symbol(\"ZodInput\");\r\nexport class $ZodRegistry {\r\n    constructor() {\r\n        this._map = new Map();\r\n        this._idmap = new Map();\r\n    }\r\n    add(schema, ..._meta) {\r\n        const meta = _meta[0];\r\n        this._map.set(schema, meta);\r\n        if (meta && typeof meta === \"object\" && \"id\" in meta) {\r\n            if (this._idmap.has(meta.id)) {\r\n                throw new Error(`ID ${meta.id} already exists in the registry`);\r\n            }\r\n            this._idmap.set(meta.id, schema);\r\n        }\r\n        return this;\r\n    }\r\n    clear() {\r\n        this._map = new Map();\r\n        this._idmap = new Map();\r\n        return this;\r\n    }\r\n    remove(schema) {\r\n        const meta = this._map.get(schema);\r\n        if (meta && typeof meta === \"object\" && \"id\" in meta) {\r\n            this._idmap.delete(meta.id);\r\n        }\r\n        this._map.delete(schema);\r\n        return this;\r\n    }\r\n    get(schema) {\r\n        // return this._map.get(schema) as any;\r\n        // inherit metadata\r\n        const p = schema._zod.parent;\r\n        if (p) {\r\n            const pm = { ...(this.get(p) ?? {}) };\r\n            delete pm.id; // do not inherit id\r\n            return { ...pm, ...this._map.get(schema) };\r\n        }\r\n        return this._map.get(schema);\r\n    }\r\n    has(schema) {\r\n        return this._map.has(schema);\r\n    }\r\n}\r\n// registries\r\nexport function registry() {\r\n    return new $ZodRegistry();\r\n}\r\nexport const globalRegistry = /*@__PURE__*/ registry();\r\n", "import * as checks from \"./checks.js\";\r\nimport * as schemas from \"./schemas.js\";\r\nimport * as util from \"./util.js\";\r\nexport function _string(Class, params) {\r\n    return new Class({\r\n        type: \"string\",\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _coercedString(Class, params) {\r\n    return new Class({\r\n        type: \"string\",\r\n        coerce: true,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _email(Class, params) {\r\n    return new Class({\r\n        type: \"string\",\r\n        format: \"email\",\r\n        check: \"string_format\",\r\n        abort: false,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _guid(Class, params) {\r\n    return new Class({\r\n        type: \"string\",\r\n        format: \"guid\",\r\n        check: \"string_format\",\r\n        abort: false,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _uuid(Class, params) {\r\n    return new Class({\r\n        type: \"string\",\r\n        format: \"uuid\",\r\n        check: \"string_format\",\r\n        abort: false,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _uuidv4(Class, params) {\r\n    return new Class({\r\n        type: \"string\",\r\n        format: \"uuid\",\r\n        check: \"string_format\",\r\n        abort: false,\r\n        version: \"v4\",\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _uuidv6(Class, params) {\r\n    return new Class({\r\n        type: \"string\",\r\n        format: \"uuid\",\r\n        check: \"string_format\",\r\n        abort: false,\r\n        version: \"v6\",\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _uuidv7(Class, params) {\r\n    return new Class({\r\n        type: \"string\",\r\n        format: \"uuid\",\r\n        check: \"string_format\",\r\n        abort: false,\r\n        version: \"v7\",\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _url(Class, params) {\r\n    return new Class({\r\n        type: \"string\",\r\n        format: \"url\",\r\n        check: \"string_format\",\r\n        abort: false,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _emoji(Class, params) {\r\n    return new Class({\r\n        type: \"string\",\r\n        format: \"emoji\",\r\n        check: \"string_format\",\r\n        abort: false,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _nanoid(Class, params) {\r\n    return new Class({\r\n        type: \"string\",\r\n        format: \"nanoid\",\r\n        check: \"string_format\",\r\n        abort: false,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _cuid(Class, params) {\r\n    return new Class({\r\n        type: \"string\",\r\n        format: \"cuid\",\r\n        check: \"string_format\",\r\n        abort: false,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _cuid2(Class, params) {\r\n    return new Class({\r\n        type: \"string\",\r\n        format: \"cuid2\",\r\n        check: \"string_format\",\r\n        abort: false,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _ulid(Class, params) {\r\n    return new Class({\r\n        type: \"string\",\r\n        format: \"ulid\",\r\n        check: \"string_format\",\r\n        abort: false,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _xid(Class, params) {\r\n    return new Class({\r\n        type: \"string\",\r\n        format: \"xid\",\r\n        check: \"string_format\",\r\n        abort: false,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _ksuid(Class, params) {\r\n    return new Class({\r\n        type: \"string\",\r\n        format: \"ksuid\",\r\n        check: \"string_format\",\r\n        abort: false,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _ipv4(Class, params) {\r\n    return new Class({\r\n        type: \"string\",\r\n        format: \"ipv4\",\r\n        check: \"string_format\",\r\n        abort: false,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _ipv6(Class, params) {\r\n    return new Class({\r\n        type: \"string\",\r\n        format: \"ipv6\",\r\n        check: \"string_format\",\r\n        abort: false,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _cidrv4(Class, params) {\r\n    return new Class({\r\n        type: \"string\",\r\n        format: \"cidrv4\",\r\n        check: \"string_format\",\r\n        abort: false,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _cidrv6(Class, params) {\r\n    return new Class({\r\n        type: \"string\",\r\n        format: \"cidrv6\",\r\n        check: \"string_format\",\r\n        abort: false,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _base64(Class, params) {\r\n    return new Class({\r\n        type: \"string\",\r\n        format: \"base64\",\r\n        check: \"string_format\",\r\n        abort: false,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _base64url(Class, params) {\r\n    return new Class({\r\n        type: \"string\",\r\n        format: \"base64url\",\r\n        check: \"string_format\",\r\n        abort: false,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _e164(Class, params) {\r\n    return new Class({\r\n        type: \"string\",\r\n        format: \"e164\",\r\n        check: \"string_format\",\r\n        abort: false,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _jwt(Class, params) {\r\n    return new Class({\r\n        type: \"string\",\r\n        format: \"jwt\",\r\n        check: \"string_format\",\r\n        abort: false,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport const TimePrecision = {\r\n    Any: null,\r\n    Minute: -1,\r\n    Second: 0,\r\n    Millisecond: 3,\r\n    Microsecond: 6,\r\n};\r\nexport function _isoDateTime(Class, params) {\r\n    return new Class({\r\n        type: \"string\",\r\n        format: \"datetime\",\r\n        check: \"string_format\",\r\n        offset: false,\r\n        local: false,\r\n        precision: null,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _isoDate(Class, params) {\r\n    return new Class({\r\n        type: \"string\",\r\n        format: \"date\",\r\n        check: \"string_format\",\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _isoTime(Class, params) {\r\n    return new Class({\r\n        type: \"string\",\r\n        format: \"time\",\r\n        check: \"string_format\",\r\n        precision: null,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _isoDuration(Class, params) {\r\n    return new Class({\r\n        type: \"string\",\r\n        format: \"duration\",\r\n        check: \"string_format\",\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _number(Class, params) {\r\n    return new Class({\r\n        type: \"number\",\r\n        checks: [],\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _coercedNumber(Class, params) {\r\n    return new Class({\r\n        type: \"number\",\r\n        coerce: true,\r\n        checks: [],\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _int(Class, params) {\r\n    return new Class({\r\n        type: \"number\",\r\n        check: \"number_format\",\r\n        abort: false,\r\n        format: \"safeint\",\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _float32(Class, params) {\r\n    return new Class({\r\n        type: \"number\",\r\n        check: \"number_format\",\r\n        abort: false,\r\n        format: \"float32\",\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _float64(Class, params) {\r\n    return new Class({\r\n        type: \"number\",\r\n        check: \"number_format\",\r\n        abort: false,\r\n        format: \"float64\",\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _int32(Class, params) {\r\n    return new Class({\r\n        type: \"number\",\r\n        check: \"number_format\",\r\n        abort: false,\r\n        format: \"int32\",\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _uint32(Class, params) {\r\n    return new Class({\r\n        type: \"number\",\r\n        check: \"number_format\",\r\n        abort: false,\r\n        format: \"uint32\",\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _boolean(Class, params) {\r\n    return new Class({\r\n        type: \"boolean\",\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _coercedBoolean(Class, params) {\r\n    return new Class({\r\n        type: \"boolean\",\r\n        coerce: true,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _bigint(Class, params) {\r\n    return new Class({\r\n        type: \"bigint\",\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _coercedBigint(Class, params) {\r\n    return new Class({\r\n        type: \"bigint\",\r\n        coerce: true,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _int64(Class, params) {\r\n    return new Class({\r\n        type: \"bigint\",\r\n        check: \"bigint_format\",\r\n        abort: false,\r\n        format: \"int64\",\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _uint64(Class, params) {\r\n    return new Class({\r\n        type: \"bigint\",\r\n        check: \"bigint_format\",\r\n        abort: false,\r\n        format: \"uint64\",\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _symbol(Class, params) {\r\n    return new Class({\r\n        type: \"symbol\",\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _undefined(Class, params) {\r\n    return new Class({\r\n        type: \"undefined\",\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _null(Class, params) {\r\n    return new Class({\r\n        type: \"null\",\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _any(Class) {\r\n    return new Class({\r\n        type: \"any\",\r\n    });\r\n}\r\nexport function _unknown(Class) {\r\n    return new Class({\r\n        type: \"unknown\",\r\n    });\r\n}\r\nexport function _never(Class, params) {\r\n    return new Class({\r\n        type: \"never\",\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _void(Class, params) {\r\n    return new Class({\r\n        type: \"void\",\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _date(Class, params) {\r\n    return new Class({\r\n        type: \"date\",\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _coercedDate(Class, params) {\r\n    return new Class({\r\n        type: \"date\",\r\n        coerce: true,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _nan(Class, params) {\r\n    return new Class({\r\n        type: \"nan\",\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _lt(value, params) {\r\n    return new checks.$ZodCheckLessThan({\r\n        check: \"less_than\",\r\n        ...util.normalizeParams(params),\r\n        value,\r\n        inclusive: false,\r\n    });\r\n}\r\nexport function _lte(value, params) {\r\n    return new checks.$ZodCheckLessThan({\r\n        check: \"less_than\",\r\n        ...util.normalizeParams(params),\r\n        value,\r\n        inclusive: true,\r\n    });\r\n}\r\nexport { \r\n/** @deprecated Use `z.lte()` instead. */\r\n_lte as _max, };\r\nexport function _gt(value, params) {\r\n    return new checks.$ZodCheckGreaterThan({\r\n        check: \"greater_than\",\r\n        ...util.normalizeParams(params),\r\n        value,\r\n        inclusive: false,\r\n    });\r\n}\r\nexport function _gte(value, params) {\r\n    return new checks.$ZodCheckGreaterThan({\r\n        check: \"greater_than\",\r\n        ...util.normalizeParams(params),\r\n        value,\r\n        inclusive: true,\r\n    });\r\n}\r\nexport { \r\n/** @deprecated Use `z.gte()` instead. */\r\n_gte as _min, };\r\nexport function _positive(params) {\r\n    return _gt(0, params);\r\n}\r\n// negative\r\nexport function _negative(params) {\r\n    return _lt(0, params);\r\n}\r\n// nonpositive\r\nexport function _nonpositive(params) {\r\n    return _lte(0, params);\r\n}\r\n// nonnegative\r\nexport function _nonnegative(params) {\r\n    return _gte(0, params);\r\n}\r\nexport function _multipleOf(value, params) {\r\n    return new checks.$ZodCheckMultipleOf({\r\n        check: \"multiple_of\",\r\n        ...util.normalizeParams(params),\r\n        value,\r\n    });\r\n}\r\nexport function _maxSize(maximum, params) {\r\n    return new checks.$ZodCheckMaxSize({\r\n        check: \"max_size\",\r\n        ...util.normalizeParams(params),\r\n        maximum,\r\n    });\r\n}\r\nexport function _minSize(minimum, params) {\r\n    return new checks.$ZodCheckMinSize({\r\n        check: \"min_size\",\r\n        ...util.normalizeParams(params),\r\n        minimum,\r\n    });\r\n}\r\nexport function _size(size, params) {\r\n    return new checks.$ZodCheckSizeEquals({\r\n        check: \"size_equals\",\r\n        ...util.normalizeParams(params),\r\n        size,\r\n    });\r\n}\r\nexport function _maxLength(maximum, params) {\r\n    const ch = new checks.$ZodCheckMaxLength({\r\n        check: \"max_length\",\r\n        ...util.normalizeParams(params),\r\n        maximum,\r\n    });\r\n    return ch;\r\n}\r\nexport function _minLength(minimum, params) {\r\n    return new checks.$ZodCheckMinLength({\r\n        check: \"min_length\",\r\n        ...util.normalizeParams(params),\r\n        minimum,\r\n    });\r\n}\r\nexport function _length(length, params) {\r\n    return new checks.$ZodCheckLengthEquals({\r\n        check: \"length_equals\",\r\n        ...util.normalizeParams(params),\r\n        length,\r\n    });\r\n}\r\nexport function _regex(pattern, params) {\r\n    return new checks.$ZodCheckRegex({\r\n        check: \"string_format\",\r\n        format: \"regex\",\r\n        ...util.normalizeParams(params),\r\n        pattern,\r\n    });\r\n}\r\nexport function _lowercase(params) {\r\n    return new checks.$ZodCheckLowerCase({\r\n        check: \"string_format\",\r\n        format: \"lowercase\",\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _uppercase(params) {\r\n    return new checks.$ZodCheckUpperCase({\r\n        check: \"string_format\",\r\n        format: \"uppercase\",\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _includes(includes, params) {\r\n    return new checks.$ZodCheckIncludes({\r\n        check: \"string_format\",\r\n        format: \"includes\",\r\n        ...util.normalizeParams(params),\r\n        includes,\r\n    });\r\n}\r\nexport function _startsWith(prefix, params) {\r\n    return new checks.$ZodCheckStartsWith({\r\n        check: \"string_format\",\r\n        format: \"starts_with\",\r\n        ...util.normalizeParams(params),\r\n        prefix,\r\n    });\r\n}\r\nexport function _endsWith(suffix, params) {\r\n    return new checks.$ZodCheckEndsWith({\r\n        check: \"string_format\",\r\n        format: \"ends_with\",\r\n        ...util.normalizeParams(params),\r\n        suffix,\r\n    });\r\n}\r\nexport function _property(property, schema, params) {\r\n    return new checks.$ZodCheckProperty({\r\n        check: \"property\",\r\n        property,\r\n        schema,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _mime(types, params) {\r\n    return new checks.$ZodCheckMimeType({\r\n        check: \"mime_type\",\r\n        mime: types,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _overwrite(tx) {\r\n    return new checks.$ZodCheckOverwrite({\r\n        check: \"overwrite\",\r\n        tx,\r\n    });\r\n}\r\n// normalize\r\nexport function _normalize(form) {\r\n    return _overwrite((input) => input.normalize(form));\r\n}\r\n// trim\r\nexport function _trim() {\r\n    return _overwrite((input) => input.trim());\r\n}\r\n// toLowerCase\r\nexport function _toLowerCase() {\r\n    return _overwrite((input) => input.toLowerCase());\r\n}\r\n// toUpperCase\r\nexport function _toUpperCase() {\r\n    return _overwrite((input) => input.toUpperCase());\r\n}\r\nexport function _array(Class, element, params) {\r\n    return new Class({\r\n        type: \"array\",\r\n        element,\r\n        // get element() {\r\n        //   return element;\r\n        // },\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _union(Class, options, params) {\r\n    return new Class({\r\n        type: \"union\",\r\n        options,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _discriminatedUnion(Class, discriminator, options, params) {\r\n    return new Class({\r\n        type: \"union\",\r\n        options,\r\n        discriminator,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _intersection(Class, left, right) {\r\n    return new Class({\r\n        type: \"intersection\",\r\n        left,\r\n        right,\r\n    });\r\n}\r\n// export function _tuple(\r\n//   Class: util.SchemaClass<schemas.$ZodTuple>,\r\n//   items: [],\r\n//   params?: string | $ZodTupleParams\r\n// ): schemas.$ZodTuple<[], null>;\r\nexport function _tuple(Class, items, _paramsOrRest, _params) {\r\n    const hasRest = _paramsOrRest instanceof schemas.$ZodType;\r\n    const params = hasRest ? _params : _paramsOrRest;\r\n    const rest = hasRest ? _paramsOrRest : null;\r\n    return new Class({\r\n        type: \"tuple\",\r\n        items,\r\n        rest,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _record(Class, keyType, valueType, params) {\r\n    return new Class({\r\n        type: \"record\",\r\n        keyType,\r\n        valueType,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _map(Class, keyType, valueType, params) {\r\n    return new Class({\r\n        type: \"map\",\r\n        keyType,\r\n        valueType,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _set(Class, valueType, params) {\r\n    return new Class({\r\n        type: \"set\",\r\n        valueType,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _enum(Class, values, params) {\r\n    const entries = Array.isArray(values) ? Object.fromEntries(values.map((v) => [v, v])) : values;\r\n    // if (Array.isArray(values)) {\r\n    //   for (const value of values) {\r\n    //     entries[value] = value;\r\n    //   }\r\n    // } else {\r\n    //   Object.assign(entries, values);\r\n    // }\r\n    // const entries: util.EnumLike = {};\r\n    // for (const val of values) {\r\n    //   entries[val] = val;\r\n    // }\r\n    return new Class({\r\n        type: \"enum\",\r\n        entries,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\n/** @deprecated This API has been merged into `z.enum()`. Use `z.enum()` instead.\r\n *\r\n * ```ts\r\n * enum Colors { red, green, blue }\r\n * z.enum(Colors);\r\n * ```\r\n */\r\nexport function _nativeEnum(Class, entries, params) {\r\n    return new Class({\r\n        type: \"enum\",\r\n        entries,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _literal(Class, value, params) {\r\n    return new Class({\r\n        type: \"literal\",\r\n        values: Array.isArray(value) ? value : [value],\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _file(Class, params) {\r\n    return new Class({\r\n        type: \"file\",\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _transform(Class, fn) {\r\n    return new Class({\r\n        type: \"transform\",\r\n        transform: fn,\r\n    });\r\n}\r\nexport function _optional(Class, innerType) {\r\n    return new Class({\r\n        type: \"optional\",\r\n        innerType,\r\n    });\r\n}\r\nexport function _nullable(Class, innerType) {\r\n    return new Class({\r\n        type: \"nullable\",\r\n        innerType,\r\n    });\r\n}\r\nexport function _default(Class, innerType, defaultValue) {\r\n    return new Class({\r\n        type: \"default\",\r\n        innerType,\r\n        get defaultValue() {\r\n            return typeof defaultValue === \"function\" ? defaultValue() : defaultValue;\r\n        },\r\n    });\r\n}\r\nexport function _nonoptional(Class, innerType, params) {\r\n    return new Class({\r\n        type: \"nonoptional\",\r\n        innerType,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _success(Class, innerType) {\r\n    return new Class({\r\n        type: \"success\",\r\n        innerType,\r\n    });\r\n}\r\nexport function _catch(Class, innerType, catchValue) {\r\n    return new Class({\r\n        type: \"catch\",\r\n        innerType,\r\n        catchValue: (typeof catchValue === \"function\" ? catchValue : () => catchValue),\r\n    });\r\n}\r\nexport function _pipe(Class, in_, out) {\r\n    return new Class({\r\n        type: \"pipe\",\r\n        in: in_,\r\n        out,\r\n    });\r\n}\r\nexport function _readonly(Class, innerType) {\r\n    return new Class({\r\n        type: \"readonly\",\r\n        innerType,\r\n    });\r\n}\r\nexport function _templateLiteral(Class, parts, params) {\r\n    return new Class({\r\n        type: \"template_literal\",\r\n        parts,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport function _lazy(Class, getter) {\r\n    return new Class({\r\n        type: \"lazy\",\r\n        getter,\r\n    });\r\n}\r\nexport function _promise(Class, innerType) {\r\n    return new Class({\r\n        type: \"promise\",\r\n        innerType,\r\n    });\r\n}\r\nexport function _custom(Class, fn, _params) {\r\n    const norm = util.normalizeParams(_params);\r\n    norm.abort ?? (norm.abort = true); // default to abort:false\r\n    const schema = new Class({\r\n        type: \"custom\",\r\n        check: \"custom\",\r\n        fn: fn,\r\n        ...norm,\r\n    });\r\n    return schema;\r\n}\r\n// export function _refine<T>(\r\n//   Class: util.SchemaClass<schemas.$ZodCustom>,\r\n//   fn: (arg: NoInfer<T>) => util.MaybeAsync<unknown>,\r\n//   _params: string | $ZodCustomParams = {}\r\n// ): checks.$ZodCheck<T> {\r\n//   return _custom(Class, fn, _params);\r\n// }\r\n// same as _custom but defaults to abort:false\r\nexport function _refine(Class, fn, _params) {\r\n    const schema = new Class({\r\n        type: \"custom\",\r\n        check: \"custom\",\r\n        fn: fn,\r\n        ...util.normalizeParams(_params),\r\n    });\r\n    return schema;\r\n}\r\nexport function _stringbool(Classes, _params) {\r\n    const params = util.normalizeParams(_params);\r\n    let truthyArray = params.truthy ?? [\"true\", \"1\", \"yes\", \"on\", \"y\", \"enabled\"];\r\n    let falsyArray = params.falsy ?? [\"false\", \"0\", \"no\", \"off\", \"n\", \"disabled\"];\r\n    if (params.case !== \"sensitive\") {\r\n        truthyArray = truthyArray.map((v) => (typeof v === \"string\" ? v.toLowerCase() : v));\r\n        falsyArray = falsyArray.map((v) => (typeof v === \"string\" ? v.toLowerCase() : v));\r\n    }\r\n    const truthySet = new Set(truthyArray);\r\n    const falsySet = new Set(falsyArray);\r\n    const _Pipe = Classes.Pipe ?? schemas.$ZodPipe;\r\n    const _Boolean = Classes.Boolean ?? schemas.$ZodBoolean;\r\n    const _String = Classes.String ?? schemas.$ZodString;\r\n    const _Transform = Classes.Transform ?? schemas.$ZodTransform;\r\n    const tx = new _Transform({\r\n        type: \"transform\",\r\n        transform: (input, payload) => {\r\n            let data = input;\r\n            if (params.case !== \"sensitive\")\r\n                data = data.toLowerCase();\r\n            if (truthySet.has(data)) {\r\n                return true;\r\n            }\r\n            else if (falsySet.has(data)) {\r\n                return false;\r\n            }\r\n            else {\r\n                payload.issues.push({\r\n                    code: \"invalid_value\",\r\n                    expected: \"stringbool\",\r\n                    values: [...truthySet, ...falsySet],\r\n                    input: payload.value,\r\n                    inst: tx,\r\n                });\r\n                return {};\r\n            }\r\n        },\r\n        error: params.error,\r\n    });\r\n    // params.error;\r\n    const innerPipe = new _Pipe({\r\n        type: \"pipe\",\r\n        in: new _String({ type: \"string\", error: params.error }),\r\n        out: tx,\r\n        error: params.error,\r\n    });\r\n    const outerPipe = new _Pipe({\r\n        type: \"pipe\",\r\n        in: innerPipe,\r\n        out: new _Boolean({\r\n            type: \"boolean\",\r\n            error: params.error,\r\n        }),\r\n        error: params.error,\r\n    });\r\n    return outerPipe;\r\n}\r\nexport function _stringFormat(Class, format, fnOrRegex, _params = {}) {\r\n    const params = util.normalizeParams(_params);\r\n    const def = {\r\n        ...util.normalizeParams(_params),\r\n        check: \"string_format\",\r\n        type: \"string\",\r\n        format,\r\n        fn: typeof fnOrRegex === \"function\" ? fnOrRegex : (val) => fnOrRegex.test(val),\r\n        ...params,\r\n    };\r\n    if (fnOrRegex instanceof RegExp) {\r\n        def.pattern = fnOrRegex;\r\n    }\r\n    const inst = new Class(def);\r\n    return inst;\r\n}\r\n", "import { _array, _tuple, _unknown } from \"./api.js\";\r\nimport { parse, parseAsync } from \"./parse.js\";\r\nimport * as schemas from \"./schemas.js\";\r\nimport { $ZodTuple } from \"./schemas.js\";\r\nexport class $ZodFunction {\r\n    constructor(def) {\r\n        this._def = def;\r\n        this.def = def;\r\n    }\r\n    implement(func) {\r\n        if (typeof func !== \"function\") {\r\n            throw new Error(\"implement() must be called with a function\");\r\n        }\r\n        const impl = ((...args) => {\r\n            const parsedArgs = this._def.input ? parse(this._def.input, args, undefined, { callee: impl }) : args;\r\n            if (!Array.isArray(parsedArgs)) {\r\n                throw new Error(\"Invalid arguments schema: not an array or tuple schema.\");\r\n            }\r\n            const output = func(...parsedArgs);\r\n            return this._def.output ? parse(this._def.output, output, undefined, { callee: impl }) : output;\r\n        });\r\n        return impl;\r\n    }\r\n    implementAsync(func) {\r\n        if (typeof func !== \"function\") {\r\n            throw new Error(\"implement() must be called with a function\");\r\n        }\r\n        const impl = (async (...args) => {\r\n            const parsedArgs = this._def.input ? await parseAsync(this._def.input, args, undefined, { callee: impl }) : args;\r\n            if (!Array.isArray(parsedArgs)) {\r\n                throw new Error(\"Invalid arguments schema: not an array or tuple schema.\");\r\n            }\r\n            const output = await func(...parsedArgs);\r\n            return this._def.output ? parseAsync(this._def.output, output, undefined, { callee: impl }) : output;\r\n        });\r\n        return impl;\r\n    }\r\n    input(...args) {\r\n        const F = this.constructor;\r\n        if (Array.isArray(args[0])) {\r\n            return new F({\r\n                type: \"function\",\r\n                input: new $ZodTuple({\r\n                    type: \"tuple\",\r\n                    items: args[0],\r\n                    rest: args[1],\r\n                }),\r\n                output: this._def.output,\r\n            });\r\n        }\r\n        return new F({\r\n            type: \"function\",\r\n            input: args[0],\r\n            output: this._def.output,\r\n        });\r\n    }\r\n    output(output) {\r\n        const F = this.constructor;\r\n        return new F({\r\n            type: \"function\",\r\n            input: this._def.input,\r\n            output,\r\n        });\r\n    }\r\n}\r\nfunction _function(params) {\r\n    return new $ZodFunction({\r\n        type: \"function\",\r\n        input: Array.isArray(params?.input)\r\n            ? _tuple(schemas.$ZodTuple, params?.input)\r\n            : (params?.input ?? _array(schemas.$ZodArray, _unknown(schemas.$ZodUnknown))),\r\n        output: params?.output ?? _unknown(schemas.$ZodUnknown),\r\n    });\r\n}\r\nexport { _function as function };\r\n", "import { $ZodRegistry, globalRegistry } from \"./registries.js\";\r\nimport { getEnumValues } from \"./util.js\";\r\nexport class JSONSchemaGenerator {\r\n    constructor(params) {\r\n        this.counter = 0;\r\n        this.metadataRegistry = params?.metadata ?? globalRegistry;\r\n        this.target = params?.target ?? \"draft-2020-12\";\r\n        this.unrepresentable = params?.unrepresentable ?? \"throw\";\r\n        this.override = params?.override ?? (() => { });\r\n        this.io = params?.io ?? \"output\";\r\n        this.seen = new Map();\r\n    }\r\n    process(schema, _params = { path: [], schemaPath: [] }) {\r\n        var _a;\r\n        const def = schema._zod.def;\r\n        const formatMap = {\r\n            guid: \"uuid\",\r\n            url: \"uri\",\r\n            datetime: \"date-time\",\r\n            json_string: \"json-string\",\r\n            regex: \"\", // do not set\r\n        };\r\n        // check for schema in seens\r\n        const seen = this.seen.get(schema);\r\n        if (seen) {\r\n            seen.count++;\r\n            // check if cycle\r\n            const isCycle = _params.schemaPath.includes(schema);\r\n            if (isCycle) {\r\n                seen.cycle = _params.path;\r\n            }\r\n            return seen.schema;\r\n        }\r\n        // initialize\r\n        const result = { schema: {}, count: 1, cycle: undefined, path: _params.path };\r\n        this.seen.set(schema, result);\r\n        // custom method overrides default behavior\r\n        const overrideSchema = schema._zod.toJSONSchema?.();\r\n        if (overrideSchema) {\r\n            result.schema = overrideSchema;\r\n        }\r\n        else {\r\n            const params = {\r\n                ..._params,\r\n                schemaPath: [..._params.schemaPath, schema],\r\n                path: _params.path,\r\n            };\r\n            const parent = schema._zod.parent;\r\n            if (parent) {\r\n                // schema was cloned from another schema\r\n                result.ref = parent;\r\n                this.process(parent, params);\r\n                this.seen.get(parent).isParent = true;\r\n            }\r\n            else {\r\n                const _json = result.schema;\r\n                switch (def.type) {\r\n                    case \"string\": {\r\n                        const json = _json;\r\n                        json.type = \"string\";\r\n                        const { minimum, maximum, format, patterns, contentEncoding } = schema._zod\r\n                            .bag;\r\n                        if (typeof minimum === \"number\")\r\n                            json.minLength = minimum;\r\n                        if (typeof maximum === \"number\")\r\n                            json.maxLength = maximum;\r\n                        // custom pattern overrides format\r\n                        if (format) {\r\n                            json.format = formatMap[format] ?? format;\r\n                            if (json.format === \"\")\r\n                                delete json.format; // empty format is not valid\r\n                        }\r\n                        if (contentEncoding)\r\n                            json.contentEncoding = contentEncoding;\r\n                        if (patterns && patterns.size > 0) {\r\n                            const regexes = [...patterns];\r\n                            if (regexes.length === 1)\r\n                                json.pattern = regexes[0].source;\r\n                            else if (regexes.length > 1) {\r\n                                result.schema.allOf = [\r\n                                    ...regexes.map((regex) => ({\r\n                                        ...(this.target === \"draft-7\" ? { type: \"string\" } : {}),\r\n                                        pattern: regex.source,\r\n                                    })),\r\n                                ];\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"number\": {\r\n                        const json = _json;\r\n                        const { minimum, maximum, format, multipleOf, exclusiveMaximum, exclusiveMinimum } = schema._zod.bag;\r\n                        if (typeof format === \"string\" && format.includes(\"int\"))\r\n                            json.type = \"integer\";\r\n                        else\r\n                            json.type = \"number\";\r\n                        if (typeof exclusiveMinimum === \"number\")\r\n                            json.exclusiveMinimum = exclusiveMinimum;\r\n                        if (typeof minimum === \"number\") {\r\n                            json.minimum = minimum;\r\n                            if (typeof exclusiveMinimum === \"number\") {\r\n                                if (exclusiveMinimum >= minimum)\r\n                                    delete json.minimum;\r\n                                else\r\n                                    delete json.exclusiveMinimum;\r\n                            }\r\n                        }\r\n                        if (typeof exclusiveMaximum === \"number\")\r\n                            json.exclusiveMaximum = exclusiveMaximum;\r\n                        if (typeof maximum === \"number\") {\r\n                            json.maximum = maximum;\r\n                            if (typeof exclusiveMaximum === \"number\") {\r\n                                if (exclusiveMaximum <= maximum)\r\n                                    delete json.maximum;\r\n                                else\r\n                                    delete json.exclusiveMaximum;\r\n                            }\r\n                        }\r\n                        if (typeof multipleOf === \"number\")\r\n                            json.multipleOf = multipleOf;\r\n                        break;\r\n                    }\r\n                    case \"boolean\": {\r\n                        const json = _json;\r\n                        json.type = \"boolean\";\r\n                        break;\r\n                    }\r\n                    case \"bigint\": {\r\n                        if (this.unrepresentable === \"throw\") {\r\n                            throw new Error(\"BigInt cannot be represented in JSON Schema\");\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"symbol\": {\r\n                        if (this.unrepresentable === \"throw\") {\r\n                            throw new Error(\"Symbols cannot be represented in JSON Schema\");\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"null\": {\r\n                        _json.type = \"null\";\r\n                        break;\r\n                    }\r\n                    case \"any\": {\r\n                        break;\r\n                    }\r\n                    case \"unknown\": {\r\n                        break;\r\n                    }\r\n                    case \"undefined\": {\r\n                        if (this.unrepresentable === \"throw\") {\r\n                            throw new Error(\"Undefined cannot be represented in JSON Schema\");\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"void\": {\r\n                        if (this.unrepresentable === \"throw\") {\r\n                            throw new Error(\"Void cannot be represented in JSON Schema\");\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"never\": {\r\n                        _json.not = {};\r\n                        break;\r\n                    }\r\n                    case \"date\": {\r\n                        if (this.unrepresentable === \"throw\") {\r\n                            throw new Error(\"Date cannot be represented in JSON Schema\");\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"array\": {\r\n                        const json = _json;\r\n                        const { minimum, maximum } = schema._zod.bag;\r\n                        if (typeof minimum === \"number\")\r\n                            json.minItems = minimum;\r\n                        if (typeof maximum === \"number\")\r\n                            json.maxItems = maximum;\r\n                        json.type = \"array\";\r\n                        json.items = this.process(def.element, { ...params, path: [...params.path, \"items\"] });\r\n                        break;\r\n                    }\r\n                    case \"object\": {\r\n                        const json = _json;\r\n                        json.type = \"object\";\r\n                        json.properties = {};\r\n                        const shape = def.shape; // params.shapeCache.get(schema)!;\r\n                        for (const key in shape) {\r\n                            json.properties[key] = this.process(shape[key], {\r\n                                ...params,\r\n                                path: [...params.path, \"properties\", key],\r\n                            });\r\n                        }\r\n                        // required keys\r\n                        const allKeys = new Set(Object.keys(shape));\r\n                        // const optionalKeys = new Set(def.optional);\r\n                        const requiredKeys = new Set([...allKeys].filter((key) => {\r\n                            const v = def.shape[key]._zod;\r\n                            if (this.io === \"input\") {\r\n                                return v.optin === undefined;\r\n                            }\r\n                            else {\r\n                                return v.optout === undefined;\r\n                            }\r\n                        }));\r\n                        if (requiredKeys.size > 0) {\r\n                            json.required = Array.from(requiredKeys);\r\n                        }\r\n                        // catchall\r\n                        if (def.catchall?._zod.def.type === \"never\") {\r\n                            // strict\r\n                            json.additionalProperties = false;\r\n                        }\r\n                        else if (!def.catchall) {\r\n                            // regular\r\n                            if (this.io === \"output\")\r\n                                json.additionalProperties = false;\r\n                        }\r\n                        else if (def.catchall) {\r\n                            json.additionalProperties = this.process(def.catchall, {\r\n                                ...params,\r\n                                path: [...params.path, \"additionalProperties\"],\r\n                            });\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"union\": {\r\n                        const json = _json;\r\n                        json.anyOf = def.options.map((x, i) => this.process(x, {\r\n                            ...params,\r\n                            path: [...params.path, \"anyOf\", i],\r\n                        }));\r\n                        break;\r\n                    }\r\n                    case \"intersection\": {\r\n                        const json = _json;\r\n                        const a = this.process(def.left, {\r\n                            ...params,\r\n                            path: [...params.path, \"allOf\", 0],\r\n                        });\r\n                        const b = this.process(def.right, {\r\n                            ...params,\r\n                            path: [...params.path, \"allOf\", 1],\r\n                        });\r\n                        const isSimpleIntersection = (val) => \"allOf\" in val && Object.keys(val).length === 1;\r\n                        const allOf = [\r\n                            ...(isSimpleIntersection(a) ? a.allOf : [a]),\r\n                            ...(isSimpleIntersection(b) ? b.allOf : [b]),\r\n                        ];\r\n                        json.allOf = allOf;\r\n                        break;\r\n                    }\r\n                    case \"tuple\": {\r\n                        const json = _json;\r\n                        json.type = \"array\";\r\n                        const prefixItems = def.items.map((x, i) => this.process(x, { ...params, path: [...params.path, \"prefixItems\", i] }));\r\n                        if (this.target === \"draft-2020-12\") {\r\n                            json.prefixItems = prefixItems;\r\n                        }\r\n                        else {\r\n                            json.items = prefixItems;\r\n                        }\r\n                        if (def.rest) {\r\n                            const rest = this.process(def.rest, {\r\n                                ...params,\r\n                                path: [...params.path, \"items\"],\r\n                            });\r\n                            if (this.target === \"draft-2020-12\") {\r\n                                json.items = rest;\r\n                            }\r\n                            else {\r\n                                json.additionalItems = rest;\r\n                            }\r\n                        }\r\n                        // additionalItems\r\n                        if (def.rest) {\r\n                            json.items = this.process(def.rest, {\r\n                                ...params,\r\n                                path: [...params.path, \"items\"],\r\n                            });\r\n                        }\r\n                        // length\r\n                        const { minimum, maximum } = schema._zod.bag;\r\n                        if (typeof minimum === \"number\")\r\n                            json.minItems = minimum;\r\n                        if (typeof maximum === \"number\")\r\n                            json.maxItems = maximum;\r\n                        break;\r\n                    }\r\n                    case \"record\": {\r\n                        const json = _json;\r\n                        json.type = \"object\";\r\n                        json.propertyNames = this.process(def.keyType, { ...params, path: [...params.path, \"propertyNames\"] });\r\n                        json.additionalProperties = this.process(def.valueType, {\r\n                            ...params,\r\n                            path: [...params.path, \"additionalProperties\"],\r\n                        });\r\n                        break;\r\n                    }\r\n                    case \"map\": {\r\n                        if (this.unrepresentable === \"throw\") {\r\n                            throw new Error(\"Map cannot be represented in JSON Schema\");\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"set\": {\r\n                        if (this.unrepresentable === \"throw\") {\r\n                            throw new Error(\"Set cannot be represented in JSON Schema\");\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"enum\": {\r\n                        const json = _json;\r\n                        const values = getEnumValues(def.entries);\r\n                        // Number enums can have both string and number values\r\n                        if (values.every((v) => typeof v === \"number\"))\r\n                            json.type = \"number\";\r\n                        if (values.every((v) => typeof v === \"string\"))\r\n                            json.type = \"string\";\r\n                        json.enum = values;\r\n                        break;\r\n                    }\r\n                    case \"literal\": {\r\n                        const json = _json;\r\n                        const vals = [];\r\n                        for (const val of def.values) {\r\n                            if (val === undefined) {\r\n                                if (this.unrepresentable === \"throw\") {\r\n                                    throw new Error(\"Literal `undefined` cannot be represented in JSON Schema\");\r\n                                }\r\n                                else {\r\n                                    // do not add to vals\r\n                                }\r\n                            }\r\n                            else if (typeof val === \"bigint\") {\r\n                                if (this.unrepresentable === \"throw\") {\r\n                                    throw new Error(\"BigInt literals cannot be represented in JSON Schema\");\r\n                                }\r\n                                else {\r\n                                    vals.push(Number(val));\r\n                                }\r\n                            }\r\n                            else {\r\n                                vals.push(val);\r\n                            }\r\n                        }\r\n                        if (vals.length === 0) {\r\n                            // do nothing (an undefined literal was stripped)\r\n                        }\r\n                        else if (vals.length === 1) {\r\n                            const val = vals[0];\r\n                            json.type = val === null ? \"null\" : typeof val;\r\n                            json.const = val;\r\n                        }\r\n                        else {\r\n                            if (vals.every((v) => typeof v === \"number\"))\r\n                                json.type = \"number\";\r\n                            if (vals.every((v) => typeof v === \"string\"))\r\n                                json.type = \"string\";\r\n                            if (vals.every((v) => typeof v === \"boolean\"))\r\n                                json.type = \"string\";\r\n                            if (vals.every((v) => v === null))\r\n                                json.type = \"null\";\r\n                            json.enum = vals;\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"file\": {\r\n                        const json = _json;\r\n                        const file = {\r\n                            type: \"string\",\r\n                            format: \"binary\",\r\n                            contentEncoding: \"binary\",\r\n                        };\r\n                        const { minimum, maximum, mime } = schema._zod.bag;\r\n                        if (minimum !== undefined)\r\n                            file.minLength = minimum;\r\n                        if (maximum !== undefined)\r\n                            file.maxLength = maximum;\r\n                        if (mime) {\r\n                            if (mime.length === 1) {\r\n                                file.contentMediaType = mime[0];\r\n                                Object.assign(json, file);\r\n                            }\r\n                            else {\r\n                                json.anyOf = mime.map((m) => {\r\n                                    const mFile = { ...file, contentMediaType: m };\r\n                                    return mFile;\r\n                                });\r\n                            }\r\n                        }\r\n                        else {\r\n                            Object.assign(json, file);\r\n                        }\r\n                        // if (this.unrepresentable === \"throw\") {\r\n                        //   throw new Error(\"File cannot be represented in JSON Schema\");\r\n                        // }\r\n                        break;\r\n                    }\r\n                    case \"transform\": {\r\n                        if (this.unrepresentable === \"throw\") {\r\n                            throw new Error(\"Transforms cannot be represented in JSON Schema\");\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"nullable\": {\r\n                        const inner = this.process(def.innerType, params);\r\n                        _json.anyOf = [inner, { type: \"null\" }];\r\n                        break;\r\n                    }\r\n                    case \"nonoptional\": {\r\n                        this.process(def.innerType, params);\r\n                        result.ref = def.innerType;\r\n                        break;\r\n                    }\r\n                    case \"success\": {\r\n                        const json = _json;\r\n                        json.type = \"boolean\";\r\n                        break;\r\n                    }\r\n                    case \"default\": {\r\n                        this.process(def.innerType, params);\r\n                        result.ref = def.innerType;\r\n                        _json.default = JSON.parse(JSON.stringify(def.defaultValue));\r\n                        break;\r\n                    }\r\n                    case \"prefault\": {\r\n                        this.process(def.innerType, params);\r\n                        result.ref = def.innerType;\r\n                        if (this.io === \"input\")\r\n                            _json._prefault = JSON.parse(JSON.stringify(def.defaultValue));\r\n                        break;\r\n                    }\r\n                    case \"catch\": {\r\n                        // use conditionals\r\n                        this.process(def.innerType, params);\r\n                        result.ref = def.innerType;\r\n                        let catchValue;\r\n                        try {\r\n                            catchValue = def.catchValue(undefined);\r\n                        }\r\n                        catch {\r\n                            throw new Error(\"Dynamic catch values are not supported in JSON Schema\");\r\n                        }\r\n                        _json.default = catchValue;\r\n                        break;\r\n                    }\r\n                    case \"nan\": {\r\n                        if (this.unrepresentable === \"throw\") {\r\n                            throw new Error(\"NaN cannot be represented in JSON Schema\");\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"template_literal\": {\r\n                        const json = _json;\r\n                        const pattern = schema._zod.pattern;\r\n                        if (!pattern)\r\n                            throw new Error(\"Pattern not found in template literal\");\r\n                        json.type = \"string\";\r\n                        json.pattern = pattern.source;\r\n                        break;\r\n                    }\r\n                    case \"pipe\": {\r\n                        const innerType = this.io === \"input\" ? (def.in._zod.def.type === \"transform\" ? def.out : def.in) : def.out;\r\n                        this.process(innerType, params);\r\n                        result.ref = innerType;\r\n                        break;\r\n                    }\r\n                    case \"readonly\": {\r\n                        this.process(def.innerType, params);\r\n                        result.ref = def.innerType;\r\n                        _json.readOnly = true;\r\n                        break;\r\n                    }\r\n                    // passthrough types\r\n                    case \"promise\": {\r\n                        this.process(def.innerType, params);\r\n                        result.ref = def.innerType;\r\n                        break;\r\n                    }\r\n                    case \"optional\": {\r\n                        this.process(def.innerType, params);\r\n                        result.ref = def.innerType;\r\n                        break;\r\n                    }\r\n                    case \"lazy\": {\r\n                        const innerType = schema._zod.innerType;\r\n                        this.process(innerType, params);\r\n                        result.ref = innerType;\r\n                        break;\r\n                    }\r\n                    case \"custom\": {\r\n                        if (this.unrepresentable === \"throw\") {\r\n                            throw new Error(\"Custom types cannot be represented in JSON Schema\");\r\n                        }\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        def;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // metadata\r\n        const meta = this.metadataRegistry.get(schema);\r\n        if (meta)\r\n            Object.assign(result.schema, meta);\r\n        if (this.io === \"input\" && isTransforming(schema)) {\r\n            // examples/defaults only apply to output type of pipe\r\n            delete result.schema.examples;\r\n            delete result.schema.default;\r\n        }\r\n        // set prefault as default\r\n        if (this.io === \"input\" && result.schema._prefault)\r\n            (_a = result.schema).default ?? (_a.default = result.schema._prefault);\r\n        delete result.schema._prefault;\r\n        // pulling fresh from this.seen in case it was overwritten\r\n        const _result = this.seen.get(schema);\r\n        return _result.schema;\r\n    }\r\n    emit(schema, _params) {\r\n        const params = {\r\n            cycles: _params?.cycles ?? \"ref\",\r\n            reused: _params?.reused ?? \"inline\",\r\n            // unrepresentable: _params?.unrepresentable ?? \"throw\",\r\n            // uri: _params?.uri ?? ((id) => `${id}`),\r\n            external: _params?.external ?? undefined,\r\n        };\r\n        // iterate over seen map;\r\n        const root = this.seen.get(schema);\r\n        if (!root)\r\n            throw new Error(\"Unprocessed schema. This is a bug in Zod.\");\r\n        // initialize result with root schema fields\r\n        // Object.assign(result, seen.cached);\r\n        // returns a ref to the schema\r\n        // defId will be empty if the ref points to an external schema (or #)\r\n        const makeURI = (entry) => {\r\n            // comparing the seen objects because sometimes\r\n            // multiple schemas map to the same seen object.\r\n            // e.g. lazy\r\n            // external is configured\r\n            const defsSegment = this.target === \"draft-2020-12\" ? \"$defs\" : \"definitions\";\r\n            if (params.external) {\r\n                const externalId = params.external.registry.get(entry[0])?.id; // ?? \"__shared\";// `__schema${this.counter++}`;\r\n                // check if schema is in the external registry\r\n                const uriGenerator = params.external.uri ?? ((id) => id);\r\n                if (externalId) {\r\n                    return { ref: uriGenerator(externalId) };\r\n                }\r\n                // otherwise, add to __shared\r\n                const id = entry[1].defId ?? entry[1].schema.id ?? `schema${this.counter++}`;\r\n                entry[1].defId = id; // set defId so it will be reused if needed\r\n                return { defId: id, ref: `${uriGenerator(\"__shared\")}#/${defsSegment}/${id}` };\r\n            }\r\n            if (entry[1] === root) {\r\n                return { ref: \"#\" };\r\n            }\r\n            // self-contained schema\r\n            const uriPrefix = `#`;\r\n            const defUriPrefix = `${uriPrefix}/${defsSegment}/`;\r\n            const defId = entry[1].schema.id ?? `__schema${this.counter++}`;\r\n            return { defId, ref: defUriPrefix + defId };\r\n        };\r\n        // stored cached version in `def` property\r\n        // remove all properties, set $ref\r\n        const extractToDef = (entry) => {\r\n            // if the schema is already a reference, do not extract it\r\n            if (entry[1].schema.$ref) {\r\n                return;\r\n            }\r\n            const seen = entry[1];\r\n            const { ref, defId } = makeURI(entry);\r\n            seen.def = { ...seen.schema };\r\n            // defId won't be set if the schema is a reference to an external schema\r\n            if (defId)\r\n                seen.defId = defId;\r\n            // wipe away all properties except $ref\r\n            const schema = seen.schema;\r\n            for (const key in schema) {\r\n                delete schema[key];\r\n            }\r\n            schema.$ref = ref;\r\n        };\r\n        // throw on cycles\r\n        // break cycles\r\n        if (params.cycles === \"throw\") {\r\n            for (const entry of this.seen.entries()) {\r\n                const seen = entry[1];\r\n                if (seen.cycle) {\r\n                    throw new Error(\"Cycle detected: \" +\r\n                        `#/${seen.cycle?.join(\"/\")}/<root>` +\r\n                        '\\n\\nSet the `cycles` parameter to `\"ref\"` to resolve cyclical schemas with defs.');\r\n                }\r\n            }\r\n        }\r\n        // extract schemas into $defs\r\n        for (const entry of this.seen.entries()) {\r\n            const seen = entry[1];\r\n            // convert root schema to # $ref\r\n            if (schema === entry[0]) {\r\n                extractToDef(entry); // this has special handling for the root schema\r\n                continue;\r\n            }\r\n            // extract schemas that are in the external registry\r\n            if (params.external) {\r\n                const ext = params.external.registry.get(entry[0])?.id;\r\n                if (schema !== entry[0] && ext) {\r\n                    extractToDef(entry);\r\n                    continue;\r\n                }\r\n            }\r\n            // extract schemas with `id` meta\r\n            const id = this.metadataRegistry.get(entry[0])?.id;\r\n            if (id) {\r\n                extractToDef(entry);\r\n                continue;\r\n            }\r\n            // break cycles\r\n            if (seen.cycle) {\r\n                // any\r\n                extractToDef(entry);\r\n                continue;\r\n            }\r\n            // extract reused schemas\r\n            if (seen.count > 1) {\r\n                if (params.reused === \"ref\") {\r\n                    extractToDef(entry);\r\n                    // biome-ignore lint:\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n        // flatten _refs\r\n        const flattenRef = (zodSchema, params) => {\r\n            const seen = this.seen.get(zodSchema);\r\n            const schema = seen.def ?? seen.schema;\r\n            const _cached = { ...schema };\r\n            // already seen\r\n            if (seen.ref === null) {\r\n                return;\r\n            }\r\n            // flatten ref if defined\r\n            const ref = seen.ref;\r\n            seen.ref = null; // prevent recursion\r\n            if (ref) {\r\n                flattenRef(ref, params);\r\n                // merge referenced schema into current\r\n                const refSchema = this.seen.get(ref).schema;\r\n                if (refSchema.$ref && params.target === \"draft-7\") {\r\n                    schema.allOf = schema.allOf ?? [];\r\n                    schema.allOf.push(refSchema);\r\n                }\r\n                else {\r\n                    Object.assign(schema, refSchema);\r\n                    Object.assign(schema, _cached); // prevent overwriting any fields in the original schema\r\n                }\r\n            }\r\n            // execute overrides\r\n            if (!seen.isParent)\r\n                this.override({\r\n                    zodSchema: zodSchema,\r\n                    jsonSchema: schema,\r\n                    path: seen.path ?? [],\r\n                });\r\n        };\r\n        for (const entry of [...this.seen.entries()].reverse()) {\r\n            flattenRef(entry[0], { target: this.target });\r\n        }\r\n        const result = {};\r\n        if (this.target === \"draft-2020-12\") {\r\n            result.$schema = \"https://json-schema.org/draft/2020-12/schema\";\r\n        }\r\n        else if (this.target === \"draft-7\") {\r\n            result.$schema = \"http://json-schema.org/draft-07/schema#\";\r\n        }\r\n        else {\r\n            console.warn(`Invalid target: ${this.target}`);\r\n        }\r\n        if (params.external?.uri) {\r\n            const id = params.external.registry.get(schema)?.id;\r\n            if (!id)\r\n                throw new Error(\"Schema is missing an `id` property\");\r\n            result.$id = params.external.uri(id);\r\n        }\r\n        Object.assign(result, root.def);\r\n        // build defs object\r\n        const defs = params.external?.defs ?? {};\r\n        for (const entry of this.seen.entries()) {\r\n            const seen = entry[1];\r\n            if (seen.def && seen.defId) {\r\n                defs[seen.defId] = seen.def;\r\n            }\r\n        }\r\n        // set definitions in result\r\n        if (params.external) {\r\n        }\r\n        else {\r\n            if (Object.keys(defs).length > 0) {\r\n                if (this.target === \"draft-2020-12\") {\r\n                    result.$defs = defs;\r\n                }\r\n                else {\r\n                    result.definitions = defs;\r\n                }\r\n            }\r\n        }\r\n        try {\r\n            // this \"finalizes\" this schema and ensures all cycles are removed\r\n            // each call to .emit() is functionally independent\r\n            // though the seen map is shared\r\n            return JSON.parse(JSON.stringify(result));\r\n        }\r\n        catch (_err) {\r\n            throw new Error(\"Error converting schema to JSON.\");\r\n        }\r\n    }\r\n}\r\nexport function toJSONSchema(input, _params) {\r\n    if (input instanceof $ZodRegistry) {\r\n        const gen = new JSONSchemaGenerator(_params);\r\n        const defs = {};\r\n        for (const entry of input._idmap.entries()) {\r\n            const [_, schema] = entry;\r\n            gen.process(schema);\r\n        }\r\n        const schemas = {};\r\n        const external = {\r\n            registry: input,\r\n            uri: _params?.uri,\r\n            defs,\r\n        };\r\n        for (const entry of input._idmap.entries()) {\r\n            const [key, schema] = entry;\r\n            schemas[key] = gen.emit(schema, {\r\n                ..._params,\r\n                external,\r\n            });\r\n        }\r\n        if (Object.keys(defs).length > 0) {\r\n            const defsSegment = gen.target === \"draft-2020-12\" ? \"$defs\" : \"definitions\";\r\n            schemas.__shared = {\r\n                [defsSegment]: defs,\r\n            };\r\n        }\r\n        return { schemas };\r\n    }\r\n    const gen = new JSONSchemaGenerator(_params);\r\n    gen.process(input);\r\n    return gen.emit(input, _params);\r\n}\r\nfunction isTransforming(_schema, _ctx) {\r\n    const ctx = _ctx ?? { seen: new Set() };\r\n    if (ctx.seen.has(_schema))\r\n        return false;\r\n    ctx.seen.add(_schema);\r\n    const schema = _schema;\r\n    const def = schema._zod.def;\r\n    switch (def.type) {\r\n        case \"string\":\r\n        case \"number\":\r\n        case \"bigint\":\r\n        case \"boolean\":\r\n        case \"date\":\r\n        case \"symbol\":\r\n        case \"undefined\":\r\n        case \"null\":\r\n        case \"any\":\r\n        case \"unknown\":\r\n        case \"never\":\r\n        case \"void\":\r\n        case \"literal\":\r\n        case \"enum\":\r\n        case \"nan\":\r\n        case \"file\":\r\n        case \"template_literal\":\r\n            return false;\r\n        case \"array\": {\r\n            return isTransforming(def.element, ctx);\r\n        }\r\n        case \"object\": {\r\n            for (const key in def.shape) {\r\n                if (isTransforming(def.shape[key], ctx))\r\n                    return true;\r\n            }\r\n            return false;\r\n        }\r\n        case \"union\": {\r\n            for (const option of def.options) {\r\n                if (isTransforming(option, ctx))\r\n                    return true;\r\n            }\r\n            return false;\r\n        }\r\n        case \"intersection\": {\r\n            return isTransforming(def.left, ctx) || isTransforming(def.right, ctx);\r\n        }\r\n        case \"tuple\": {\r\n            for (const item of def.items) {\r\n                if (isTransforming(item, ctx))\r\n                    return true;\r\n            }\r\n            if (def.rest && isTransforming(def.rest, ctx))\r\n                return true;\r\n            return false;\r\n        }\r\n        case \"record\": {\r\n            return isTransforming(def.keyType, ctx) || isTransforming(def.valueType, ctx);\r\n        }\r\n        case \"map\": {\r\n            return isTransforming(def.keyType, ctx) || isTransforming(def.valueType, ctx);\r\n        }\r\n        case \"set\": {\r\n            return isTransforming(def.valueType, ctx);\r\n        }\r\n        // inner types\r\n        case \"promise\":\r\n        case \"optional\":\r\n        case \"nonoptional\":\r\n        case \"nullable\":\r\n        case \"readonly\":\r\n            return isTransforming(def.innerType, ctx);\r\n        case \"lazy\":\r\n            return isTransforming(def.getter(), ctx);\r\n        case \"default\": {\r\n            return isTransforming(def.innerType, ctx);\r\n        }\r\n        case \"prefault\": {\r\n            return isTransforming(def.innerType, ctx);\r\n        }\r\n        case \"custom\": {\r\n            return false;\r\n        }\r\n        case \"transform\": {\r\n            return true;\r\n        }\r\n        case \"pipe\": {\r\n            return isTransforming(def.in, ctx) || isTransforming(def.out, ctx);\r\n        }\r\n        case \"success\": {\r\n            return false;\r\n        }\r\n        case \"catch\": {\r\n            return false;\r\n        }\r\n        default:\r\n            def;\r\n    }\r\n    throw new Error(`Unknown schema type: ${def.type}`);\r\n}\r\n", "export {};\r\n", "import * as core from \"../core/index.js\";\r\nimport * as schemas from \"./schemas.js\";\r\nexport const ZodISODateTime = /*@__PURE__*/ core.$constructor(\"ZodISODateTime\", (inst, def) => {\r\n    core.$ZodISODateTime.init(inst, def);\r\n    schemas.ZodStringFormat.init(inst, def);\r\n});\r\nexport function datetime(params) {\r\n    return core._isoDateTime(ZodISODateTime, params);\r\n}\r\nexport const ZodISODate = /*@__PURE__*/ core.$constructor(\"ZodISODate\", (inst, def) => {\r\n    core.$ZodISODate.init(inst, def);\r\n    schemas.ZodStringFormat.init(inst, def);\r\n});\r\nexport function date(params) {\r\n    return core._isoDate(ZodISODate, params);\r\n}\r\nexport const ZodISOTime = /*@__PURE__*/ core.$constructor(\"ZodISOTime\", (inst, def) => {\r\n    core.$ZodISOTime.init(inst, def);\r\n    schemas.ZodStringFormat.init(inst, def);\r\n});\r\nexport function time(params) {\r\n    return core._isoTime(ZodISOTime, params);\r\n}\r\nexport const ZodISODuration = /*@__PURE__*/ core.$constructor(\"ZodISODuration\", (inst, def) => {\r\n    core.$ZodISODuration.init(inst, def);\r\n    schemas.ZodStringFormat.init(inst, def);\r\n});\r\nexport function duration(params) {\r\n    return core._isoDuration(ZodISODuration, params);\r\n}\r\n", "import * as core from \"../core/index.js\";\r\nimport { $ZodError } from \"../core/index.js\";\r\nconst initializer = (inst, issues) => {\r\n    $ZodError.init(inst, issues);\r\n    inst.name = \"ZodError\";\r\n    Object.defineProperties(inst, {\r\n        format: {\r\n            value: (mapper) => core.formatError(inst, mapper),\r\n            // enumerable: false,\r\n        },\r\n        flatten: {\r\n            value: (mapper) => core.flattenError(inst, mapper),\r\n            // enumerable: false,\r\n        },\r\n        addIssue: {\r\n            value: (issue) => inst.issues.push(issue),\r\n            // enumerable: false,\r\n        },\r\n        addIssues: {\r\n            value: (issues) => inst.issues.push(...issues),\r\n            // enumerable: false,\r\n        },\r\n        isEmpty: {\r\n            get() {\r\n                return inst.issues.length === 0;\r\n            },\r\n            // enumerable: false,\r\n        },\r\n    });\r\n    // Object.defineProperty(inst, \"isEmpty\", {\r\n    //   get() {\r\n    //     return inst.issues.length === 0;\r\n    //   },\r\n    // });\r\n};\r\nexport const ZodError = core.$constructor(\"ZodError\", initializer);\r\nexport const ZodRealError = core.$constructor(\"ZodError\", initializer, {\r\n    Parent: Error,\r\n});\r\n// /** @deprecated Use `z.core.$ZodErrorMapCtx` instead. */\r\n// export type ErrorMapCtx = core.$ZodErrorMapCtx;\r\n", "import * as core from \"../core/index.js\";\r\nimport { ZodRealError } from \"./errors.js\";\r\nexport const parse = /* @__PURE__ */ core._parse(ZodRealError);\r\nexport const parseAsync = /* @__PURE__ */ core._parseAsync(ZodRealError);\r\nexport const safeParse = /* @__PURE__ */ core._safeParse(ZodRealError);\r\nexport const safeParseAsync = /* @__PURE__ */ core._safeParseAsync(ZodRealError);\r\n", "import * as core from \"../core/index.js\";\r\nimport { util } from \"../core/index.js\";\r\nimport * as checks from \"./checks.js\";\r\nimport * as iso from \"./iso.js\";\r\nimport * as parse from \"./parse.js\";\r\nexport const ZodType = /*@__PURE__*/ core.$constructor(\"ZodType\", (inst, def) => {\r\n    core.$ZodType.init(inst, def);\r\n    inst.def = def;\r\n    Object.defineProperty(inst, \"_def\", { value: def });\r\n    // base methods\r\n    inst.check = (...checks) => {\r\n        return inst.clone({\r\n            ...def,\r\n            checks: [\r\n                ...(def.checks ?? []),\r\n                ...checks.map((ch) => typeof ch === \"function\" ? { _zod: { check: ch, def: { check: \"custom\" }, onattach: [] } } : ch),\r\n            ],\r\n        }\r\n        // { parent: true }\r\n        );\r\n    };\r\n    inst.clone = (def, params) => core.clone(inst, def, params);\r\n    inst.brand = () => inst;\r\n    inst.register = ((reg, meta) => {\r\n        reg.add(inst, meta);\r\n        return inst;\r\n    });\r\n    // parsing\r\n    inst.parse = (data, params) => parse.parse(inst, data, params, { callee: inst.parse });\r\n    inst.safeParse = (data, params) => parse.safeParse(inst, data, params);\r\n    inst.parseAsync = async (data, params) => parse.parseAsync(inst, data, params, { callee: inst.parseAsync });\r\n    inst.safeParseAsync = async (data, params) => parse.safeParseAsync(inst, data, params);\r\n    inst.spa = inst.safeParseAsync;\r\n    // refinements\r\n    inst.refine = (check, params) => inst.check(refine(check, params));\r\n    inst.superRefine = (refinement) => inst.check(superRefine(refinement));\r\n    inst.overwrite = (fn) => inst.check(checks.overwrite(fn));\r\n    // wrappers\r\n    inst.optional = () => optional(inst);\r\n    inst.nullable = () => nullable(inst);\r\n    inst.nullish = () => optional(nullable(inst));\r\n    inst.nonoptional = (params) => nonoptional(inst, params);\r\n    inst.array = () => array(inst);\r\n    inst.or = (arg) => union([inst, arg]);\r\n    inst.and = (arg) => intersection(inst, arg);\r\n    inst.transform = (tx) => pipe(inst, transform(tx));\r\n    inst.default = (def) => _default(inst, def);\r\n    inst.prefault = (def) => prefault(inst, def);\r\n    // inst.coalesce = (def, params) => coalesce(inst, def, params);\r\n    inst.catch = (params) => _catch(inst, params);\r\n    inst.pipe = (target) => pipe(inst, target);\r\n    inst.readonly = () => readonly(inst);\r\n    // meta\r\n    inst.describe = (description) => {\r\n        const cl = inst.clone();\r\n        core.globalRegistry.add(cl, { description });\r\n        return cl;\r\n    };\r\n    Object.defineProperty(inst, \"description\", {\r\n        get() {\r\n            return core.globalRegistry.get(inst)?.description;\r\n        },\r\n        configurable: true,\r\n    });\r\n    inst.meta = (...args) => {\r\n        if (args.length === 0) {\r\n            return core.globalRegistry.get(inst);\r\n        }\r\n        const cl = inst.clone();\r\n        core.globalRegistry.add(cl, args[0]);\r\n        return cl;\r\n    };\r\n    // helpers\r\n    inst.isOptional = () => inst.safeParse(undefined).success;\r\n    inst.isNullable = () => inst.safeParse(null).success;\r\n    return inst;\r\n});\r\n/** @internal */\r\nexport const _ZodString = /*@__PURE__*/ core.$constructor(\"_ZodString\", (inst, def) => {\r\n    core.$ZodString.init(inst, def);\r\n    ZodType.init(inst, def);\r\n    const bag = inst._zod.bag;\r\n    inst.format = bag.format ?? null;\r\n    inst.minLength = bag.minimum ?? null;\r\n    inst.maxLength = bag.maximum ?? null;\r\n    // validations\r\n    inst.regex = (...args) => inst.check(checks.regex(...args));\r\n    inst.includes = (...args) => inst.check(checks.includes(...args));\r\n    inst.startsWith = (...args) => inst.check(checks.startsWith(...args));\r\n    inst.endsWith = (...args) => inst.check(checks.endsWith(...args));\r\n    inst.min = (...args) => inst.check(checks.minLength(...args));\r\n    inst.max = (...args) => inst.check(checks.maxLength(...args));\r\n    inst.length = (...args) => inst.check(checks.length(...args));\r\n    inst.nonempty = (...args) => inst.check(checks.minLength(1, ...args));\r\n    inst.lowercase = (params) => inst.check(checks.lowercase(params));\r\n    inst.uppercase = (params) => inst.check(checks.uppercase(params));\r\n    // transforms\r\n    inst.trim = () => inst.check(checks.trim());\r\n    inst.normalize = (...args) => inst.check(checks.normalize(...args));\r\n    inst.toLowerCase = () => inst.check(checks.toLowerCase());\r\n    inst.toUpperCase = () => inst.check(checks.toUpperCase());\r\n});\r\nexport const ZodString = /*@__PURE__*/ core.$constructor(\"ZodString\", (inst, def) => {\r\n    core.$ZodString.init(inst, def);\r\n    _ZodString.init(inst, def);\r\n    inst.email = (params) => inst.check(core._email(ZodEmail, params));\r\n    inst.url = (params) => inst.check(core._url(ZodURL, params));\r\n    inst.jwt = (params) => inst.check(core._jwt(ZodJWT, params));\r\n    inst.emoji = (params) => inst.check(core._emoji(ZodEmoji, params));\r\n    inst.guid = (params) => inst.check(core._guid(ZodGUID, params));\r\n    inst.uuid = (params) => inst.check(core._uuid(ZodUUID, params));\r\n    inst.uuidv4 = (params) => inst.check(core._uuidv4(ZodUUID, params));\r\n    inst.uuidv6 = (params) => inst.check(core._uuidv6(ZodUUID, params));\r\n    inst.uuidv7 = (params) => inst.check(core._uuidv7(ZodUUID, params));\r\n    inst.nanoid = (params) => inst.check(core._nanoid(ZodNanoID, params));\r\n    inst.guid = (params) => inst.check(core._guid(ZodGUID, params));\r\n    inst.cuid = (params) => inst.check(core._cuid(ZodCUID, params));\r\n    inst.cuid2 = (params) => inst.check(core._cuid2(ZodCUID2, params));\r\n    inst.ulid = (params) => inst.check(core._ulid(ZodULID, params));\r\n    inst.base64 = (params) => inst.check(core._base64(ZodBase64, params));\r\n    inst.base64url = (params) => inst.check(core._base64url(ZodBase64URL, params));\r\n    inst.xid = (params) => inst.check(core._xid(ZodXID, params));\r\n    inst.ksuid = (params) => inst.check(core._ksuid(ZodKSUID, params));\r\n    inst.ipv4 = (params) => inst.check(core._ipv4(ZodIPv4, params));\r\n    inst.ipv6 = (params) => inst.check(core._ipv6(ZodIPv6, params));\r\n    inst.cidrv4 = (params) => inst.check(core._cidrv4(ZodCIDRv4, params));\r\n    inst.cidrv6 = (params) => inst.check(core._cidrv6(ZodCIDRv6, params));\r\n    inst.e164 = (params) => inst.check(core._e164(ZodE164, params));\r\n    // iso\r\n    inst.datetime = (params) => inst.check(iso.datetime(params));\r\n    inst.date = (params) => inst.check(iso.date(params));\r\n    inst.time = (params) => inst.check(iso.time(params));\r\n    inst.duration = (params) => inst.check(iso.duration(params));\r\n});\r\nexport function string(params) {\r\n    return core._string(ZodString, params);\r\n}\r\nexport const ZodStringFormat = /*@__PURE__*/ core.$constructor(\"ZodStringFormat\", (inst, def) => {\r\n    core.$ZodStringFormat.init(inst, def);\r\n    _ZodString.init(inst, def);\r\n});\r\nexport const ZodEmail = /*@__PURE__*/ core.$constructor(\"ZodEmail\", (inst, def) => {\r\n    // ZodStringFormat.init(inst, def);\r\n    core.$ZodEmail.init(inst, def);\r\n    ZodStringFormat.init(inst, def);\r\n});\r\nexport function email(params) {\r\n    return core._email(ZodEmail, params);\r\n}\r\nexport const ZodGUID = /*@__PURE__*/ core.$constructor(\"ZodGUID\", (inst, def) => {\r\n    // ZodStringFormat.init(inst, def);\r\n    core.$ZodGUID.init(inst, def);\r\n    ZodStringFormat.init(inst, def);\r\n});\r\nexport function guid(params) {\r\n    return core._guid(ZodGUID, params);\r\n}\r\nexport const ZodUUID = /*@__PURE__*/ core.$constructor(\"ZodUUID\", (inst, def) => {\r\n    // ZodStringFormat.init(inst, def);\r\n    core.$ZodUUID.init(inst, def);\r\n    ZodStringFormat.init(inst, def);\r\n});\r\nexport function uuid(params) {\r\n    return core._uuid(ZodUUID, params);\r\n}\r\nexport function uuidv4(params) {\r\n    return core._uuidv4(ZodUUID, params);\r\n}\r\n// ZodUUIDv6\r\nexport function uuidv6(params) {\r\n    return core._uuidv6(ZodUUID, params);\r\n}\r\n// ZodUUIDv7\r\nexport function uuidv7(params) {\r\n    return core._uuidv7(ZodUUID, params);\r\n}\r\nexport const ZodURL = /*@__PURE__*/ core.$constructor(\"ZodURL\", (inst, def) => {\r\n    // ZodStringFormat.init(inst, def);\r\n    core.$ZodURL.init(inst, def);\r\n    ZodStringFormat.init(inst, def);\r\n});\r\nexport function url(params) {\r\n    return core._url(ZodURL, params);\r\n}\r\nexport const ZodEmoji = /*@__PURE__*/ core.$constructor(\"ZodEmoji\", (inst, def) => {\r\n    // ZodStringFormat.init(inst, def);\r\n    core.$ZodEmoji.init(inst, def);\r\n    ZodStringFormat.init(inst, def);\r\n});\r\nexport function emoji(params) {\r\n    return core._emoji(ZodEmoji, params);\r\n}\r\nexport const ZodNanoID = /*@__PURE__*/ core.$constructor(\"ZodNanoID\", (inst, def) => {\r\n    // ZodStringFormat.init(inst, def);\r\n    core.$ZodNanoID.init(inst, def);\r\n    ZodStringFormat.init(inst, def);\r\n});\r\nexport function nanoid(params) {\r\n    return core._nanoid(ZodNanoID, params);\r\n}\r\nexport const ZodCUID = /*@__PURE__*/ core.$constructor(\"ZodCUID\", (inst, def) => {\r\n    // ZodStringFormat.init(inst, def);\r\n    core.$ZodCUID.init(inst, def);\r\n    ZodStringFormat.init(inst, def);\r\n});\r\nexport function cuid(params) {\r\n    return core._cuid(ZodCUID, params);\r\n}\r\nexport const ZodCUID2 = /*@__PURE__*/ core.$constructor(\"ZodCUID2\", (inst, def) => {\r\n    // ZodStringFormat.init(inst, def);\r\n    core.$ZodCUID2.init(inst, def);\r\n    ZodStringFormat.init(inst, def);\r\n});\r\nexport function cuid2(params) {\r\n    return core._cuid2(ZodCUID2, params);\r\n}\r\nexport const ZodULID = /*@__PURE__*/ core.$constructor(\"ZodULID\", (inst, def) => {\r\n    // ZodStringFormat.init(inst, def);\r\n    core.$ZodULID.init(inst, def);\r\n    ZodStringFormat.init(inst, def);\r\n});\r\nexport function ulid(params) {\r\n    return core._ulid(ZodULID, params);\r\n}\r\nexport const ZodXID = /*@__PURE__*/ core.$constructor(\"ZodXID\", (inst, def) => {\r\n    // ZodStringFormat.init(inst, def);\r\n    core.$ZodXID.init(inst, def);\r\n    ZodStringFormat.init(inst, def);\r\n});\r\nexport function xid(params) {\r\n    return core._xid(ZodXID, params);\r\n}\r\nexport const ZodKSUID = /*@__PURE__*/ core.$constructor(\"ZodKSUID\", (inst, def) => {\r\n    // ZodStringFormat.init(inst, def);\r\n    core.$ZodKSUID.init(inst, def);\r\n    ZodStringFormat.init(inst, def);\r\n});\r\nexport function ksuid(params) {\r\n    return core._ksuid(ZodKSUID, params);\r\n}\r\nexport const ZodIPv4 = /*@__PURE__*/ core.$constructor(\"ZodIPv4\", (inst, def) => {\r\n    // ZodStringFormat.init(inst, def);\r\n    core.$ZodIPv4.init(inst, def);\r\n    ZodStringFormat.init(inst, def);\r\n});\r\nexport function ipv4(params) {\r\n    return core._ipv4(ZodIPv4, params);\r\n}\r\nexport const ZodIPv6 = /*@__PURE__*/ core.$constructor(\"ZodIPv6\", (inst, def) => {\r\n    // ZodStringFormat.init(inst, def);\r\n    core.$ZodIPv6.init(inst, def);\r\n    ZodStringFormat.init(inst, def);\r\n});\r\nexport function ipv6(params) {\r\n    return core._ipv6(ZodIPv6, params);\r\n}\r\nexport const ZodCIDRv4 = /*@__PURE__*/ core.$constructor(\"ZodCIDRv4\", (inst, def) => {\r\n    core.$ZodCIDRv4.init(inst, def);\r\n    ZodStringFormat.init(inst, def);\r\n});\r\nexport function cidrv4(params) {\r\n    return core._cidrv4(ZodCIDRv4, params);\r\n}\r\nexport const ZodCIDRv6 = /*@__PURE__*/ core.$constructor(\"ZodCIDRv6\", (inst, def) => {\r\n    core.$ZodCIDRv6.init(inst, def);\r\n    ZodStringFormat.init(inst, def);\r\n});\r\nexport function cidrv6(params) {\r\n    return core._cidrv6(ZodCIDRv6, params);\r\n}\r\nexport const ZodBase64 = /*@__PURE__*/ core.$constructor(\"ZodBase64\", (inst, def) => {\r\n    // ZodStringFormat.init(inst, def);\r\n    core.$ZodBase64.init(inst, def);\r\n    ZodStringFormat.init(inst, def);\r\n});\r\nexport function base64(params) {\r\n    return core._base64(ZodBase64, params);\r\n}\r\nexport const ZodBase64URL = /*@__PURE__*/ core.$constructor(\"ZodBase64URL\", (inst, def) => {\r\n    // ZodStringFormat.init(inst, def);\r\n    core.$ZodBase64URL.init(inst, def);\r\n    ZodStringFormat.init(inst, def);\r\n});\r\nexport function base64url(params) {\r\n    return core._base64url(ZodBase64URL, params);\r\n}\r\nexport const ZodE164 = /*@__PURE__*/ core.$constructor(\"ZodE164\", (inst, def) => {\r\n    // ZodStringFormat.init(inst, def);\r\n    core.$ZodE164.init(inst, def);\r\n    ZodStringFormat.init(inst, def);\r\n});\r\nexport function e164(params) {\r\n    return core._e164(ZodE164, params);\r\n}\r\nexport const ZodJWT = /*@__PURE__*/ core.$constructor(\"ZodJWT\", (inst, def) => {\r\n    // ZodStringFormat.init(inst, def);\r\n    core.$ZodJWT.init(inst, def);\r\n    ZodStringFormat.init(inst, def);\r\n});\r\nexport function jwt(params) {\r\n    return core._jwt(ZodJWT, params);\r\n}\r\nexport const ZodCustomStringFormat = /*@__PURE__*/ core.$constructor(\"ZodCustomStringFormat\", (inst, def) => {\r\n    // ZodStringFormat.init(inst, def);\r\n    core.$ZodCustomStringFormat.init(inst, def);\r\n    ZodStringFormat.init(inst, def);\r\n});\r\nexport function stringFormat(format, fnOrRegex, _params = {}) {\r\n    return core._stringFormat(ZodCustomStringFormat, format, fnOrRegex, _params);\r\n}\r\nexport const ZodNumber = /*@__PURE__*/ core.$constructor(\"ZodNumber\", (inst, def) => {\r\n    core.$ZodNumber.init(inst, def);\r\n    ZodType.init(inst, def);\r\n    inst.gt = (value, params) => inst.check(checks.gt(value, params));\r\n    inst.gte = (value, params) => inst.check(checks.gte(value, params));\r\n    inst.min = (value, params) => inst.check(checks.gte(value, params));\r\n    inst.lt = (value, params) => inst.check(checks.lt(value, params));\r\n    inst.lte = (value, params) => inst.check(checks.lte(value, params));\r\n    inst.max = (value, params) => inst.check(checks.lte(value, params));\r\n    inst.int = (params) => inst.check(int(params));\r\n    inst.safe = (params) => inst.check(int(params));\r\n    inst.positive = (params) => inst.check(checks.gt(0, params));\r\n    inst.nonnegative = (params) => inst.check(checks.gte(0, params));\r\n    inst.negative = (params) => inst.check(checks.lt(0, params));\r\n    inst.nonpositive = (params) => inst.check(checks.lte(0, params));\r\n    inst.multipleOf = (value, params) => inst.check(checks.multipleOf(value, params));\r\n    inst.step = (value, params) => inst.check(checks.multipleOf(value, params));\r\n    // inst.finite = (params) => inst.check(core.finite(params));\r\n    inst.finite = () => inst;\r\n    const bag = inst._zod.bag;\r\n    inst.minValue =\r\n        Math.max(bag.minimum ?? Number.NEGATIVE_INFINITY, bag.exclusiveMinimum ?? Number.NEGATIVE_INFINITY) ?? null;\r\n    inst.maxValue =\r\n        Math.min(bag.maximum ?? Number.POSITIVE_INFINITY, bag.exclusiveMaximum ?? Number.POSITIVE_INFINITY) ?? null;\r\n    inst.isInt = (bag.format ?? \"\").includes(\"int\") || Number.isSafeInteger(bag.multipleOf ?? 0.5);\r\n    inst.isFinite = true;\r\n    inst.format = bag.format ?? null;\r\n});\r\nexport function number(params) {\r\n    return core._number(ZodNumber, params);\r\n}\r\nexport const ZodNumberFormat = /*@__PURE__*/ core.$constructor(\"ZodNumberFormat\", (inst, def) => {\r\n    core.$ZodNumberFormat.init(inst, def);\r\n    ZodNumber.init(inst, def);\r\n});\r\nexport function int(params) {\r\n    return core._int(ZodNumberFormat, params);\r\n}\r\nexport function float32(params) {\r\n    return core._float32(ZodNumberFormat, params);\r\n}\r\nexport function float64(params) {\r\n    return core._float64(ZodNumberFormat, params);\r\n}\r\nexport function int32(params) {\r\n    return core._int32(ZodNumberFormat, params);\r\n}\r\nexport function uint32(params) {\r\n    return core._uint32(ZodNumberFormat, params);\r\n}\r\nexport const ZodBoolean = /*@__PURE__*/ core.$constructor(\"ZodBoolean\", (inst, def) => {\r\n    core.$ZodBoolean.init(inst, def);\r\n    ZodType.init(inst, def);\r\n});\r\nexport function boolean(params) {\r\n    return core._boolean(ZodBoolean, params);\r\n}\r\nexport const ZodBigInt = /*@__PURE__*/ core.$constructor(\"ZodBigInt\", (inst, def) => {\r\n    core.$ZodBigInt.init(inst, def);\r\n    ZodType.init(inst, def);\r\n    inst.gte = (value, params) => inst.check(checks.gte(value, params));\r\n    inst.min = (value, params) => inst.check(checks.gte(value, params));\r\n    inst.gt = (value, params) => inst.check(checks.gt(value, params));\r\n    inst.gte = (value, params) => inst.check(checks.gte(value, params));\r\n    inst.min = (value, params) => inst.check(checks.gte(value, params));\r\n    inst.lt = (value, params) => inst.check(checks.lt(value, params));\r\n    inst.lte = (value, params) => inst.check(checks.lte(value, params));\r\n    inst.max = (value, params) => inst.check(checks.lte(value, params));\r\n    inst.positive = (params) => inst.check(checks.gt(BigInt(0), params));\r\n    inst.negative = (params) => inst.check(checks.lt(BigInt(0), params));\r\n    inst.nonpositive = (params) => inst.check(checks.lte(BigInt(0), params));\r\n    inst.nonnegative = (params) => inst.check(checks.gte(BigInt(0), params));\r\n    inst.multipleOf = (value, params) => inst.check(checks.multipleOf(value, params));\r\n    const bag = inst._zod.bag;\r\n    inst.minValue = bag.minimum ?? null;\r\n    inst.maxValue = bag.maximum ?? null;\r\n    inst.format = bag.format ?? null;\r\n});\r\nexport function bigint(params) {\r\n    return core._bigint(ZodBigInt, params);\r\n}\r\nexport const ZodBigIntFormat = /*@__PURE__*/ core.$constructor(\"ZodBigIntFormat\", (inst, def) => {\r\n    core.$ZodBigIntFormat.init(inst, def);\r\n    ZodBigInt.init(inst, def);\r\n});\r\n// int64\r\nexport function int64(params) {\r\n    return core._int64(ZodBigIntFormat, params);\r\n}\r\n// uint64\r\nexport function uint64(params) {\r\n    return core._uint64(ZodBigIntFormat, params);\r\n}\r\nexport const ZodSymbol = /*@__PURE__*/ core.$constructor(\"ZodSymbol\", (inst, def) => {\r\n    core.$ZodSymbol.init(inst, def);\r\n    ZodType.init(inst, def);\r\n});\r\nexport function symbol(params) {\r\n    return core._symbol(ZodSymbol, params);\r\n}\r\nexport const ZodUndefined = /*@__PURE__*/ core.$constructor(\"ZodUndefined\", (inst, def) => {\r\n    core.$ZodUndefined.init(inst, def);\r\n    ZodType.init(inst, def);\r\n});\r\nfunction _undefined(params) {\r\n    return core._undefined(ZodUndefined, params);\r\n}\r\nexport { _undefined as undefined };\r\nexport const ZodNull = /*@__PURE__*/ core.$constructor(\"ZodNull\", (inst, def) => {\r\n    core.$ZodNull.init(inst, def);\r\n    ZodType.init(inst, def);\r\n});\r\nfunction _null(params) {\r\n    return core._null(ZodNull, params);\r\n}\r\nexport { _null as null };\r\nexport const ZodAny = /*@__PURE__*/ core.$constructor(\"ZodAny\", (inst, def) => {\r\n    core.$ZodAny.init(inst, def);\r\n    ZodType.init(inst, def);\r\n});\r\nexport function any() {\r\n    return core._any(ZodAny);\r\n}\r\nexport const ZodUnknown = /*@__PURE__*/ core.$constructor(\"ZodUnknown\", (inst, def) => {\r\n    core.$ZodUnknown.init(inst, def);\r\n    ZodType.init(inst, def);\r\n});\r\nexport function unknown() {\r\n    return core._unknown(ZodUnknown);\r\n}\r\nexport const ZodNever = /*@__PURE__*/ core.$constructor(\"ZodNever\", (inst, def) => {\r\n    core.$ZodNever.init(inst, def);\r\n    ZodType.init(inst, def);\r\n});\r\nexport function never(params) {\r\n    return core._never(ZodNever, params);\r\n}\r\nexport const ZodVoid = /*@__PURE__*/ core.$constructor(\"ZodVoid\", (inst, def) => {\r\n    core.$ZodVoid.init(inst, def);\r\n    ZodType.init(inst, def);\r\n});\r\nfunction _void(params) {\r\n    return core._void(ZodVoid, params);\r\n}\r\nexport { _void as void };\r\nexport const ZodDate = /*@__PURE__*/ core.$constructor(\"ZodDate\", (inst, def) => {\r\n    core.$ZodDate.init(inst, def);\r\n    ZodType.init(inst, def);\r\n    inst.min = (value, params) => inst.check(checks.gte(value, params));\r\n    inst.max = (value, params) => inst.check(checks.lte(value, params));\r\n    const c = inst._zod.bag;\r\n    inst.minDate = c.minimum ? new Date(c.minimum) : null;\r\n    inst.maxDate = c.maximum ? new Date(c.maximum) : null;\r\n});\r\nexport function date(params) {\r\n    return core._date(ZodDate, params);\r\n}\r\nexport const ZodArray = /*@__PURE__*/ core.$constructor(\"ZodArray\", (inst, def) => {\r\n    core.$ZodArray.init(inst, def);\r\n    ZodType.init(inst, def);\r\n    inst.element = def.element;\r\n    inst.min = (minLength, params) => inst.check(checks.minLength(minLength, params));\r\n    inst.nonempty = (params) => inst.check(checks.minLength(1, params));\r\n    inst.max = (maxLength, params) => inst.check(checks.maxLength(maxLength, params));\r\n    inst.length = (len, params) => inst.check(checks.length(len, params));\r\n    inst.unwrap = () => inst.element;\r\n});\r\nexport function array(element, params) {\r\n    return core._array(ZodArray, element, params);\r\n}\r\n// .keyof\r\nexport function keyof(schema) {\r\n    const shape = schema._zod.def.shape;\r\n    return literal(Object.keys(shape));\r\n}\r\nexport const ZodObject = /*@__PURE__*/ core.$constructor(\"ZodObject\", (inst, def) => {\r\n    core.$ZodObject.init(inst, def);\r\n    ZodType.init(inst, def);\r\n    util.defineLazy(inst, \"shape\", () => def.shape);\r\n    inst.keyof = () => _enum(Object.keys(inst._zod.def.shape));\r\n    inst.catchall = (catchall) => inst.clone({ ...inst._zod.def, catchall: catchall });\r\n    inst.passthrough = () => inst.clone({ ...inst._zod.def, catchall: unknown() });\r\n    // inst.nonstrict = () => inst.clone({ ...inst._zod.def, catchall: api.unknown() });\r\n    inst.loose = () => inst.clone({ ...inst._zod.def, catchall: unknown() });\r\n    inst.strict = () => inst.clone({ ...inst._zod.def, catchall: never() });\r\n    inst.strip = () => inst.clone({ ...inst._zod.def, catchall: undefined });\r\n    inst.extend = (incoming) => {\r\n        return util.extend(inst, incoming);\r\n    };\r\n    inst.merge = (other) => util.merge(inst, other);\r\n    inst.pick = (mask) => util.pick(inst, mask);\r\n    inst.omit = (mask) => util.omit(inst, mask);\r\n    inst.partial = (...args) => util.partial(ZodOptional, inst, args[0]);\r\n    inst.required = (...args) => util.required(ZodNonOptional, inst, args[0]);\r\n});\r\nexport function object(shape, params) {\r\n    const def = {\r\n        type: \"object\",\r\n        get shape() {\r\n            util.assignProp(this, \"shape\", { ...shape });\r\n            return this.shape;\r\n        },\r\n        ...util.normalizeParams(params),\r\n    };\r\n    return new ZodObject(def);\r\n}\r\n// strictObject\r\nexport function strictObject(shape, params) {\r\n    return new ZodObject({\r\n        type: \"object\",\r\n        get shape() {\r\n            util.assignProp(this, \"shape\", { ...shape });\r\n            return this.shape;\r\n        },\r\n        catchall: never(),\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\n// looseObject\r\nexport function looseObject(shape, params) {\r\n    return new ZodObject({\r\n        type: \"object\",\r\n        get shape() {\r\n            util.assignProp(this, \"shape\", { ...shape });\r\n            return this.shape;\r\n        },\r\n        catchall: unknown(),\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport const ZodUnion = /*@__PURE__*/ core.$constructor(\"ZodUnion\", (inst, def) => {\r\n    core.$ZodUnion.init(inst, def);\r\n    ZodType.init(inst, def);\r\n    inst.options = def.options;\r\n});\r\nexport function union(options, params) {\r\n    return new ZodUnion({\r\n        type: \"union\",\r\n        options: options,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport const ZodDiscriminatedUnion = /*@__PURE__*/ core.$constructor(\"ZodDiscriminatedUnion\", (inst, def) => {\r\n    ZodUnion.init(inst, def);\r\n    core.$ZodDiscriminatedUnion.init(inst, def);\r\n});\r\nexport function discriminatedUnion(discriminator, options, params) {\r\n    // const [options, params] = args;\r\n    return new ZodDiscriminatedUnion({\r\n        type: \"union\",\r\n        options,\r\n        discriminator,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport const ZodIntersection = /*@__PURE__*/ core.$constructor(\"ZodIntersection\", (inst, def) => {\r\n    core.$ZodIntersection.init(inst, def);\r\n    ZodType.init(inst, def);\r\n});\r\nexport function intersection(left, right) {\r\n    return new ZodIntersection({\r\n        type: \"intersection\",\r\n        left: left,\r\n        right: right,\r\n    });\r\n}\r\nexport const ZodTuple = /*@__PURE__*/ core.$constructor(\"ZodTuple\", (inst, def) => {\r\n    core.$ZodTuple.init(inst, def);\r\n    ZodType.init(inst, def);\r\n    inst.rest = (rest) => inst.clone({\r\n        ...inst._zod.def,\r\n        rest: rest,\r\n    });\r\n});\r\nexport function tuple(items, _paramsOrRest, _params) {\r\n    const hasRest = _paramsOrRest instanceof core.$ZodType;\r\n    const params = hasRest ? _params : _paramsOrRest;\r\n    const rest = hasRest ? _paramsOrRest : null;\r\n    return new ZodTuple({\r\n        type: \"tuple\",\r\n        items: items,\r\n        rest,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport const ZodRecord = /*@__PURE__*/ core.$constructor(\"ZodRecord\", (inst, def) => {\r\n    core.$ZodRecord.init(inst, def);\r\n    ZodType.init(inst, def);\r\n    inst.keyType = def.keyType;\r\n    inst.valueType = def.valueType;\r\n});\r\nexport function record(keyType, valueType, params) {\r\n    return new ZodRecord({\r\n        type: \"record\",\r\n        keyType,\r\n        valueType: valueType,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\n// type alksjf = core.output<core.$ZodRecordKey>;\r\nexport function partialRecord(keyType, valueType, params) {\r\n    return new ZodRecord({\r\n        type: \"record\",\r\n        keyType: union([keyType, never()]),\r\n        valueType: valueType,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport const ZodMap = /*@__PURE__*/ core.$constructor(\"ZodMap\", (inst, def) => {\r\n    core.$ZodMap.init(inst, def);\r\n    ZodType.init(inst, def);\r\n    inst.keyType = def.keyType;\r\n    inst.valueType = def.valueType;\r\n});\r\nexport function map(keyType, valueType, params) {\r\n    return new ZodMap({\r\n        type: \"map\",\r\n        keyType: keyType,\r\n        valueType: valueType,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport const ZodSet = /*@__PURE__*/ core.$constructor(\"ZodSet\", (inst, def) => {\r\n    core.$ZodSet.init(inst, def);\r\n    ZodType.init(inst, def);\r\n    inst.min = (...args) => inst.check(core._minSize(...args));\r\n    inst.nonempty = (params) => inst.check(core._minSize(1, params));\r\n    inst.max = (...args) => inst.check(core._maxSize(...args));\r\n    inst.size = (...args) => inst.check(core._size(...args));\r\n});\r\nexport function set(valueType, params) {\r\n    return new ZodSet({\r\n        type: \"set\",\r\n        valueType: valueType,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport const ZodEnum = /*@__PURE__*/ core.$constructor(\"ZodEnum\", (inst, def) => {\r\n    core.$ZodEnum.init(inst, def);\r\n    ZodType.init(inst, def);\r\n    inst.enum = def.entries;\r\n    inst.options = Object.values(def.entries);\r\n    const keys = new Set(Object.keys(def.entries));\r\n    inst.extract = (values, params) => {\r\n        const newEntries = {};\r\n        for (const value of values) {\r\n            if (keys.has(value)) {\r\n                newEntries[value] = def.entries[value];\r\n            }\r\n            else\r\n                throw new Error(`Key ${value} not found in enum`);\r\n        }\r\n        return new ZodEnum({\r\n            ...def,\r\n            checks: [],\r\n            ...util.normalizeParams(params),\r\n            entries: newEntries,\r\n        });\r\n    };\r\n    inst.exclude = (values, params) => {\r\n        const newEntries = { ...def.entries };\r\n        for (const value of values) {\r\n            if (keys.has(value)) {\r\n                delete newEntries[value];\r\n            }\r\n            else\r\n                throw new Error(`Key ${value} not found in enum`);\r\n        }\r\n        return new ZodEnum({\r\n            ...def,\r\n            checks: [],\r\n            ...util.normalizeParams(params),\r\n            entries: newEntries,\r\n        });\r\n    };\r\n});\r\nfunction _enum(values, params) {\r\n    const entries = Array.isArray(values) ? Object.fromEntries(values.map((v) => [v, v])) : values;\r\n    return new ZodEnum({\r\n        type: \"enum\",\r\n        entries,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport { _enum as enum };\r\n/** @deprecated This API has been merged into `z.enum()`. Use `z.enum()` instead.\r\n *\r\n * ```ts\r\n * enum Colors { red, green, blue }\r\n * z.enum(Colors);\r\n * ```\r\n */\r\nexport function nativeEnum(entries, params) {\r\n    return new ZodEnum({\r\n        type: \"enum\",\r\n        entries,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport const ZodLiteral = /*@__PURE__*/ core.$constructor(\"ZodLiteral\", (inst, def) => {\r\n    core.$ZodLiteral.init(inst, def);\r\n    ZodType.init(inst, def);\r\n    inst.values = new Set(def.values);\r\n    Object.defineProperty(inst, \"value\", {\r\n        get() {\r\n            if (def.values.length > 1) {\r\n                throw new Error(\"This schema contains multiple valid literal values. Use `.values` instead.\");\r\n            }\r\n            return def.values[0];\r\n        },\r\n    });\r\n});\r\nexport function literal(value, params) {\r\n    return new ZodLiteral({\r\n        type: \"literal\",\r\n        values: Array.isArray(value) ? value : [value],\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport const ZodFile = /*@__PURE__*/ core.$constructor(\"ZodFile\", (inst, def) => {\r\n    core.$ZodFile.init(inst, def);\r\n    ZodType.init(inst, def);\r\n    inst.min = (size, params) => inst.check(core._minSize(size, params));\r\n    inst.max = (size, params) => inst.check(core._maxSize(size, params));\r\n    inst.mime = (types, params) => inst.check(core._mime(Array.isArray(types) ? types : [types], params));\r\n});\r\nexport function file(params) {\r\n    return core._file(ZodFile, params);\r\n}\r\nexport const ZodTransform = /*@__PURE__*/ core.$constructor(\"ZodTransform\", (inst, def) => {\r\n    core.$ZodTransform.init(inst, def);\r\n    ZodType.init(inst, def);\r\n    inst._zod.parse = (payload, _ctx) => {\r\n        payload.addIssue = (issue) => {\r\n            if (typeof issue === \"string\") {\r\n                payload.issues.push(util.issue(issue, payload.value, def));\r\n            }\r\n            else {\r\n                // for Zod 3 backwards compatibility\r\n                const _issue = issue;\r\n                if (_issue.fatal)\r\n                    _issue.continue = false;\r\n                _issue.code ?? (_issue.code = \"custom\");\r\n                _issue.input ?? (_issue.input = payload.value);\r\n                _issue.inst ?? (_issue.inst = inst);\r\n                _issue.continue ?? (_issue.continue = true);\r\n                payload.issues.push(util.issue(_issue));\r\n            }\r\n        };\r\n        const output = def.transform(payload.value, payload);\r\n        if (output instanceof Promise) {\r\n            return output.then((output) => {\r\n                payload.value = output;\r\n                return payload;\r\n            });\r\n        }\r\n        payload.value = output;\r\n        return payload;\r\n    };\r\n});\r\nexport function transform(fn) {\r\n    return new ZodTransform({\r\n        type: \"transform\",\r\n        transform: fn,\r\n    });\r\n}\r\nexport const ZodOptional = /*@__PURE__*/ core.$constructor(\"ZodOptional\", (inst, def) => {\r\n    core.$ZodOptional.init(inst, def);\r\n    ZodType.init(inst, def);\r\n    inst.unwrap = () => inst._zod.def.innerType;\r\n});\r\nexport function optional(innerType) {\r\n    return new ZodOptional({\r\n        type: \"optional\",\r\n        innerType: innerType,\r\n    });\r\n}\r\nexport const ZodNullable = /*@__PURE__*/ core.$constructor(\"ZodNullable\", (inst, def) => {\r\n    core.$ZodNullable.init(inst, def);\r\n    ZodType.init(inst, def);\r\n    inst.unwrap = () => inst._zod.def.innerType;\r\n});\r\nexport function nullable(innerType) {\r\n    return new ZodNullable({\r\n        type: \"nullable\",\r\n        innerType: innerType,\r\n    });\r\n}\r\n// nullish\r\nexport function nullish(innerType) {\r\n    return optional(nullable(innerType));\r\n}\r\nexport const ZodDefault = /*@__PURE__*/ core.$constructor(\"ZodDefault\", (inst, def) => {\r\n    core.$ZodDefault.init(inst, def);\r\n    ZodType.init(inst, def);\r\n    inst.unwrap = () => inst._zod.def.innerType;\r\n    inst.removeDefault = inst.unwrap;\r\n});\r\nexport function _default(innerType, defaultValue) {\r\n    return new ZodDefault({\r\n        type: \"default\",\r\n        innerType: innerType,\r\n        get defaultValue() {\r\n            return typeof defaultValue === \"function\" ? defaultValue() : defaultValue;\r\n        },\r\n    });\r\n}\r\nexport const ZodPrefault = /*@__PURE__*/ core.$constructor(\"ZodPrefault\", (inst, def) => {\r\n    core.$ZodPrefault.init(inst, def);\r\n    ZodType.init(inst, def);\r\n    inst.unwrap = () => inst._zod.def.innerType;\r\n});\r\nexport function prefault(innerType, defaultValue) {\r\n    return new ZodPrefault({\r\n        type: \"prefault\",\r\n        innerType: innerType,\r\n        get defaultValue() {\r\n            return typeof defaultValue === \"function\" ? defaultValue() : defaultValue;\r\n        },\r\n    });\r\n}\r\nexport const ZodNonOptional = /*@__PURE__*/ core.$constructor(\"ZodNonOptional\", (inst, def) => {\r\n    core.$ZodNonOptional.init(inst, def);\r\n    ZodType.init(inst, def);\r\n    inst.unwrap = () => inst._zod.def.innerType;\r\n});\r\nexport function nonoptional(innerType, params) {\r\n    return new ZodNonOptional({\r\n        type: \"nonoptional\",\r\n        innerType: innerType,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport const ZodSuccess = /*@__PURE__*/ core.$constructor(\"ZodSuccess\", (inst, def) => {\r\n    core.$ZodSuccess.init(inst, def);\r\n    ZodType.init(inst, def);\r\n    inst.unwrap = () => inst._zod.def.innerType;\r\n});\r\nexport function success(innerType) {\r\n    return new ZodSuccess({\r\n        type: \"success\",\r\n        innerType: innerType,\r\n    });\r\n}\r\nexport const ZodCatch = /*@__PURE__*/ core.$constructor(\"ZodCatch\", (inst, def) => {\r\n    core.$ZodCatch.init(inst, def);\r\n    ZodType.init(inst, def);\r\n    inst.unwrap = () => inst._zod.def.innerType;\r\n    inst.removeCatch = inst.unwrap;\r\n});\r\nfunction _catch(innerType, catchValue) {\r\n    return new ZodCatch({\r\n        type: \"catch\",\r\n        innerType: innerType,\r\n        catchValue: (typeof catchValue === \"function\" ? catchValue : () => catchValue),\r\n    });\r\n}\r\nexport { _catch as catch };\r\nexport const ZodNaN = /*@__PURE__*/ core.$constructor(\"ZodNaN\", (inst, def) => {\r\n    core.$ZodNaN.init(inst, def);\r\n    ZodType.init(inst, def);\r\n});\r\nexport function nan(params) {\r\n    return core._nan(ZodNaN, params);\r\n}\r\nexport const ZodPipe = /*@__PURE__*/ core.$constructor(\"ZodPipe\", (inst, def) => {\r\n    core.$ZodPipe.init(inst, def);\r\n    ZodType.init(inst, def);\r\n    inst.in = def.in;\r\n    inst.out = def.out;\r\n});\r\nexport function pipe(in_, out) {\r\n    return new ZodPipe({\r\n        type: \"pipe\",\r\n        in: in_,\r\n        out: out,\r\n        // ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport const ZodReadonly = /*@__PURE__*/ core.$constructor(\"ZodReadonly\", (inst, def) => {\r\n    core.$ZodReadonly.init(inst, def);\r\n    ZodType.init(inst, def);\r\n});\r\nexport function readonly(innerType) {\r\n    return new ZodReadonly({\r\n        type: \"readonly\",\r\n        innerType: innerType,\r\n    });\r\n}\r\nexport const ZodTemplateLiteral = /*@__PURE__*/ core.$constructor(\"ZodTemplateLiteral\", (inst, def) => {\r\n    core.$ZodTemplateLiteral.init(inst, def);\r\n    ZodType.init(inst, def);\r\n});\r\nexport function templateLiteral(parts, params) {\r\n    return new ZodTemplateLiteral({\r\n        type: \"template_literal\",\r\n        parts,\r\n        ...util.normalizeParams(params),\r\n    });\r\n}\r\nexport const ZodLazy = /*@__PURE__*/ core.$constructor(\"ZodLazy\", (inst, def) => {\r\n    core.$ZodLazy.init(inst, def);\r\n    ZodType.init(inst, def);\r\n    inst.unwrap = () => inst._zod.def.getter();\r\n});\r\nexport function lazy(getter) {\r\n    return new ZodLazy({\r\n        type: \"lazy\",\r\n        getter: getter,\r\n    });\r\n}\r\nexport const ZodPromise = /*@__PURE__*/ core.$constructor(\"ZodPromise\", (inst, def) => {\r\n    core.$ZodPromise.init(inst, def);\r\n    ZodType.init(inst, def);\r\n    inst.unwrap = () => inst._zod.def.innerType;\r\n});\r\nexport function promise(innerType) {\r\n    return new ZodPromise({\r\n        type: \"promise\",\r\n        innerType: innerType,\r\n    });\r\n}\r\nexport const ZodCustom = /*@__PURE__*/ core.$constructor(\"ZodCustom\", (inst, def) => {\r\n    core.$ZodCustom.init(inst, def);\r\n    ZodType.init(inst, def);\r\n});\r\n// custom checks\r\nexport function check(fn) {\r\n    const ch = new core.$ZodCheck({\r\n        check: \"custom\",\r\n        // ...util.normalizeParams(params),\r\n    });\r\n    ch._zod.check = fn;\r\n    return ch;\r\n}\r\nexport function custom(fn, _params) {\r\n    return core._custom(ZodCustom, fn ?? (() => true), _params);\r\n}\r\nexport function refine(fn, _params = {}) {\r\n    return core._refine(ZodCustom, fn, _params);\r\n}\r\n// superRefine\r\nexport function superRefine(fn) {\r\n    const ch = check((payload) => {\r\n        payload.addIssue = (issue) => {\r\n            if (typeof issue === \"string\") {\r\n                payload.issues.push(util.issue(issue, payload.value, ch._zod.def));\r\n            }\r\n            else {\r\n                // for Zod 3 backwards compatibility\r\n                const _issue = issue;\r\n                if (_issue.fatal)\r\n                    _issue.continue = false;\r\n                _issue.code ?? (_issue.code = \"custom\");\r\n                _issue.input ?? (_issue.input = payload.value);\r\n                _issue.inst ?? (_issue.inst = ch);\r\n                _issue.continue ?? (_issue.continue = !ch._zod.def.abort);\r\n                payload.issues.push(util.issue(_issue));\r\n            }\r\n        };\r\n        return fn(payload.value, payload);\r\n    });\r\n    return ch;\r\n}\r\nfunction _instanceof(cls, params = {\r\n    error: `Input not instance of ${cls.name}`,\r\n}) {\r\n    const inst = new ZodCustom({\r\n        type: \"custom\",\r\n        check: \"custom\",\r\n        fn: (data) => data instanceof cls,\r\n        abort: true,\r\n        ...util.normalizeParams(params),\r\n    });\r\n    inst._zod.bag.Class = cls;\r\n    return inst;\r\n}\r\nexport { _instanceof as instanceof };\r\n// stringbool\r\nexport const stringbool = (...args) => core._stringbool({\r\n    Pipe: ZodPipe,\r\n    Boolean: ZodBoolean,\r\n    String: ZodString,\r\n    Transform: ZodTransform,\r\n}, ...args);\r\nexport function json(params) {\r\n    const jsonSchema = lazy(() => {\r\n        return union([string(params), number(), boolean(), _null(), array(jsonSchema), record(string(), jsonSchema)]);\r\n    });\r\n    return jsonSchema;\r\n}\r\n// preprocess\r\n// /** @deprecated Use `z.pipe()` and `z.transform()` instead. */\r\nexport function preprocess(fn, schema) {\r\n    return pipe(transform(fn), schema);\r\n}\r\n", "// Zod 3 compat layer\r\nimport * as core from \"../core/index.js\";\r\n/** @deprecated Use the raw string literal codes instead, e.g. \"invalid_type\". */\r\nexport const ZodIssueCode = {\r\n    invalid_type: \"invalid_type\",\r\n    too_big: \"too_big\",\r\n    too_small: \"too_small\",\r\n    invalid_format: \"invalid_format\",\r\n    not_multiple_of: \"not_multiple_of\",\r\n    unrecognized_keys: \"unrecognized_keys\",\r\n    invalid_union: \"invalid_union\",\r\n    invalid_key: \"invalid_key\",\r\n    invalid_element: \"invalid_element\",\r\n    invalid_value: \"invalid_value\",\r\n    custom: \"custom\",\r\n};\r\nexport { $brand, config } from \"../core/index.js\";\r\n/** @deprecated Use `z.config(params)` instead. */\r\nexport function setErrorMap(map) {\r\n    core.config({\r\n        customError: map,\r\n    });\r\n}\r\n/** @deprecated Use `z.config()` instead. */\r\nexport function getErrorMap() {\r\n    return core.config().customError;\r\n}\r\n/** @deprecated Do not use. Stub definition, only included for zod-to-json-schema compatibility. */\r\nexport var ZodFirstPartyTypeKind;\r\n(function (ZodFirstPartyTypeKind) {\r\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\r\n", "import * as core from \"../core/index.js\";\r\nimport * as schemas from \"./schemas.js\";\r\nexport function string(params) {\r\n    return core._coercedString(schemas.ZodString, params);\r\n}\r\nexport function number(params) {\r\n    return core._coercedNumber(schemas.ZodNumber, params);\r\n}\r\nexport function boolean(params) {\r\n    return core._coercedBoolean(schemas.ZodBoolean, params);\r\n}\r\nexport function bigint(params) {\r\n    return core._coercedBigint(schemas.ZodBigInt, params);\r\n}\r\nexport function date(params) {\r\n    return core._coercedDate(schemas.ZodDate, params);\r\n}\r\n", "import * as z from \"./v4/classic/external.js\";\r\nexport * from \"./v4/classic/external.js\";\r\nexport { z };\r\nexport default z;\r\n"],
  "mappings": "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",
  "names": ["_default", "base64", "base64url", "bigint", "boolean", "_catch", "cidrv4", "cidrv6", "core_exports", "cuid", "cuid2", "date", "e164", "email", "emoji", "_enum", "guid", "ipv4", "ipv6", "ksuid", "nanoid", "_null", "nullish", "number", "parse", "parseAsync", "safeParse", "safeParseAsync", "string", "ulid", "_undefined", "uuid", "_void", "xid", "core_exports", "_emoji", "_null", "_undefined", "initializer", "array", "set", "object", "Class", "config", "error", "issue", "version", "time", "inst", "result", "checks", "result", "_", "url", "inst", "base64", "isObject", "allowsEval", "r", "results", "map", "left", "right", "keyResult", "valueResult", "output", "parsedType", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "error", "issue", "parsedType", "error", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "parsedType", "error", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "error", "parsedType", "issue", "Class", "_emoji", "_undefined", "_null", "Class", "json", "file", "id", "schema", "params", "gen", "date", "datetime", "duration", "time", "datetime", "date", "time", "duration", "initializer", "issue", "issues", "parse", "parseAsync", "safeParse", "safeParseAsync", "def", "parse", "safeParse", "parseAsync", "safeParseAsync", "check", "_default", "_catch", "_emoji", "datetime", "date", "time", "duration", "string", "email", "guid", "uuid", "emoji", "nanoid", "cuid", "cuid2", "ulid", "xid", "ksuid", "ipv4", "ipv6", "cidrv4", "cidrv6", "base64", "base64url", "e164", "number", "boolean", "bigint", "_undefined", "_null", "_void", "date", "_enum", "issue", "output", "nullish", "_default", "_catch", "issue", "string", "number", "boolean", "_null", "map", "ZodFirstPartyTypeKind", "bigint", "boolean", "date", "number", "string", "string", "number", "boolean", "bigint", "date"]
}
